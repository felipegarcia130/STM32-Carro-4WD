
stm32_h7_nrf24-p2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  0800eca8  0800eca8  0001eca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f898  0800f898  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f898  0800f898  0001f898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a0  0800f8a0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a0  0800f8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  0800f8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  24000208  0800faac  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000694  0800faac  00020694  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020276  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d7  00000000  00000000  000404a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00043680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00045088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d834  00000000  00000000  00046958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec8e  00000000  00000000  0008418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195a7a  00000000  00000000  000a2e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00238894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086e4  00000000  00000000  002388e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ec90 	.word	0x0800ec90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800ec90 	.word	0x0800ec90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <SetupNRF24>:
}

/**
 * @brief Configuración inicial del NRF24L01
 */
void SetupNRF24(){
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b0a3      	sub	sp, #140	; 0x8c
 8000bac:	af22      	add	r7, sp, #136	; 0x88
	NRF24_begin(GPIOC, Nrf_CSn_Pin, Nrf_CE_Pin, hspi5);
 8000bae:	4c20      	ldr	r4, [pc, #128]	; (8000c30 <SetupNRF24+0x88>)
 8000bb0:	4668      	mov	r0, sp
 8000bb2:	1d23      	adds	r3, r4, #4
 8000bb4:	2284      	movs	r2, #132	; 0x84
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f009 fa26 	bl	800a008 <memcpy>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	2240      	movs	r2, #64	; 0x40
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	481c      	ldr	r0, [pc, #112]	; (8000c34 <SetupNRF24+0x8c>)
 8000bc4:	f001 f814 	bl	8001bf0 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8000bc8:	4c1b      	ldr	r4, [pc, #108]	; (8000c38 <SetupNRF24+0x90>)
 8000bca:	4668      	mov	r0, sp
 8000bcc:	f104 0310 	add.w	r3, r4, #16
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f009 fa18 	bl	800a008 <memcpy>
 8000bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bdc:	f001 ffc6 	bl	8002b6c <nrf24_DebugUART_Init>
	NRF24_openReadingPipe(1, pipe_address);
 8000be0:	a311      	add	r3, pc, #68	; (adr r3, 8000c28 <SetupNRF24+0x80>)
 8000be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be6:	2001      	movs	r0, #1
 8000be8:	f001 f92e 	bl	8001e48 <NRF24_openReadingPipe>
	NRF24_setAutoAck(false);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f001 fa4d 	bl	800208c <NRF24_setAutoAck>
	NRF24_setChannel(60);
 8000bf2:	203c      	movs	r0, #60	; 0x3c
 8000bf4:	f001 f991 	bl	8001f1a <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	f001 f9a3 	bl	8001f44 <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f001 fa92 	bl	8002128 <NRF24_setDataRate>
	NRF24_enableDynamicPayloads();
 8000c04:	f001 f9f8 	bl	8001ff8 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000c08:	f001 f9c8 	bl	8001f9c <NRF24_enableAckPayload>
	printRadioSettings();
 8000c0c:	f001 fb86 	bl	800231c <printRadioSettings>
	NRF24_startListening();
 8000c10:	f001 f8cc 	bl	8001dac <NRF24_startListening>
	printf("Starting NRF24\r\n");
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <SetupNRF24+0x94>)
 8000c16:	f00a f8dd 	bl	800add4 <puts>
}
 8000c1a:	bf00      	nop
 8000c1c:	3704      	adds	r7, #4
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
 8000c28:	223344aa 	.word	0x223344aa
 8000c2c:	00000011 	.word	0x00000011
 8000c30:	24000310 	.word	0x24000310
 8000c34:	58020800 	.word	0x58020800
 8000c38:	24000430 	.word	0x24000430
 8000c3c:	0800eca8 	.word	0x0800eca8

08000c40 <ProcessNRF24Data>:


/**
 * @brief Procesa los datos recibidos por NRF24L01
 */
void ProcessNRF24Data() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	; 0x40
 8000c44:	af02      	add	r7, sp, #8
    char myRxData[50] = "";
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	222e      	movs	r2, #46	; 0x2e
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f009 f9e6 	bl	800a024 <memset>
    if (NRF24_available()) {
 8000c58:	f001 f8ce 	bl	8001df8 <NRF24_available>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d065      	beq.n	8000d2e <ProcessNRF24Data+0xee>
        NRF24_read(bufferNRF, 6);
 8000c62:	2106      	movs	r1, #6
 8000c64:	4834      	ldr	r0, [pc, #208]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000c66:	f001 f8cf 	bl	8001e08 <NRF24_read>
        if (bufferNRF[0] == 0xFF && bufferNRF[1] == 0xFF) {
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d10a      	bne.n	8000c88 <ProcessNRF24Data+0x48>
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	2bff      	cmp	r3, #255	; 0xff
 8000c78:	d106      	bne.n	8000c88 <ProcessNRF24Data+0x48>
            snprintf(myRxData, 32, "Coordinates not found\r\n");
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <ProcessNRF24Data+0xfc>)
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00a f8b5 	bl	800adf0 <sniprintf>
 8000c86:	e042      	b.n	8000d0e <ProcessNRF24Data+0xce>
        }
        else {
        	coordX = (bufferNRF[0]<<8|bufferNRF[1]);
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <ProcessNRF24Data+0x100>)
 8000c9e:	801a      	strh	r2, [r3, #0]
        	coordY = (bufferNRF[2]<<8|bufferNRF[3]);
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <ProcessNRF24Data+0x104>)
 8000cb6:	801a      	strh	r2, [r3, #0]
        	angle  = (int16_t)(bufferNRF[4]<<8|bufferNRF[5]);
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <ProcessNRF24Data+0xf8>)
 8000cc2:	795b      	ldrb	r3, [r3, #5]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <ProcessNRF24Data+0x108>)
 8000ccc:	801a      	strh	r2, [r3, #0]
        	if (angle > 180) angle -= 360;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <ProcessNRF24Data+0x108>)
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	2bb4      	cmp	r3, #180	; 0xb4
 8000cd6:	dd09      	ble.n	8000cec <ProcessNRF24Data+0xac>
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <ProcessNRF24Data+0x108>)
 8000cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <ProcessNRF24Data+0x108>)
 8000cea:	801a      	strh	r2, [r3, #0]
        	snprintf(myRxData, 32, "%u %u %d \r\n", coordX, coordY, angle);
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <ProcessNRF24Data+0x100>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <ProcessNRF24Data+0x104>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <ProcessNRF24Data+0x108>)
 8000cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfe:	1d38      	adds	r0, r7, #4
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	9200      	str	r2, [sp, #0]
 8000d04:	460b      	mov	r3, r1
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <ProcessNRF24Data+0x10c>)
 8000d08:	2120      	movs	r1, #32
 8000d0a:	f00a f871 	bl	800adf0 <sniprintf>
        }
        NRF24_writeAckPayload(1, myAckPayload, 32);
 8000d0e:	2220      	movs	r2, #32
 8000d10:	490f      	ldr	r1, [pc, #60]	; (8000d50 <ProcessNRF24Data+0x110>)
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 fab5 	bl	8002282 <NRF24_writeAckPayload>
        HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fae0 	bl	80002e0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	1d39      	adds	r1, r7, #4
 8000d26:	230a      	movs	r3, #10
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <ProcessNRF24Data+0x114>)
 8000d2a:	f008 f88c 	bl	8008e46 <HAL_UART_Transmit>
    }
}
 8000d2e:	bf00      	nop
 8000d30:	3738      	adds	r7, #56	; 0x38
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	240004c0 	.word	0x240004c0
 8000d3c:	0800ecb8 	.word	0x0800ecb8
 8000d40:	240004c6 	.word	0x240004c6
 8000d44:	240004c8 	.word	0x240004c8
 8000d48:	240004ca 	.word	0x240004ca
 8000d4c:	0800ecd0 	.word	0x0800ecd0
 8000d50:	24000008 	.word	0x24000008
 8000d54:	24000430 	.word	0x24000430

08000d58 <ProcessCANMessage>:

/**
 * @brief Procesa los mensajes recibidos por el protocolo CAN
 */
void ProcessCANMessage() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxDataCAN) == HAL_OK) {
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <ProcessCANMessage+0x74>)
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <ProcessCANMessage+0x78>)
 8000d66:	f002 ff67 	bl	8003c38 <HAL_FDCAN_GetRxMessage>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d126      	bne.n	8000dbe <ProcessCANMessage+0x66>
        //printf("Datos: ");

        if (RxHeader.Identifier == 0x100) {
            //printf("\n\rMensaje recibido de Arduino: ");
        }
        for (uint8_t i = 0; i < 8; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	e002      	b.n	8000d7c <ProcessCANMessage+0x24>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b07      	cmp	r3, #7
 8000d80:	d9f9      	bls.n	8000d76 <ProcessCANMessage+0x1e>
            //printf("%02X ", RxDataCAN[i]);
        }

        if (RxDataCAN[4]==0x01){
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d103      	bne.n	8000d92 <ProcessCANMessage+0x3a>
        	buzzer = 1;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <ProcessCANMessage+0x7c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e002      	b.n	8000d98 <ProcessCANMessage+0x40>
        }else{
        	buzzer = 0;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <ProcessCANMessage+0x7c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		union {
			float valueFloat;
			uint8_t valueInt[4];
		} conversion;

		conversion.valueInt[0] = RxDataCAN[0];
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	703b      	strb	r3, [r7, #0]
		conversion.valueInt[1] = RxDataCAN[1];
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000da0:	785b      	ldrb	r3, [r3, #1]
 8000da2:	707b      	strb	r3, [r7, #1]
		conversion.valueInt[2] = RxDataCAN[2];
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	70bb      	strb	r3, [r7, #2]
		conversion.valueInt[3] = RxDataCAN[3];
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <ProcessCANMessage+0x70>)
 8000dac:	78db      	ldrb	r3, [r3, #3]
 8000dae:	70fb      	strb	r3, [r7, #3]

		vueltas = conversion.valueFloat;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <ProcessCANMessage+0x80>)
 8000db4:	6013      	str	r3, [r2, #0]

        //printf("\n\rSTM32 - Mensaje recibido correctamente.\n\r");

        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Indicar recepción
 8000db6:	2101      	movs	r1, #1
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <ProcessCANMessage+0x84>)
 8000dba:	f003 fcf2 	bl	80047a2 <HAL_GPIO_TogglePin>
        //printf("Vueltas: %.4f\n\r", vueltas);
    } else {
        //printf("Esperando mensajes CAN...\n\r");
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	24000540 	.word	0x24000540
 8000dcc:	24000510 	.word	0x24000510
 8000dd0:	24000224 	.word	0x24000224
 8000dd4:	24000548 	.word	0x24000548
 8000dd8:	2400054c 	.word	0x2400054c
 8000ddc:	58020400 	.word	0x58020400

08000de0 <SendCANMessage>:

/**
 * @brief Envia los mensajes por protocolo CAN
 */
void SendCANMessage(uint8_t state){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	TxDataCAN[0] = state;
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <SendCANMessage+0x38>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	7013      	strb	r3, [r2, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataCAN) != HAL_OK) {
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <SendCANMessage+0x38>)
 8000df2:	490a      	ldr	r1, [pc, #40]	; (8000e1c <SendCANMessage+0x3c>)
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <SendCANMessage+0x40>)
 8000df6:	f002 fec3 	bl	8003b80 <HAL_FDCAN_AddMessageToTxFifoQ>

	    	//printf("Mensaje CAN enviado: Buzzer %s\r\n", state ? "Activado" : "Apagado");
	    }

    //printf("Contenido de TxDataCAN: ");
    for (int i = 0; i < 8; i++) { //  Asumir que el tamaño del mensaje es 8 bytes
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e002      	b.n	8000e06 <SendCANMessage+0x26>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b07      	cmp	r3, #7
 8000e0a:	ddf9      	ble.n	8000e00 <SendCANMessage+0x20>
        //printf("0x%02X ", TxDataCAN[i]);
    }
    //printf("\n\r");

}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	24000538 	.word	0x24000538
 8000e1c:	240004ec 	.word	0x240004ec
 8000e20:	24000224 	.word	0x24000224

08000e24 <SetupPWM>:

/**
 * @brief Configuración inicial del PWM
 */
void SetupPWM(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    // Iniciar el PWM en el canal 1 de TIM13
    if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK) {
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <SetupPWM+0x2c>)
 8000e2c:	f007 fa04 	bl	8008238 <HAL_TIM_PWM_Start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SetupPWM+0x16>
        Error_Handler(); // Error al iniciar PWM en TIM13
 8000e36:	f000 fd81 	bl	800193c <Error_Handler>
    }

    // Iniciar el PWM en el canal 1 de TIM14
    if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK) {
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <SetupPWM+0x30>)
 8000e3e:	f007 f9fb 	bl	8008238 <HAL_TIM_PWM_Start>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SetupPWM+0x28>
        Error_Handler(); // Error al iniciar PWM en TIM14
 8000e48:	f000 fd78 	bl	800193c <Error_Handler>
    }
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	24000398 	.word	0x24000398
 8000e54:	240003e4 	.word	0x240003e4

08000e58 <SetMotorSpeed>:

/**
 * @brief Ajusta la velocidad del motor
 */
void SetMotorSpeed(uint16_t pulseWidth) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, pulseWidth);
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SetMotorSpeed+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	240003e4 	.word	0x240003e4

08000e7c <BrakeMotor>:

/**
 * @brief Frena el motor
 */
void BrakeMotor(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    SetMotorSpeed(1500);
 8000e80:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e84:	f7ff ffe8 	bl	8000e58 <SetMotorSpeed>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Turning_SetAngle>:
 * Limites:
 *  	Derecha:170
 *  	Izquierda: 10
 *  	Centro: 90
 */
void Turning_SetAngle(uint16_t angle) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
    uint32_t pulseWidth = 1000 + (angle*1000) / 180;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <Turning_SetAngle+0x3c>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	441a      	add	r2, r3
 8000ea8:	11d2      	asrs	r2, r2, #7
 8000eaa:	17db      	asrs	r3, r3, #31
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000eb2:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, pulseWidth);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <Turning_SetAngle+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	b60b60b7 	.word	0xb60b60b7
 8000ecc:	24000398 	.word	0x24000398

08000ed0 <NRFMotorEncoderCAN>:
		//MPU_readProcessedData(&hi2c4);

	}
}
//RUTA FINAL
void NRFMotorEncoderCAN(){
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08d      	sub	sp, #52	; 0x34
 8000ed4:	af00      	add	r7, sp, #0
	uint8_t segmento = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t state = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	float posiciones[] = {
 8000ee2:	4b9d      	ldr	r3, [pc, #628]	; (8001158 <NRFMotorEncoderCAN+0x288>)
 8000ee4:	f107 0408 	add.w	r4, r7, #8
 8000ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        5,   // Primera vuelta
	        8.5,   // Segunda vuelta
	        11  // Segundo avance
	};

	uint8_t targetsX[] = {230,155,125,125};
 8000eee:	4b9b      	ldr	r3, [pc, #620]	; (800115c <NRFMotorEncoderCAN+0x28c>)
 8000ef0:	607b      	str	r3, [r7, #4]
	uint8_t targetsY[] = {75,25,75,120};
 8000ef2:	4b9b      	ldr	r3, [pc, #620]	; (8001160 <NRFMotorEncoderCAN+0x290>)
 8000ef4:	603b      	str	r3, [r7, #0]

	while (segmento < 5){
 8000ef6:	e10d      	b.n	8001114 <NRFMotorEncoderCAN+0x244>
		ProcessNRF24Data();
 8000ef8:	f7ff fea2 	bl	8000c40 <ProcessNRF24Data>
		ProcessCANMessage();
 8000efc:	f7ff ff2c 	bl	8000d58 <ProcessCANMessage>
		if((abs(coordX - targetsX[segmento]) <= 10 && abs(coordY - targetsY[segmento]) <= 10) || vueltas >= posiciones[segmento]){
 8000f00:	4b98      	ldr	r3, [pc, #608]	; (8001164 <NRFMotorEncoderCAN+0x294>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f0a:	3330      	adds	r3, #48	; 0x30
 8000f0c:	443b      	add	r3, r7
 8000f0e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f113 0f0a 	cmn.w	r3, #10
 8000f18:	db24      	blt.n	8000f64 <NRFMotorEncoderCAN+0x94>
 8000f1a:	4b92      	ldr	r3, [pc, #584]	; (8001164 <NRFMotorEncoderCAN+0x294>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f24:	3330      	adds	r3, #48	; 0x30
 8000f26:	443b      	add	r3, r7
 8000f28:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	dc18      	bgt.n	8000f64 <NRFMotorEncoderCAN+0x94>
 8000f32:	4b8d      	ldr	r3, [pc, #564]	; (8001168 <NRFMotorEncoderCAN+0x298>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f3c:	3330      	adds	r3, #48	; 0x30
 8000f3e:	443b      	add	r3, r7
 8000f40:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f113 0f0a 	cmn.w	r3, #10
 8000f4a:	db0b      	blt.n	8000f64 <NRFMotorEncoderCAN+0x94>
 8000f4c:	4b86      	ldr	r3, [pc, #536]	; (8001168 <NRFMotorEncoderCAN+0x298>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f56:	3330      	adds	r3, #48	; 0x30
 8000f58:	443b      	add	r3, r7
 8000f5a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b0a      	cmp	r3, #10
 8000f62:	dd0f      	ble.n	8000f84 <NRFMotorEncoderCAN+0xb4>
 8000f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	3330      	adds	r3, #48	; 0x30
 8000f6c:	443b      	add	r3, r7
 8000f6e:	3b28      	subs	r3, #40	; 0x28
 8000f70:	ed93 7a00 	vldr	s14, [r3]
 8000f74:	4b7d      	ldr	r3, [pc, #500]	; (800116c <NRFMotorEncoderCAN+0x29c>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	d831      	bhi.n	8000fe8 <NRFMotorEncoderCAN+0x118>
			BrakeMotor();
 8000f84:	f7ff ff7a 	bl	8000e7c <BrakeMotor>
			if (state == 0){
 8000f88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10a      	bne.n	8000fa6 <NRFMotorEncoderCAN+0xd6>
				state = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				SendCANMessage(state);
 8000f96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff20 	bl	8000de0 <SendCANMessage>
			}
			while(buzzer == 0){
 8000fa0:	e001      	b.n	8000fa6 <NRFMotorEncoderCAN+0xd6>
				ProcessCANMessage();
 8000fa2:	f7ff fed9 	bl	8000d58 <ProcessCANMessage>
			while(buzzer == 0){
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <NRFMotorEncoderCAN+0x2a0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <NRFMotorEncoderCAN+0xd2>
			}
			HAL_Delay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f002 fa25 	bl	8003400 <HAL_Delay>
			ProcessNRF24Data();
 8000fb6:	f7ff fe43 	bl	8000c40 <ProcessNRF24Data>
			HAL_Delay(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	f002 fa1f 	bl	8003400 <HAL_Delay>
			segmento++;
 8000fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (state == 1){
 8000fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f040 809f 	bne.w	8001114 <NRFMotorEncoderCAN+0x244>
				state = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				SendCANMessage(state);
 8000fdc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fefd 	bl	8000de0 <SendCANMessage>
			if (state == 1){
 8000fe6:	e095      	b.n	8001114 <NRFMotorEncoderCAN+0x244>
			}
		}else{
			if (state == 1){
 8000fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d107      	bne.n	8001000 <NRFMotorEncoderCAN+0x130>
				state = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				SendCANMessage(state);
 8000ff6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fef0 	bl	8000de0 <SendCANMessage>
			}
			double targetAngle = atan2(targetsY[segmento] - coordY, targetsX[segmento] - coordX);
 8001000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001004:	3330      	adds	r3, #48	; 0x30
 8001006:	443b      	add	r3, r7
 8001008:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800100c:	461a      	mov	r2, r3
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <NRFMotorEncoderCAN+0x298>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800101c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001020:	3330      	adds	r3, #48	; 0x30
 8001022:	443b      	add	r3, r7
 8001024:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001028:	461a      	mov	r2, r3
 800102a:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <NRFMotorEncoderCAN+0x294>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ee06 3a90 	vmov	s13, r3
 8001034:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001038:	eeb0 1b46 	vmov.f64	d1, d6
 800103c:	eeb0 0b47 	vmov.f64	d0, d7
 8001040:	f00d fc5a 	bl	800e8f8 <atan2>
 8001044:	ed87 0b08 	vstr	d0, [r7, #32]
			targetAngle = round(targetAngle * 180.0 / M_PI); // Convertimos radianes a grados
 8001048:	ed97 7b08 	vldr	d7, [r7, #32]
 800104c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8001128 <NRFMotorEncoderCAN+0x258>
 8001050:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001054:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8001130 <NRFMotorEncoderCAN+0x260>
 8001058:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800105c:	eeb0 0b46 	vmov.f64	d0, d6
 8001060:	f00d fc04 	bl	800e86c <round>
 8001064:	ed87 0b08 	vstr	d0, [r7, #32]

			double angleError = targetAngle - (double)(angle);
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <NRFMotorEncoderCAN+0x2a4>)
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001076:	ed97 6b08 	vldr	d6, [r7, #32]
 800107a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800107e:	ed87 7b06 	vstr	d7, [r7, #24]

			targetAngle = 90 - angleError;
 8001082:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001138 <NRFMotorEncoderCAN+0x268>
 8001086:	ed97 7b06 	vldr	d7, [r7, #24]
 800108a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800108e:	ed87 7b08 	vstr	d7, [r7, #32]
			if(targetAngle > 160) targetAngle = 160;
 8001092:	ed97 7b08 	vldr	d7, [r7, #32]
 8001096:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001140 <NRFMotorEncoderCAN+0x270>
 800109a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	dd04      	ble.n	80010ae <NRFMotorEncoderCAN+0x1de>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <NRFMotorEncoderCAN+0x2a8>)
 80010aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(targetAngle < 20) targetAngle = 20;
 80010ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80010b2:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 80010b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d504      	bpl.n	80010ca <NRFMotorEncoderCAN+0x1fa>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <NRFMotorEncoderCAN+0x2ac>)
 80010c6:	e9c7 2308 	strd	r2, r3, [r7, #32]

			Turning_SetAngle(targetAngle);
 80010ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fed7 	bl	8000e8c <Turning_SetAngle>
			if (targetAngle <= 60 || targetAngle >= 120 ){
 80010de:	ed97 7b08 	vldr	d7, [r7, #32]
 80010e2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001148 <NRFMotorEncoderCAN+0x278>
 80010e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d908      	bls.n	8001102 <NRFMotorEncoderCAN+0x232>
 80010f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80010f4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001150 <NRFMotorEncoderCAN+0x280>
 80010f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	db04      	blt.n	800110c <NRFMotorEncoderCAN+0x23c>
				SetMotorSpeed(1100);
 8001102:	f240 404c 	movw	r0, #1100	; 0x44c
 8001106:	f7ff fea7 	bl	8000e58 <SetMotorSpeed>
 800110a:	e003      	b.n	8001114 <NRFMotorEncoderCAN+0x244>
			}else{
				SetMotorSpeed(1300);
 800110c:	f240 5014 	movw	r0, #1300	; 0x514
 8001110:	f7ff fea2 	bl	8000e58 <SetMotorSpeed>
	while (segmento < 5){
 8001114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001118:	2b04      	cmp	r3, #4
 800111a:	f67f aeed 	bls.w	8000ef8 <NRFMotorEncoderCAN+0x28>
			}

		}
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3734      	adds	r7, #52	; 0x34
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	00000000 	.word	0x00000000
 800112c:	40668000 	.word	0x40668000
 8001130:	54442d18 	.word	0x54442d18
 8001134:	400921fb 	.word	0x400921fb
 8001138:	00000000 	.word	0x00000000
 800113c:	40568000 	.word	0x40568000
 8001140:	00000000 	.word	0x00000000
 8001144:	40640000 	.word	0x40640000
 8001148:	00000000 	.word	0x00000000
 800114c:	404e0000 	.word	0x404e0000
 8001150:	00000000 	.word	0x00000000
 8001154:	405e0000 	.word	0x405e0000
 8001158:	0800ed10 	.word	0x0800ed10
 800115c:	7d7d9be6 	.word	0x7d7d9be6
 8001160:	784b194b 	.word	0x784b194b
 8001164:	240004c6 	.word	0x240004c6
 8001168:	240004c8 	.word	0x240004c8
 800116c:	2400054c 	.word	0x2400054c
 8001170:	24000548 	.word	0x24000548
 8001174:	240004ca 	.word	0x240004ca
 8001178:	40640000 	.word	0x40640000
 800117c:	40340000 	.word	0x40340000

08001180 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800118c:	bf00      	nop
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <main+0xf4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <main+0x24>
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	627a      	str	r2, [r7, #36]	; 0x24
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dcf4      	bgt.n	800118e <main+0xe>
  if ( timeout < 0 )
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da01      	bge.n	80011ae <main+0x2e>
  {
  Error_Handler();
 80011aa:	f000 fbc7 	bl	800193c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f002 f895 	bl	80032dc <HAL_Init>
  SystemClock_Config();
 80011b2:	f000 f865 	bl	8001280 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
//HW semaphore Clock enable/
__HAL_RCC_HSEM_CLK_ENABLE();
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <main+0xf4>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <main+0xf4>)
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <main+0xf4>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f003 faff 	bl	80047d8 <HAL_HSEM_FastTake>
//Release HSEM in order to notify the CPU2(CM4)/
HAL_HSEM_Release(HSEM_ID_0,0);
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f003 fb15 	bl	800480c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80011e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011e8:	bf00      	nop
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <main+0xf4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d104      	bne.n	8001200 <main+0x80>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	627a      	str	r2, [r7, #36]	; 0x24
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dcf4      	bgt.n	80011ea <main+0x6a>
if ( timeout < 0 )
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	2b00      	cmp	r3, #0
 8001204:	da01      	bge.n	800120a <main+0x8a>
{
Error_Handler();
 8001206:	f000 fb99 	bl	800193c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 faf3 	bl	80017f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800120e:	f000 faa5 	bl	800175c <MX_USART3_UART_Init>
  MX_I2C4_Init();
 8001212:	f000 f971 	bl	80014f8 <MX_I2C4_Init>
  MX_SPI5_Init();
 8001216:	f000 f9af 	bl	8001578 <MX_SPI5_Init>
  MX_TIM13_Init();
 800121a:	f000 fa03 	bl	8001624 <MX_TIM13_Init>
  MX_TIM14_Init();
 800121e:	f000 fa4f 	bl	80016c0 <MX_TIM14_Init>
  MX_FDCAN1_Init();
 8001222:	f000 f8b5 	bl	8001390 <MX_FDCAN1_Init>

  FDCAN_FilterTypeDef filterConfig;
  filterConfig.IdType = FDCAN_STANDARD_ID;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  filterConfig.FilterIndex = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterType = FDCAN_FILTER_MASK;
 800122e:	2302      	movs	r3, #2
 8001230:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001232:	2301      	movs	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
  filterConfig.FilterID1 = 0x100;   // ID exacto que queremos aceptar
 8001236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123a:	617b      	str	r3, [r7, #20]
  filterConfig.FilterID2 = 0x7FF;   // Mascara para aceptar solo el ID exacto
 800123c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001240:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filterConfig) != HAL_OK) {
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <main+0xf8>)
 8001248:	f002 fbcc 	bl	80039e4 <HAL_FDCAN_ConfigFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <main+0xd6>
      Error_Handler();
 8001252:	f000 fb73 	bl	800193c <Error_Handler>
  }

  printf("Welcome to the CANbus and Motor Control System!!!\n\r");
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <main+0xfc>)
 8001258:	f009 fd36 	bl	800acc8 <iprintf>
  SetupNRF24();
 800125c:	f7ff fca4 	bl	8000ba8 <SetupNRF24>
  SetupPWM();
 8001260:	f7ff fde0 	bl	8000e24 <SetupPWM>

//  NRFMotorCAN();
//  SetupMPU();
  //RutaHardCoding();
  //MotorEncoderCAN();
  HAL_Delay(5000);
 8001264:	f241 3088 	movw	r0, #5000	; 0x1388
 8001268:	f002 f8ca 	bl	8003400 <HAL_Delay>
  NRFMotorEncoderCAN();
 800126c:	f7ff fe30 	bl	8000ed0 <NRFMotorEncoderCAN>

  while (1){
 8001270:	e7fe      	b.n	8001270 <main+0xf0>
 8001272:	bf00      	nop
 8001274:	58024400 	.word	0x58024400
 8001278:	24000224 	.word	0x24000224
 800127c:	0800ed5c 	.word	0x0800ed5c

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09c      	sub	sp, #112	; 0x70
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	224c      	movs	r2, #76	; 0x4c
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f008 fec8 	bl	800a024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f008 fec2 	bl	800a024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012a0:	2004      	movs	r0, #4
 80012a2:	f003 fbef 	bl	8004a84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <SystemClock_Config+0x104>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a35      	ldr	r2, [pc, #212]	; (8001384 <SystemClock_Config+0x104>)
 80012b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <SystemClock_Config+0x104>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <SystemClock_Config+0x108>)
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <SystemClock_Config+0x108>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <SystemClock_Config+0x108>)
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012d8:	bf00      	nop
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <SystemClock_Config+0x104>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e6:	d1f8      	bne.n	80012da <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemClock_Config+0x10c>)
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f023 0303 	bic.w	r3, r3, #3
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <SystemClock_Config+0x10c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012f8:	2303      	movs	r3, #3
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001302:	2301      	movs	r3, #1
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	2302      	movs	r3, #2
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001316:	23f0      	movs	r3, #240	; 0xf0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 800131e:	2318      	movs	r3, #24
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001322:	2302      	movs	r3, #2
 8001324:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001326:	2308      	movs	r3, #8
 8001328:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800132a:	2300      	movs	r3, #0
 800132c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fbfe 	bl	8004b38 <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001342:	f000 fafb 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	233f      	movs	r3, #63	; 0x3f
 8001348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134a:	2303      	movs	r3, #3
 800134c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001352:	2308      	movs	r3, #8
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2104      	movs	r1, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f811 	bl	8005394 <HAL_RCC_ClockConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001378:	f000 fae0 	bl	800193c <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3770      	adds	r7, #112	; 0x70
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	58024800 	.word	0x58024800
 8001388:	58000400 	.word	0x58000400
 800138c:	58024400 	.word	0x58024400

08001390 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001396:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <MX_FDCAN1_Init+0x15c>)
 800139a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013ae:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80013ba:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013bc:	2202      	movs	r2, #2
 80013be:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013c2:	2208      	movs	r2, #8
 80013c4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013c8:	221f      	movs	r2, #31
 80013ca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013ce:	2208      	movs	r2, #8
 80013d0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013da:	2201      	movs	r2, #1
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80013fe:	2201      	movs	r2, #1
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001404:	2204      	movs	r2, #4
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800140a:	2200      	movs	r2, #0
 800140c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001410:	2204      	movs	r2, #4
 8001412:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800141c:	2204      	movs	r2, #4
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001422:	2200      	movs	r2, #0
 8001424:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001428:	2200      	movs	r2, #0
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800142e:	2201      	movs	r2, #1
 8001430:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001434:	2200      	movs	r2, #0
 8001436:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800143a:	2204      	movs	r2, #4
 800143c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800143e:	482a      	ldr	r0, [pc, #168]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001440:	f002 f8f2 	bl	8003628 <HAL_FDCAN_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800144a:	f000 fa77 	bl	800193c <Error_Handler>

  // PARTE DE CAN ---------------------------------------------------------------------------

  //AAO+/
   /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 800145c:	2202      	movs	r2, #2
 800145e:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 8001462:	2201      	movs	r2, #1
 8001464:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x000;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x000;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]

    /* Configure global filter to reject all non-matching frames */
      HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001472:	2301      	movs	r3, #1
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	2202      	movs	r2, #2
 800147a:	2102      	movs	r1, #2
 800147c:	481a      	ldr	r0, [pc, #104]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 800147e:	f002 fb27 	bl	8003ad0 <HAL_FDCAN_ConfigGlobalFilter>

      if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001482:	491b      	ldr	r1, [pc, #108]	; (80014f0 <MX_FDCAN1_Init+0x160>)
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001486:	f002 faad 	bl	80039e4 <HAL_FDCAN_ConfigFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_FDCAN1_Init+0x104>
        {
           /* Filter configuration Error */
           Error_Handler();
 8001490:	f000 fa54 	bl	800193c <Error_Handler>
        }
       /* Start the FDCAN module */
      if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 8001496:	f002 fb48 	bl	8003b2a <HAL_FDCAN_Start>
        }
           /* Start Error */
      if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_FDCAN1_Init+0x158>)
 80014a0:	f002 fd38 	bl	8003f14 <HAL_FDCAN_ActivateNotification>
        }
           /* Notification Error */

       /* Configure Tx buffer message */
      TxHeader.Identifier = 0x111;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014a6:	f240 1211 	movw	r2, #273	; 0x111
 80014aa:	601a      	str	r2, [r3, #0]
      TxHeader.IdType = FDCAN_STANDARD_ID;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
      TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
      TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014ba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80014be:	60da      	str	r2, [r3, #12]
      TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
      TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014cc:	615a      	str	r2, [r3, #20]
      TxHeader.FDFormat = FDCAN_FD_CAN;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014d4:	619a      	str	r2, [r3, #24]
      TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
      TxHeader.MessageMarker = 0x00;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MX_FDCAN1_Init+0x164>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
     //AAO-/
// PARTE DE CAN -----------------------------------------------------------------------------

  /* USER CODE END FDCAN1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	24000224 	.word	0x24000224
 80014ec:	4000a000 	.word	0x4000a000
 80014f0:	240004cc 	.word	0x240004cc
 80014f4:	240004ec 	.word	0x240004ec

080014f8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_I2C4_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_I2C4_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_I2C4_Init+0x74>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <MX_I2C4_Init+0x7c>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_I2C4_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_I2C4_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_I2C4_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_I2C4_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C4_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C4_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C4_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_I2C4_Init+0x74>)
 8001534:	f003 f97e 	bl	8004834 <HAL_I2C_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800153e:	f000 f9fd 	bl	800193c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_I2C4_Init+0x74>)
 8001546:	f003 fa05 	bl	8004954 <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001550:	f000 f9f4 	bl	800193c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_I2C4_Init+0x74>)
 8001558:	f003 fa47 	bl	80049ea <HAL_I2CEx_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f9eb 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	240002c4 	.word	0x240002c4
 8001570:	58001c00 	.word	0x58001c00
 8001574:	00404c74 	.word	0x00404c74

08001578 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_SPI5_Init+0xa4>)
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <MX_SPI5_Init+0xa8>)
 8001580:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_SPI5_Init+0xa4>)
 8001584:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001588:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_SPI5_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_SPI5_Init+0xa4>)
 8001592:	2207      	movs	r2, #7
 8001594:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_SPI5_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_SPI5_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_SPI5_Init+0xa4>)
 80015a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_SPI5_Init+0xa4>)
 80015ac:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015b0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_SPI5_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_SPI5_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_SPI5_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_SPI5_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI5_Init+0xa4>)
 80015cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_SPI5_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_SPI5_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI5_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_SPI5_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI5_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI5_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI5_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_SPI5_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI5_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_SPI5_Init+0xa4>)
 800160a:	f005 fdb7 	bl	800717c <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001614:	f000 f992 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000310 	.word	0x24000310
 8001620:	40015000 	.word	0x40015000

08001624 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_TIM13_Init+0x94>)
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <MX_TIM13_Init+0x98>)
 8001640:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_TIM13_Init+0x94>)
 8001644:	22ef      	movs	r2, #239	; 0xef
 8001646:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_TIM13_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM13_Init+0x94>)
 8001650:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001654:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_TIM13_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_TIM13_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001662:	4815      	ldr	r0, [pc, #84]	; (80016b8 <MX_TIM13_Init+0x94>)
 8001664:	f006 fd2f 	bl	80080c6 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800166e:	f000 f965 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_TIM13_Init+0x94>)
 8001674:	f006 fd7e 	bl	8008174 <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800167e:	f000 f95d 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001686:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800168a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MX_TIM13_Init+0x94>)
 800169c:	f006 feda 	bl	8008454 <HAL_TIM_PWM_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80016a6:	f000 f949 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MX_TIM13_Init+0x94>)
 80016ac:	f001 fc34 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24000398 	.word	0x24000398
 80016bc:	40001c00 	.word	0x40001c00

080016c0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM14_Init+0x94>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <MX_TIM14_Init+0x98>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_TIM14_Init+0x94>)
 80016e0:	22ef      	movs	r2, #239	; 0xef
 80016e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_TIM14_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_TIM14_Init+0x94>)
 80016ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016f0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_TIM14_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_TIM14_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <MX_TIM14_Init+0x94>)
 8001700:	f006 fce1 	bl	80080c6 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800170a:	f000 f917 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <MX_TIM14_Init+0x94>)
 8001710:	f006 fd30 	bl	8008174 <HAL_TIM_PWM_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800171a:	f000 f90f 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171e:	2360      	movs	r3, #96	; 0x60
 8001720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001722:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <MX_TIM14_Init+0x94>)
 8001738:	f006 fe8c 	bl	8008454 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001742:	f000 f8fb 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <MX_TIM14_Init+0x94>)
 8001748:	f001 fbe6 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	240003e4 	.word	0x240003e4
 8001758:	40002000 	.word	0x40002000

0800175c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <MX_USART3_UART_Init+0x94>)
 8001764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_USART3_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_USART3_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_USART3_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART3_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART3_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <MX_USART3_UART_Init+0x90>)
 80017a6:	f007 fafe 	bl	8008da6 <HAL_UART_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017b0:	f000 f8c4 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_USART3_UART_Init+0x90>)
 80017b8:	f008 fb32 	bl	8009e20 <HAL_UARTEx_SetTxFifoThreshold>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017c2:	f000 f8bb 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <MX_USART3_UART_Init+0x90>)
 80017ca:	f008 fb67 	bl	8009e9c <HAL_UARTEx_SetRxFifoThreshold>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017d4:	f000 f8b2 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_USART3_UART_Init+0x90>)
 80017da:	f008 fae8 	bl	8009dae <HAL_UARTEx_DisableFifoMode>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017e4:	f000 f8aa 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24000430 	.word	0x24000430
 80017f0:	40004800 	.word	0x40004800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <MX_GPIO_Init+0x13c>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <MX_GPIO_Init+0x13c>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <MX_GPIO_Init+0x13c>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a40      	ldr	r2, [pc, #256]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <MX_GPIO_Init+0x13c>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <MX_GPIO_Init+0x13c>)
 800184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MX_GPIO_Init+0x13c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a29      	ldr	r2, [pc, #164]	; (8001930 <MX_GPIO_Init+0x13c>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_GPIO_Init+0x13c>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_GPIO_Init+0x13c>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <MX_GPIO_Init+0x13c>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_GPIO_Init+0x13c>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f244 0101 	movw	r1, #16385	; 0x4001
 80018c4:	481b      	ldr	r0, [pc, #108]	; (8001934 <MX_GPIO_Init+0x140>)
 80018c6:	f002 ff53 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Nrf_CE_Pin|Nrf_CSn_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	21c0      	movs	r1, #192	; 0xc0
 80018ce:	481a      	ldr	r0, [pc, #104]	; (8001938 <MX_GPIO_Init+0x144>)
 80018d0:	f002 ff4e 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_GPIO_Init+0x144>)
 80018ea:	f002 fd91 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80018ee:	f244 0301 	movw	r3, #16385	; 0x4001
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <MX_GPIO_Init+0x140>)
 8001908:	f002 fd82 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : Nrf_CE_Pin Nrf_CSn_Pin */
  GPIO_InitStruct.Pin = Nrf_CE_Pin|Nrf_CSn_Pin;
 800190c:	23c0      	movs	r3, #192	; 0xc0
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_GPIO_Init+0x144>)
 8001924:	f002 fd74 	bl	8004410 <HAL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400
 8001934:	58020400 	.word	0x58020400
 8001938:	58020800 	.word	0x58020800

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <NRF24_DelayMicroSeconds+0x3c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <NRF24_DelayMicroSeconds+0x40>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9a      	lsrs	r2, r3, #18
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001968:	bf00      	nop
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	60fa      	str	r2, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1fa      	bne.n	800196a <NRF24_DelayMicroSeconds+0x22>
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	24000000 	.word	0x24000000
 8001988:	165e9f81 	.word	0x165e9f81

0800198c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <NRF24_csn+0x20>
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <NRF24_csn+0x38>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <NRF24_csn+0x3c>)
 80019a0:	8811      	ldrh	r1, [r2, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fee3 	bl	8004770 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80019aa:	e007      	b.n	80019bc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <NRF24_csn+0x38>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <NRF24_csn+0x3c>)
 80019b2:	8811      	ldrh	r1, [r2, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 feda 	bl	8004770 <HAL_GPIO_WritePin>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2400055c 	.word	0x2400055c
 80019c8:	24000560 	.word	0x24000560

080019cc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d008      	beq.n	80019ec <NRF24_ce+0x20>
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <NRF24_ce+0x38>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <NRF24_ce+0x3c>)
 80019e0:	8811      	ldrh	r1, [r2, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fec3 	bl	8004770 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80019ea:	e007      	b.n	80019fc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <NRF24_ce+0x38>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <NRF24_ce+0x3c>)
 80019f2:	8811      	ldrh	r1, [r2, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 feba 	bl	8004770 <HAL_GPIO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2400055c 	.word	0x2400055c
 8001a08:	24000562 	.word	0x24000562

08001a0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff ffb8 	bl	800198c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 1000);
 8001a26:	f107 010c 	add.w	r1, r7, #12
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	2201      	movs	r2, #1
 8001a30:	480a      	ldr	r0, [pc, #40]	; (8001a5c <NRF24_read_register+0x50>)
 8001a32:	f005 fca9 	bl	8007388 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 1000);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	2201      	movs	r2, #1
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <NRF24_read_register+0x50>)
 8001a44:	f005 fe92 	bl	800776c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ff9d 	bl	800198c <NRF24_csn>
	return retData;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24000564 	.word	0x24000564

08001a60 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff8b 	bl	800198c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 1000);
 8001a80:	f107 010c 	add.w	r1, r7, #12
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <NRF24_read_registerN+0x50>)
 8001a8c:	f005 fc7c 	bl	8007388 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 1000);
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <NRF24_read_registerN+0x50>)
 8001a9c:	f005 fe66 	bl	800776c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff ff73 	bl	800198c <NRF24_csn>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	24000564 	.word	0x24000564

08001ab4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff ff61 	bl	800198c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 1000);
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <NRF24_write_register+0x44>)
 8001ae4:	f005 fc50 	bl	8007388 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff ff4f 	bl	800198c <NRF24_csn>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	24000564 	.word	0x24000564

08001afc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff3d 	bl	800198c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 1000);
 8001b1c:	f107 010c 	add.w	r1, r7, #12
 8001b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b24:	2201      	movs	r2, #1
 8001b26:	4809      	ldr	r0, [pc, #36]	; (8001b4c <NRF24_write_registerN+0x50>)
 8001b28:	f005 fc2e 	bl	8007388 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 1000);
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <NRF24_write_registerN+0x50>)
 8001b38:	f005 fc26 	bl	8007388 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ff25 	bl	800198c <NRF24_csn>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24000564 	.word	0x24000564

08001b50 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001b5c:	f000 fa0a 	bl	8001f74 <NRF24_getPayloadSize>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d303      	bcc.n	8001b72 <NRF24_read_payload+0x22>
 8001b6a:	f000 fa03 	bl	8001f74 <NRF24_getPayloadSize>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e000      	b.n	8001b74 <NRF24_read_payload+0x24>
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff ff08 	bl	800198c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001b7c:	2361      	movs	r3, #97	; 0x61
 8001b7e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 1000);
 8001b80:	f107 010e 	add.w	r1, r7, #14
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <NRF24_read_payload+0x60>)
 8001b8c:	f005 fbfc 	bl	8007388 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 1000);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <NRF24_read_payload+0x60>)
 8001b9c:	f005 fde6 	bl	800776c <HAL_SPI_Receive>
	NRF24_csn(1);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff fef3 	bl	800198c <NRF24_csn>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	24000564 	.word	0x24000564

08001bb4 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001bb8:	21ff      	movs	r1, #255	; 0xff
 8001bba:	20e1      	movs	r0, #225	; 0xe1
 8001bbc:	f7ff ff7a 	bl	8001ab4 <NRF24_write_register>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001bc8:	21ff      	movs	r1, #255	; 0xff
 8001bca:	20e2      	movs	r0, #226	; 0xe2
 8001bcc:	f7ff ff72 	bl	8001ab4 <NRF24_write_register>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001bda:	2007      	movs	r0, #7
 8001bdc:	f7ff ff16 	bl	8001a0c <NRF24_read_register>
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001c04:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <NRF24_begin+0x1ac>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2288      	movs	r2, #136	; 0x88
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f008 f9fa 	bl	800a008 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001c14:	4a62      	ldr	r2, [pc, #392]	; (8001da0 <NRF24_begin+0x1b0>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001c1a:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <NRF24_begin+0x1b4>)
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001c20:	4a61      	ldr	r2, [pc, #388]	; (8001da8 <NRF24_begin+0x1b8>)
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff feb0 	bl	800198c <NRF24_csn>
	NRF24_ce(0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fecd 	bl	80019cc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f001 fbe4 	bl	8003400 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001c38:	2108      	movs	r1, #8
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff ff3a 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001c40:	213f      	movs	r1, #63	; 0x3f
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff ff36 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001c48:	2103      	movs	r1, #3
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7ff ff32 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001c50:	2103      	movs	r1, #3
 8001c52:	2003      	movs	r0, #3
 8001c54:	f7ff ff2e 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001c58:	2103      	movs	r1, #3
 8001c5a:	2004      	movs	r0, #4
 8001c5c:	f7ff ff2a 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001c60:	2102      	movs	r1, #2
 8001c62:	2005      	movs	r0, #5
 8001c64:	f7ff ff26 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001c68:	210f      	movs	r1, #15
 8001c6a:	2006      	movs	r0, #6
 8001c6c:	f7ff ff22 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001c70:	210e      	movs	r1, #14
 8001c72:	2007      	movs	r0, #7
 8001c74:	f7ff ff1e 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2008      	movs	r0, #8
 8001c7c:	f7ff ff1a 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001c80:	2100      	movs	r1, #0
 8001c82:	2009      	movs	r0, #9
 8001c84:	f7ff ff16 	bl	8001ab4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001c88:	23e7      	movs	r3, #231	; 0xe7
 8001c8a:	733b      	strb	r3, [r7, #12]
 8001c8c:	23e7      	movs	r3, #231	; 0xe7
 8001c8e:	72fb      	strb	r3, [r7, #11]
 8001c90:	23e7      	movs	r3, #231	; 0xe7
 8001c92:	72bb      	strb	r3, [r7, #10]
 8001c94:	23e7      	movs	r3, #231	; 0xe7
 8001c96:	727b      	strb	r3, [r7, #9]
 8001c98:	23e7      	movs	r3, #231	; 0xe7
 8001c9a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f7ff ff29 	bl	8001afc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001caa:	23c2      	movs	r3, #194	; 0xc2
 8001cac:	733b      	strb	r3, [r7, #12]
 8001cae:	23c2      	movs	r3, #194	; 0xc2
 8001cb0:	72fb      	strb	r3, [r7, #11]
 8001cb2:	23c2      	movs	r3, #194	; 0xc2
 8001cb4:	72bb      	strb	r3, [r7, #10]
 8001cb6:	23c2      	movs	r3, #194	; 0xc2
 8001cb8:	727b      	strb	r3, [r7, #9]
 8001cba:	23c2      	movs	r3, #194	; 0xc2
 8001cbc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	200b      	movs	r0, #11
 8001cc8:	f7ff ff18 	bl	8001afc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001ccc:	21c3      	movs	r1, #195	; 0xc3
 8001cce:	200c      	movs	r0, #12
 8001cd0:	f7ff fef0 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001cd4:	21c4      	movs	r1, #196	; 0xc4
 8001cd6:	200d      	movs	r0, #13
 8001cd8:	f7ff feec 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001cdc:	21c5      	movs	r1, #197	; 0xc5
 8001cde:	200e      	movs	r0, #14
 8001ce0:	f7ff fee8 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001ce4:	21c6      	movs	r1, #198	; 0xc6
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f7ff fee4 	bl	8001ab4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001cec:	23e7      	movs	r3, #231	; 0xe7
 8001cee:	733b      	strb	r3, [r7, #12]
 8001cf0:	23e7      	movs	r3, #231	; 0xe7
 8001cf2:	72fb      	strb	r3, [r7, #11]
 8001cf4:	23e7      	movs	r3, #231	; 0xe7
 8001cf6:	72bb      	strb	r3, [r7, #10]
 8001cf8:	23e7      	movs	r3, #231	; 0xe7
 8001cfa:	727b      	strb	r3, [r7, #9]
 8001cfc:	23e7      	movs	r3, #231	; 0xe7
 8001cfe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	2205      	movs	r2, #5
 8001d06:	4619      	mov	r1, r3
 8001d08:	2010      	movs	r0, #16
 8001d0a:	f7ff fef7 	bl	8001afc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2011      	movs	r0, #17
 8001d12:	f7ff fecf 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001d16:	2100      	movs	r1, #0
 8001d18:	2012      	movs	r0, #18
 8001d1a:	f7ff fecb 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2013      	movs	r0, #19
 8001d22:	f7ff fec7 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	2014      	movs	r0, #20
 8001d2a:	f7ff fec3 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2015      	movs	r0, #21
 8001d32:	f7ff febf 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001d36:	2100      	movs	r1, #0
 8001d38:	2016      	movs	r0, #22
 8001d3a:	f7ff febb 	bl	8001ab4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001d3e:	f000 fad3 	bl	80022e8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	201c      	movs	r0, #28
 8001d46:	f7ff feb5 	bl	8001ab4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	201d      	movs	r0, #29
 8001d4e:	f7ff feb1 	bl	8001ab4 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001d52:	210f      	movs	r1, #15
 8001d54:	200f      	movs	r0, #15
 8001d56:	f000 f8c5 	bl	8001ee4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f000 f9ab 	bl	80020b6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 f9e1 	bl	8002128 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001d66:	2002      	movs	r0, #2
 8001d68:	f000 fa24 	bl	80021b4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001d6c:	f000 f976 	bl	800205c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f000 f8e7 	bl	8001f44 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8001d76:	f000 faae 	bl	80022d6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001d7a:	204c      	movs	r0, #76	; 0x4c
 8001d7c:	f000 f8cd 	bl	8001f1a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001d80:	f7ff ff18 	bl	8001bb4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001d84:	f7ff ff1e 	bl	8001bc4 <NRF24_flush_rx>

	NRF24_powerDown();
 8001d88:	f000 fa3c 	bl	8002204 <NRF24_powerDown>

}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d96:	b002      	add	sp, #8
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	24000564 	.word	0x24000564
 8001da0:	2400055c 	.word	0x2400055c
 8001da4:	24000560 	.word	0x24000560
 8001da8:	24000562 	.word	0x24000562

08001dac <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fe2b 	bl	8001a0c <NRF24_read_register>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f043 0303 	orr.w	r3, r3, #3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fe77 	bl	8001ab4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <NRF24_startListening+0x48>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	d004      	beq.n	8001dda <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <NRF24_startListening+0x48>)
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f7ff fe91 	bl	8001afc <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8001dda:	f7ff feeb 	bl	8001bb4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001dde:	f7ff fef1 	bl	8001bc4 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff fdf2 	bl	80019cc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001de8:	2096      	movs	r0, #150	; 0x96
 8001dea:	f7ff fdad 	bl	8001948 <NRF24_DelayMicroSeconds>
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	24000550 	.word	0x24000550

08001df8 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f000 fa10 	bl	8002222 <NRF24_availablePipe>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe99 	bl	8001b50 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001e1e:	2017      	movs	r0, #23
 8001e20:	f7ff fdf4 	bl	8001a0c <NRF24_read_register>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001e2c:	f7ff feca 	bl	8001bc4 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001e30:	f000 f8ac 	bl	8001f8c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4601      	mov	r1, r0
 8001e50:	e9c7 2300 	strd	r2, r3, [r7]
 8001e54:	460b      	mov	r3, r1
 8001e56:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e62:	491c      	ldr	r1, [pc, #112]	; (8001ed4 <NRF24_openReadingPipe+0x8c>)
 8001e64:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d82d      	bhi.n	8001eca <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d808      	bhi.n	8001e86 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <NRF24_openReadingPipe+0x90>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	4639      	mov	r1, r7
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe3c 	bl	8001afc <NRF24_write_registerN>
 8001e84:	e007      	b.n	8001e96 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <NRF24_openReadingPipe+0x90>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	4639      	mov	r1, r7
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe33 	bl	8001afc <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4a10      	ldr	r2, [pc, #64]	; (8001edc <NRF24_openReadingPipe+0x94>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <NRF24_openReadingPipe+0x98>)
 8001e9e:	7812      	ldrb	r2, [r2, #0]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fe06 	bl	8001ab4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f7ff fdaf 	bl	8001a0c <NRF24_read_register>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7ff fdf5 	bl	8001ab4 <NRF24_write_register>
	}

}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24000550 	.word	0x24000550
 8001ed8:	0800f330 	.word	0x0800f330
 8001edc:	0800f338 	.word	0x0800f338
 8001ee0:	24000558 	.word	0x24000558

08001ee4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	460a      	mov	r2, r1
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2004      	movs	r0, #4
 8001f0e:	f7ff fdd1 	bl	8001ab4 <NRF24_write_register>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001f24:	237f      	movs	r3, #127	; 0x7f
 8001f26:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf28      	it	cs
 8001f30:	4613      	movcs	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	2005      	movs	r0, #5
 8001f38:	f7ff fdbc 	bl	8001ab4 <NRF24_write_register>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	bf28      	it	cs
 8001f5a:	4613      	movcs	r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <NRF24_setPayloadSize+0x2c>)
 8001f60:	701a      	strb	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	24000558 	.word	0x24000558

08001f74 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	return payload_size;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <NRF24_getPayloadSize+0x14>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	24000558 	.word	0x24000558

08001f8c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001f90:	2060      	movs	r0, #96	; 0x60
 8001f92:	f7ff fd3b 	bl	8001a0c <NRF24_read_register>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f7ff fd33 	bl	8001a0c <NRF24_read_register>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f043 0306 	orr.w	r3, r3, #6
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	201d      	movs	r0, #29
 8001fb2:	f7ff fd7f 	bl	8001ab4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001fb6:	201d      	movs	r0, #29
 8001fb8:	f7ff fd28 	bl	8001a0c <NRF24_read_register>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001fc2:	f000 f991 	bl	80022e8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001fc6:	201d      	movs	r0, #29
 8001fc8:	f7ff fd20 	bl	8001a0c <NRF24_read_register>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f043 0306 	orr.w	r3, r3, #6
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	201d      	movs	r0, #29
 8001fd8:	f7ff fd6c 	bl	8001ab4 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001fdc:	201c      	movs	r0, #28
 8001fde:	f7ff fd15 	bl	8001a0c <NRF24_read_register>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f043 0303 	orr.w	r3, r3, #3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	201c      	movs	r0, #28
 8001fee:	f7ff fd61 	bl	8001ab4 <NRF24_write_register>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001ffc:	201d      	movs	r0, #29
 8001ffe:	f7ff fd05 	bl	8001a0c <NRF24_read_register>
 8002002:	4603      	mov	r3, r0
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	201d      	movs	r0, #29
 800200e:	f7ff fd51 	bl	8001ab4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002012:	201d      	movs	r0, #29
 8002014:	f7ff fcfa 	bl	8001a0c <NRF24_read_register>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800201e:	f000 f963 	bl	80022e8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8002022:	201d      	movs	r0, #29
 8002024:	f7ff fcf2 	bl	8001a0c <NRF24_read_register>
 8002028:	4603      	mov	r3, r0
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	201d      	movs	r0, #29
 8002034:	f7ff fd3e 	bl	8001ab4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002038:	201c      	movs	r0, #28
 800203a:	f7ff fce7 	bl	8001a0c <NRF24_read_register>
 800203e:	4603      	mov	r3, r0
 8002040:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	201c      	movs	r0, #28
 800204a:	f7ff fd33 	bl	8001ab4 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800204e:	4b02      	ldr	r3, [pc, #8]	; (8002058 <NRF24_enableDynamicPayloads+0x60>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	24000559 	.word	0x24000559

0800205c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002060:	201d      	movs	r0, #29
 8002062:	f7ff fcd3 	bl	8001a0c <NRF24_read_register>
 8002066:	4603      	mov	r3, r0
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	201d      	movs	r0, #29
 8002072:	f7ff fd1f 	bl	8001ab4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002076:	2100      	movs	r1, #0
 8002078:	201c      	movs	r0, #28
 800207a:	f7ff fd1b 	bl	8001ab4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800207e:	4b02      	ldr	r3, [pc, #8]	; (8002088 <NRF24_disableDynamicPayloads+0x2c>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	24000559 	.word	0x24000559

0800208c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800209c:	213f      	movs	r1, #63	; 0x3f
 800209e:	2001      	movs	r0, #1
 80020a0:	f7ff fd08 	bl	8001ab4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80020a4:	e003      	b.n	80020ae <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80020a6:	2100      	movs	r1, #0
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7ff fd03 	bl	8001ab4 <NRF24_write_register>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80020c0:	2006      	movs	r0, #6
 80020c2:	f7ff fca3 	bl	8001a0c <NRF24_read_register>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	f023 0306 	bic.w	r3, r3, #6
 80020d0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d104      	bne.n	80020e2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	f043 0306 	orr.w	r3, r3, #6
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e019      	b.n	8002116 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d104      	bne.n	80020f2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e011      	b.n	8002116 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d104      	bne.n	8002102 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e009      	b.n	8002116 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d103      	bne.n	8002116 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	f043 0306 	orr.w	r3, r3, #6
 8002114:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4619      	mov	r1, r3
 800211a:	2006      	movs	r0, #6
 800211c:	f7ff fcca 	bl	8001ab4 <NRF24_write_register>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002136:	2006      	movs	r0, #6
 8002138:	f7ff fc68 	bl	8001a0c <NRF24_read_register>
 800213c:	4603      	mov	r3, r0
 800213e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <NRF24_setDataRate+0x88>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800214c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d107      	bne.n	8002164 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <NRF24_setDataRate+0x88>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	73bb      	strb	r3, [r7, #14]
 8002162:	e00d      	b.n	8002180 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <NRF24_setDataRate+0x88>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	73bb      	strb	r3, [r7, #14]
 8002178:	e002      	b.n	8002180 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <NRF24_setDataRate+0x88>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	4619      	mov	r1, r3
 8002184:	2006      	movs	r0, #6
 8002186:	f7ff fc95 	bl	8001ab4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800218a:	2006      	movs	r0, #6
 800218c:	f7ff fc3e 	bl	8001a0c <NRF24_read_register>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	4293      	cmp	r3, r2
 8002198:	d102      	bne.n	80021a0 <NRF24_setDataRate+0x78>
  {
    result = true;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e002      	b.n	80021a6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <NRF24_setDataRate+0x88>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2400055a 	.word	0x2400055a

080021b4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fc24 	bl	8001a0c <NRF24_read_register>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f023 030c 	bic.w	r3, r3, #12
 80021ca:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00f      	beq.n	80021f2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d104      	bne.n	80021e2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e007      	b.n	80021f2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	4619      	mov	r1, r3
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fc5c 	bl	8001ab4 <NRF24_write_register>
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fbff 	bl	8001a0c <NRF24_read_register>
 800220e:	4603      	mov	r3, r0
 8002210:	f023 0302 	bic.w	r3, r3, #2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4619      	mov	r1, r3
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fc4b 	bl	8001ab4 <NRF24_write_register>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}

08002222 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800222a:	f7ff fcd3 	bl	8001bd4 <NRF24_get_status>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	2007      	movs	r0, #7
 8002262:	f7ff fc27 	bl	8001ab4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002270:	2120      	movs	r1, #32
 8002272:	2007      	movs	r0, #7
 8002274:	f7ff fc1e 	bl	8001ab4 <NRF24_write_register>
    }
  }
  return result;
 8002278:	7bbb      	ldrb	r3, [r7, #14]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	6039      	str	r1, [r7, #0]
 800228c:	71fb      	strb	r3, [r7, #7]
 800228e:	4613      	mov	r3, r2
 8002290:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8002296:	2320      	movs	r3, #32
 8002298:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800229a:	7afa      	ldrb	r2, [r7, #11]
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	4293      	cmp	r3, r2
 80022a0:	bf28      	it	cs
 80022a2:	4613      	movcs	r3, r2
 80022a4:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(0);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff fb70 	bl	800198c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	f063 0357 	orn	r3, r3, #87	; 0x57
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	7aba      	ldrb	r2, [r7, #10]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fc1a 	bl	8001afc <NRF24_write_registerN>
  NRF24_csn(1);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff fb5f 	bl	800198c <NRF24_csn>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80022da:	2170      	movs	r1, #112	; 0x70
 80022dc:	2007      	movs	r0, #7
 80022de:	f7ff fbe9 	bl	8001ab4 <NRF24_write_register>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff fb4c 	bl	800198c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80022f4:	2350      	movs	r3, #80	; 0x50
 80022f6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80022f8:	2373      	movs	r3, #115	; 0x73
 80022fa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 1000);
 80022fc:	1d39      	adds	r1, r7, #4
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	2202      	movs	r2, #2
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <NRF24_ACTIVATE_cmd+0x30>)
 8002306:	f005 f83f 	bl	8007388 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fb3e 	bl	800198c <NRF24_csn>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	24000564 	.word	0x24000564

0800231c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	b0a1      	sub	sp, #132	; 0x84
 8002320:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	49c3      	ldr	r1, [pc, #780]	; (8002634 <printRadioSettings+0x318>)
 8002328:	4618      	mov	r0, r3
 800232a:	f008 fd95 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4618      	mov	r0, r3
 8002334:	f7fd ffd4 	bl	80002e0 <strlen>
 8002338:	4603      	mov	r3, r0
 800233a:	b29a      	uxth	r2, r3
 800233c:	f107 0108 	add.w	r1, r7, #8
 8002340:	230a      	movs	r3, #10
 8002342:	48bd      	ldr	r0, [pc, #756]	; (8002638 <printRadioSettings+0x31c>)
 8002344:	f006 fd7f 	bl	8008e46 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff fb5f 	bl	8001a0c <NRF24_read_register>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8002354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8002360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <printRadioSettings+0x5e>
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	49b2      	ldr	r1, [pc, #712]	; (800263c <printRadioSettings+0x320>)
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fd70 	bl	800ae58 <siprintf>
 8002378:	e00c      	b.n	8002394 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	49b0      	ldr	r1, [pc, #704]	; (8002640 <printRadioSettings+0x324>)
 8002380:	4618      	mov	r0, r3
 8002382:	f008 fd69 	bl	800ae58 <siprintf>
 8002386:	e005      	b.n	8002394 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	49ad      	ldr	r1, [pc, #692]	; (8002644 <printRadioSettings+0x328>)
 800238e:	4618      	mov	r0, r3
 8002390:	f008 fd62 	bl	800ae58 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	4618      	mov	r0, r3
 800239a:	f7fd ffa1 	bl	80002e0 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f107 0108 	add.w	r1, r7, #8
 80023a6:	230a      	movs	r3, #10
 80023a8:	48a3      	ldr	r0, [pc, #652]	; (8002638 <printRadioSettings+0x31c>)
 80023aa:	f006 fd4c 	bl	8008e46 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff fb2c 	bl	8001a0c <NRF24_read_register>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023be:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bfcc      	ite	gt
 80023c6:	2301      	movgt	r3, #1
 80023c8:	2300      	movle	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023d2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bfcc      	ite	gt
 80023da:	2301      	movgt	r3, #1
 80023dc:	2300      	movle	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023e6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bfcc      	ite	gt
 80023ee:	2301      	movgt	r3, #1
 80023f0:	2300      	movle	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023fa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bfcc      	ite	gt
 8002402:	2301      	movgt	r3, #1
 8002404:	2300      	movle	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800240a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800240e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002412:	2b00      	cmp	r3, #0
 8002414:	bfcc      	ite	gt
 8002416:	2301      	movgt	r3, #1
 8002418:	2300      	movle	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800241e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002422:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002426:	2b00      	cmp	r3, #0
 8002428:	bfcc      	ite	gt
 800242a:	2301      	movgt	r3, #1
 800242c:	2300      	movle	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f107 0008 	add.w	r0, r7, #8
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	9402      	str	r4, [sp, #8]
 8002438:	9101      	str	r1, [sp, #4]
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	4633      	mov	r3, r6
 800243e:	462a      	mov	r2, r5
 8002440:	4981      	ldr	r1, [pc, #516]	; (8002648 <printRadioSettings+0x32c>)
 8002442:	f008 fd09 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd ff48 	bl	80002e0 <strlen>
 8002450:	4603      	mov	r3, r0
 8002452:	b29a      	uxth	r2, r3
 8002454:	f107 0108 	add.w	r1, r7, #8
 8002458:	230a      	movs	r3, #10
 800245a:	4877      	ldr	r0, [pc, #476]	; (8002638 <printRadioSettings+0x31c>)
 800245c:	f006 fcf3 	bl	8008e46 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002460:	2002      	movs	r0, #2
 8002462:	f7ff fad3 	bl	8001a0c <NRF24_read_register>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800246c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002470:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002474:	2b00      	cmp	r3, #0
 8002476:	bfcc      	ite	gt
 8002478:	2301      	movgt	r3, #1
 800247a:	2300      	movle	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002484:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002488:	2b00      	cmp	r3, #0
 800248a:	bfcc      	ite	gt
 800248c:	2301      	movgt	r3, #1
 800248e:	2300      	movle	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002494:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002498:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800249c:	2b00      	cmp	r3, #0
 800249e:	bfcc      	ite	gt
 80024a0:	2301      	movgt	r3, #1
 80024a2:	2300      	movle	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80024a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bfcc      	ite	gt
 80024b4:	2301      	movgt	r3, #1
 80024b6:	2300      	movle	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80024bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bfcc      	ite	gt
 80024c8:	2301      	movgt	r3, #1
 80024ca:	2300      	movle	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80024d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bfcc      	ite	gt
 80024dc:	2301      	movgt	r3, #1
 80024de:	2300      	movle	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f107 0008 	add.w	r0, r7, #8
 80024e6:	9303      	str	r3, [sp, #12]
 80024e8:	9402      	str	r4, [sp, #8]
 80024ea:	9101      	str	r1, [sp, #4]
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	4633      	mov	r3, r6
 80024f0:	462a      	mov	r2, r5
 80024f2:	4956      	ldr	r1, [pc, #344]	; (800264c <printRadioSettings+0x330>)
 80024f4:	f008 fcb0 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd feef 	bl	80002e0 <strlen>
 8002502:	4603      	mov	r3, r0
 8002504:	b29a      	uxth	r2, r3
 8002506:	f107 0108 	add.w	r1, r7, #8
 800250a:	230a      	movs	r3, #10
 800250c:	484a      	ldr	r0, [pc, #296]	; (8002638 <printRadioSettings+0x31c>)
 800250e:	f006 fc9a 	bl	8008e46 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002512:	2003      	movs	r0, #3
 8002514:	f7ff fa7a 	bl	8001a0c <NRF24_read_register>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8002522:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002526:	3302      	adds	r3, #2
 8002528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800252c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	4946      	ldr	r1, [pc, #280]	; (8002650 <printRadioSettings+0x334>)
 8002536:	4618      	mov	r0, r3
 8002538:	f008 fc8e 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd fecd 	bl	80002e0 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	f107 0108 	add.w	r1, r7, #8
 800254e:	230a      	movs	r3, #10
 8002550:	4839      	ldr	r0, [pc, #228]	; (8002638 <printRadioSettings+0x31c>)
 8002552:	f006 fc78 	bl	8008e46 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002556:	2005      	movs	r0, #5
 8002558:	f7ff fa58 	bl	8001a0c <NRF24_read_register>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002562:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4939      	ldr	r1, [pc, #228]	; (8002654 <printRadioSettings+0x338>)
 8002570:	4618      	mov	r0, r3
 8002572:	f008 fc71 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd feb0 	bl	80002e0 <strlen>
 8002580:	4603      	mov	r3, r0
 8002582:	b29a      	uxth	r2, r3
 8002584:	f107 0108 	add.w	r1, r7, #8
 8002588:	230a      	movs	r3, #10
 800258a:	482b      	ldr	r0, [pc, #172]	; (8002638 <printRadioSettings+0x31c>)
 800258c:	f006 fc5b 	bl	8008e46 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002590:	2006      	movs	r0, #6
 8002592:	f7ff fa3b 	bl	8001a0c <NRF24_read_register>
 8002596:	4603      	mov	r3, r0
 8002598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800259c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <printRadioSettings+0x29a>
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	492a      	ldr	r1, [pc, #168]	; (8002658 <printRadioSettings+0x33c>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f008 fc52 	bl	800ae58 <siprintf>
 80025b4:	e005      	b.n	80025c2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	4928      	ldr	r1, [pc, #160]	; (800265c <printRadioSettings+0x340>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f008 fc4b 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fe8a 	bl	80002e0 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f107 0108 	add.w	r1, r7, #8
 80025d4:	230a      	movs	r3, #10
 80025d6:	4818      	ldr	r0, [pc, #96]	; (8002638 <printRadioSettings+0x31c>)
 80025d8:	f006 fc35 	bl	8008e46 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80025dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025e0:	f003 0306 	and.w	r3, r3, #6
 80025e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80025e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80025f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <printRadioSettings+0x2ec>
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	4918      	ldr	r1, [pc, #96]	; (8002660 <printRadioSettings+0x344>)
 8002600:	4618      	mov	r0, r3
 8002602:	f008 fc29 	bl	800ae58 <siprintf>
 8002606:	e03b      	b.n	8002680 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002608:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <printRadioSettings+0x302>
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4913      	ldr	r1, [pc, #76]	; (8002664 <printRadioSettings+0x348>)
 8002616:	4618      	mov	r0, r3
 8002618:	f008 fc1e 	bl	800ae58 <siprintf>
 800261c:	e030      	b.n	8002680 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800261e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002622:	2b02      	cmp	r3, #2
 8002624:	d122      	bne.n	800266c <printRadioSettings+0x350>
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	490f      	ldr	r1, [pc, #60]	; (8002668 <printRadioSettings+0x34c>)
 800262c:	4618      	mov	r0, r3
 800262e:	f008 fc13 	bl	800ae58 <siprintf>
 8002632:	e025      	b.n	8002680 <printRadioSettings+0x364>
 8002634:	0800ed90 	.word	0x0800ed90
 8002638:	240005ec 	.word	0x240005ec
 800263c:	0800edc4 	.word	0x0800edc4
 8002640:	0800ede0 	.word	0x0800ede0
 8002644:	0800edfc 	.word	0x0800edfc
 8002648:	0800ee10 	.word	0x0800ee10
 800264c:	0800ee54 	.word	0x0800ee54
 8002650:	0800eea0 	.word	0x0800eea0
 8002654:	0800eebc 	.word	0x0800eebc
 8002658:	0800eed0 	.word	0x0800eed0
 800265c:	0800eee8 	.word	0x0800eee8
 8002660:	0800ef00 	.word	0x0800ef00
 8002664:	0800ef14 	.word	0x0800ef14
 8002668:	0800ef28 	.word	0x0800ef28
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800266c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002670:	2b03      	cmp	r3, #3
 8002672:	d105      	bne.n	8002680 <printRadioSettings+0x364>
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	49d7      	ldr	r1, [pc, #860]	; (80029d8 <printRadioSettings+0x6bc>)
 800267a:	4618      	mov	r0, r3
 800267c:	f008 fbec 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fe2b 	bl	80002e0 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	b29a      	uxth	r2, r3
 800268e:	f107 0108 	add.w	r1, r7, #8
 8002692:	230a      	movs	r3, #10
 8002694:	48d1      	ldr	r0, [pc, #836]	; (80029dc <printRadioSettings+0x6c0>)
 8002696:	f006 fbd6 	bl	8008e46 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800269a:	463b      	mov	r3, r7
 800269c:	2205      	movs	r2, #5
 800269e:	4619      	mov	r1, r3
 80026a0:	200a      	movs	r0, #10
 80026a2:	f7ff f9dd 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80026a6:	793b      	ldrb	r3, [r7, #4]
 80026a8:	461c      	mov	r4, r3
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	461d      	mov	r5, r3
 80026ae:	78bb      	ldrb	r3, [r7, #2]
 80026b0:	787a      	ldrb	r2, [r7, #1]
 80026b2:	7839      	ldrb	r1, [r7, #0]
 80026b4:	f107 0008 	add.w	r0, r7, #8
 80026b8:	9102      	str	r1, [sp, #8]
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	462b      	mov	r3, r5
 80026c0:	4622      	mov	r2, r4
 80026c2:	49c7      	ldr	r1, [pc, #796]	; (80029e0 <printRadioSettings+0x6c4>)
 80026c4:	f008 fbc8 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fe07 	bl	80002e0 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f107 0108 	add.w	r1, r7, #8
 80026da:	230a      	movs	r3, #10
 80026dc:	48bf      	ldr	r0, [pc, #764]	; (80029dc <printRadioSettings+0x6c0>)
 80026de:	f006 fbb2 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80026e2:	463b      	mov	r3, r7
 80026e4:	2205      	movs	r2, #5
 80026e6:	4619      	mov	r1, r3
 80026e8:	200b      	movs	r0, #11
 80026ea:	f7ff f9b9 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80026ee:	793b      	ldrb	r3, [r7, #4]
 80026f0:	461c      	mov	r4, r3
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	461d      	mov	r5, r3
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	787a      	ldrb	r2, [r7, #1]
 80026fa:	7839      	ldrb	r1, [r7, #0]
 80026fc:	f107 0008 	add.w	r0, r7, #8
 8002700:	9102      	str	r1, [sp, #8]
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	462b      	mov	r3, r5
 8002708:	4622      	mov	r2, r4
 800270a:	49b6      	ldr	r1, [pc, #728]	; (80029e4 <printRadioSettings+0x6c8>)
 800270c:	f008 fba4 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fde3 	bl	80002e0 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	b29a      	uxth	r2, r3
 800271e:	f107 0108 	add.w	r1, r7, #8
 8002722:	230a      	movs	r3, #10
 8002724:	48ad      	ldr	r0, [pc, #692]	; (80029dc <printRadioSettings+0x6c0>)
 8002726:	f006 fb8e 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800272a:	463b      	mov	r3, r7
 800272c:	2201      	movs	r2, #1
 800272e:	4619      	mov	r1, r3
 8002730:	200c      	movs	r0, #12
 8002732:	f7ff f995 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002736:	783b      	ldrb	r3, [r7, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	49aa      	ldr	r1, [pc, #680]	; (80029e8 <printRadioSettings+0x6cc>)
 8002740:	4618      	mov	r0, r3
 8002742:	f008 fb89 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fdc8 	bl	80002e0 <strlen>
 8002750:	4603      	mov	r3, r0
 8002752:	b29a      	uxth	r2, r3
 8002754:	f107 0108 	add.w	r1, r7, #8
 8002758:	230a      	movs	r3, #10
 800275a:	48a0      	ldr	r0, [pc, #640]	; (80029dc <printRadioSettings+0x6c0>)
 800275c:	f006 fb73 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002760:	463b      	mov	r3, r7
 8002762:	2201      	movs	r2, #1
 8002764:	4619      	mov	r1, r3
 8002766:	200d      	movs	r0, #13
 8002768:	f7ff f97a 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800276c:	783b      	ldrb	r3, [r7, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	499d      	ldr	r1, [pc, #628]	; (80029ec <printRadioSettings+0x6d0>)
 8002776:	4618      	mov	r0, r3
 8002778:	f008 fb6e 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fdad 	bl	80002e0 <strlen>
 8002786:	4603      	mov	r3, r0
 8002788:	b29a      	uxth	r2, r3
 800278a:	f107 0108 	add.w	r1, r7, #8
 800278e:	230a      	movs	r3, #10
 8002790:	4892      	ldr	r0, [pc, #584]	; (80029dc <printRadioSettings+0x6c0>)
 8002792:	f006 fb58 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002796:	463b      	mov	r3, r7
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	200e      	movs	r0, #14
 800279e:	f7ff f95f 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80027a2:	783b      	ldrb	r3, [r7, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4991      	ldr	r1, [pc, #580]	; (80029f0 <printRadioSettings+0x6d4>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f008 fb53 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fd92 	bl	80002e0 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f107 0108 	add.w	r1, r7, #8
 80027c4:	230a      	movs	r3, #10
 80027c6:	4885      	ldr	r0, [pc, #532]	; (80029dc <printRadioSettings+0x6c0>)
 80027c8:	f006 fb3d 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80027cc:	463b      	mov	r3, r7
 80027ce:	2201      	movs	r2, #1
 80027d0:	4619      	mov	r1, r3
 80027d2:	200f      	movs	r0, #15
 80027d4:	f7ff f944 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80027d8:	783b      	ldrb	r3, [r7, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	4984      	ldr	r1, [pc, #528]	; (80029f4 <printRadioSettings+0x6d8>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f008 fb38 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fd77 	bl	80002e0 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f107 0108 	add.w	r1, r7, #8
 80027fa:	230a      	movs	r3, #10
 80027fc:	4877      	ldr	r0, [pc, #476]	; (80029dc <printRadioSettings+0x6c0>)
 80027fe:	f006 fb22 	bl	8008e46 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002802:	463b      	mov	r3, r7
 8002804:	2205      	movs	r2, #5
 8002806:	4619      	mov	r1, r3
 8002808:	2010      	movs	r0, #16
 800280a:	f7ff f929 	bl	8001a60 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800280e:	793b      	ldrb	r3, [r7, #4]
 8002810:	461c      	mov	r4, r3
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	461d      	mov	r5, r3
 8002816:	78bb      	ldrb	r3, [r7, #2]
 8002818:	787a      	ldrb	r2, [r7, #1]
 800281a:	7839      	ldrb	r1, [r7, #0]
 800281c:	f107 0008 	add.w	r0, r7, #8
 8002820:	9102      	str	r1, [sp, #8]
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	462b      	mov	r3, r5
 8002828:	4622      	mov	r2, r4
 800282a:	4973      	ldr	r1, [pc, #460]	; (80029f8 <printRadioSettings+0x6dc>)
 800282c:	f008 fb14 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002830:	f107 0308 	add.w	r3, r7, #8
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fd53 	bl	80002e0 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	f107 0108 	add.w	r1, r7, #8
 8002842:	230a      	movs	r3, #10
 8002844:	4865      	ldr	r0, [pc, #404]	; (80029dc <printRadioSettings+0x6c0>)
 8002846:	f006 fafe 	bl	8008e46 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800284a:	2011      	movs	r0, #17
 800284c:	f7ff f8de 	bl	8001a0c <NRF24_read_register>
 8002850:	4603      	mov	r3, r0
 8002852:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002856:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800285a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	4966      	ldr	r1, [pc, #408]	; (80029fc <printRadioSettings+0x6e0>)
 8002864:	4618      	mov	r0, r3
 8002866:	f008 faf7 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fd36 	bl	80002e0 <strlen>
 8002874:	4603      	mov	r3, r0
 8002876:	b29a      	uxth	r2, r3
 8002878:	f107 0108 	add.w	r1, r7, #8
 800287c:	230a      	movs	r3, #10
 800287e:	4857      	ldr	r0, [pc, #348]	; (80029dc <printRadioSettings+0x6c0>)
 8002880:	f006 fae1 	bl	8008e46 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8002884:	2012      	movs	r0, #18
 8002886:	f7ff f8c1 	bl	8001a0c <NRF24_read_register>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002890:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	4958      	ldr	r1, [pc, #352]	; (8002a00 <printRadioSettings+0x6e4>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f008 fada 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fd19 	bl	80002e0 <strlen>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f107 0108 	add.w	r1, r7, #8
 80028b6:	230a      	movs	r3, #10
 80028b8:	4848      	ldr	r0, [pc, #288]	; (80029dc <printRadioSettings+0x6c0>)
 80028ba:	f006 fac4 	bl	8008e46 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80028be:	2013      	movs	r0, #19
 80028c0:	f7ff f8a4 	bl	8001a0c <NRF24_read_register>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80028ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	494b      	ldr	r1, [pc, #300]	; (8002a04 <printRadioSettings+0x6e8>)
 80028d8:	4618      	mov	r0, r3
 80028da:	f008 fabd 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fcfc 	bl	80002e0 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f107 0108 	add.w	r1, r7, #8
 80028f0:	230a      	movs	r3, #10
 80028f2:	483a      	ldr	r0, [pc, #232]	; (80029dc <printRadioSettings+0x6c0>)
 80028f4:	f006 faa7 	bl	8008e46 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80028f8:	2014      	movs	r0, #20
 80028fa:	f7ff f887 	bl	8001a0c <NRF24_read_register>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002904:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	493d      	ldr	r1, [pc, #244]	; (8002a08 <printRadioSettings+0x6ec>)
 8002912:	4618      	mov	r0, r3
 8002914:	f008 faa0 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fcdf 	bl	80002e0 <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	b29a      	uxth	r2, r3
 8002926:	f107 0108 	add.w	r1, r7, #8
 800292a:	230a      	movs	r3, #10
 800292c:	482b      	ldr	r0, [pc, #172]	; (80029dc <printRadioSettings+0x6c0>)
 800292e:	f006 fa8a 	bl	8008e46 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002932:	2015      	movs	r0, #21
 8002934:	f7ff f86a 	bl	8001a0c <NRF24_read_register>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800293e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4930      	ldr	r1, [pc, #192]	; (8002a0c <printRadioSettings+0x6f0>)
 800294c:	4618      	mov	r0, r3
 800294e:	f008 fa83 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fcc2 	bl	80002e0 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	b29a      	uxth	r2, r3
 8002960:	f107 0108 	add.w	r1, r7, #8
 8002964:	230a      	movs	r3, #10
 8002966:	481d      	ldr	r0, [pc, #116]	; (80029dc <printRadioSettings+0x6c0>)
 8002968:	f006 fa6d 	bl	8008e46 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800296c:	2016      	movs	r0, #22
 800296e:	f7ff f84d 	bl	8001a0c <NRF24_read_register>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002978:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800297c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	4922      	ldr	r1, [pc, #136]	; (8002a10 <printRadioSettings+0x6f4>)
 8002986:	4618      	mov	r0, r3
 8002988:	f008 fa66 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fca5 	bl	80002e0 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	b29a      	uxth	r2, r3
 800299a:	f107 0108 	add.w	r1, r7, #8
 800299e:	230a      	movs	r3, #10
 80029a0:	480e      	ldr	r0, [pc, #56]	; (80029dc <printRadioSettings+0x6c0>)
 80029a2:	f006 fa50 	bl	8008e46 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80029a6:	201c      	movs	r0, #28
 80029a8:	f7ff f830 	bl	8001a0c <NRF24_read_register>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80029b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfcc      	ite	gt
 80029be:	2301      	movgt	r3, #1
 80029c0:	2300      	movle	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80029c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bfcc      	ite	gt
 80029d2:	2301      	movgt	r3, #1
 80029d4:	2300      	movle	r3, #0
 80029d6:	e01d      	b.n	8002a14 <printRadioSettings+0x6f8>
 80029d8:	0800ef3c 	.word	0x0800ef3c
 80029dc:	240005ec 	.word	0x240005ec
 80029e0:	0800ef50 	.word	0x0800ef50
 80029e4:	0800ef80 	.word	0x0800ef80
 80029e8:	0800efb0 	.word	0x0800efb0
 80029ec:	0800efd8 	.word	0x0800efd8
 80029f0:	0800f000 	.word	0x0800f000
 80029f4:	0800f028 	.word	0x0800f028
 80029f8:	0800f050 	.word	0x0800f050
 80029fc:	0800f07c 	.word	0x0800f07c
 8002a00:	0800f098 	.word	0x0800f098
 8002a04:	0800f0b4 	.word	0x0800f0b4
 8002a08:	0800f0d0 	.word	0x0800f0d0
 8002a0c:	0800f0ec 	.word	0x0800f0ec
 8002a10:	0800f108 	.word	0x0800f108
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a1c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bfcc      	ite	gt
 8002a24:	2301      	movgt	r3, #1
 8002a26:	2300      	movle	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a30:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bfcc      	ite	gt
 8002a38:	2301      	movgt	r3, #1
 8002a3a:	2300      	movle	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a44:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bfcc      	ite	gt
 8002a4c:	2301      	movgt	r3, #1
 8002a4e:	2300      	movle	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a58:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bfcc      	ite	gt
 8002a60:	2301      	movgt	r3, #1
 8002a62:	2300      	movle	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f107 0008 	add.w	r0, r7, #8
 8002a6a:	9303      	str	r3, [sp, #12]
 8002a6c:	9402      	str	r4, [sp, #8]
 8002a6e:	9101      	str	r1, [sp, #4]
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	4633      	mov	r3, r6
 8002a74:	462a      	mov	r2, r5
 8002a76:	4936      	ldr	r1, [pc, #216]	; (8002b50 <printRadioSettings+0x834>)
 8002a78:	f008 f9ee 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fc2d 	bl	80002e0 <strlen>
 8002a86:	4603      	mov	r3, r0
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	f107 0108 	add.w	r1, r7, #8
 8002a8e:	230a      	movs	r3, #10
 8002a90:	4830      	ldr	r0, [pc, #192]	; (8002b54 <printRadioSettings+0x838>)
 8002a92:	f006 f9d8 	bl	8008e46 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002a96:	201d      	movs	r0, #29
 8002a98:	f7fe ffb8 	bl	8001a0c <NRF24_read_register>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002aa2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <printRadioSettings+0x7a0>
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4929      	ldr	r1, [pc, #164]	; (8002b58 <printRadioSettings+0x83c>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f008 f9cf 	bl	800ae58 <siprintf>
 8002aba:	e005      	b.n	8002ac8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002abc:	f107 0308 	add.w	r3, r7, #8
 8002ac0:	4926      	ldr	r1, [pc, #152]	; (8002b5c <printRadioSettings+0x840>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f008 f9c8 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fc07 	bl	80002e0 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	f107 0108 	add.w	r1, r7, #8
 8002ada:	230a      	movs	r3, #10
 8002adc:	481d      	ldr	r0, [pc, #116]	; (8002b54 <printRadioSettings+0x838>)
 8002ade:	f006 f9b2 	bl	8008e46 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <printRadioSettings+0x7e0>
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <printRadioSettings+0x844>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 f9af 	bl	800ae58 <siprintf>
 8002afa:	e005      	b.n	8002b08 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002afc:	f107 0308 	add.w	r3, r7, #8
 8002b00:	4918      	ldr	r1, [pc, #96]	; (8002b64 <printRadioSettings+0x848>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f008 f9a8 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b08:	f107 0308 	add.w	r3, r7, #8
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fbe7 	bl	80002e0 <strlen>
 8002b12:	4603      	mov	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f107 0108 	add.w	r1, r7, #8
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	480d      	ldr	r0, [pc, #52]	; (8002b54 <printRadioSettings+0x838>)
 8002b1e:	f006 f992 	bl	8008e46 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002b22:	f107 0308 	add.w	r3, r7, #8
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <printRadioSettings+0x84c>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f008 f995 	bl	800ae58 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fbd4 	bl	80002e0 <strlen>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	f107 0108 	add.w	r1, r7, #8
 8002b40:	230a      	movs	r3, #10
 8002b42:	4804      	ldr	r0, [pc, #16]	; (8002b54 <printRadioSettings+0x838>)
 8002b44:	f006 f97f 	bl	8008e46 <HAL_UART_Transmit>
}
 8002b48:	bf00      	nop
 8002b4a:	3774      	adds	r7, #116	; 0x74
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	0800f124 	.word	0x0800f124
 8002b54:	240005ec 	.word	0x240005ec
 8002b58:	0800f170 	.word	0x0800f170
 8002b5c:	0800f188 	.word	0x0800f188
 8002b60:	0800f1a0 	.word	0x0800f1a0
 8002b64:	0800f1bc 	.word	0x0800f1bc
 8002b68:	0800ed90 	.word	0x0800ed90

08002b6c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	f107 0c08 	add.w	ip, r7, #8
 8002b76:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <nrf24_DebugUART_Init+0x2c>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	2290      	movs	r2, #144	; 0x90
 8002b84:	4619      	mov	r1, r3
 8002b86:	f007 fa3f 	bl	800a008 <memcpy>
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b92:	b004      	add	sp, #16
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	240005ec 	.word	0x240005ec

08002b9c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002ba4:	1d39      	adds	r1, r7, #4
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	2201      	movs	r2, #1
 8002bac:	4803      	ldr	r0, [pc, #12]	; (8002bbc <__io_putchar+0x20>)
 8002bae:	f006 f94a 	bl	8008e46 <HAL_UART_Transmit>
  return ch;
 8002bb2:	687b      	ldr	r3, [r7, #4]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	24000430 	.word	0x24000430

08002bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_MspInit+0x30>)
 8002bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_MspInit+0x30>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_MspInit+0x30>)
 8002bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58024400 	.word	0x58024400

08002bf4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0b8      	sub	sp, #224	; 0xe0
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	22bc      	movs	r2, #188	; 0xbc
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f007 fa05 	bl	800a024 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_FDCAN_MspInit+0xe8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d157      	bne.n	8002cd4 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 ff39 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002c40:	f7fe fe7c 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c44:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c4a:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_FDCAN_MspInit+0xec>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002c98:	2309      	movs	r3, #9
 8002c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480f      	ldr	r0, [pc, #60]	; (8002ce4 <HAL_FDCAN_MspInit+0xf0>)
 8002ca6:	f001 fbb3 	bl	8004410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002cc2:	2309      	movs	r3, #9
 8002cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <HAL_FDCAN_MspInit+0xf0>)
 8002cd0:	f001 fb9e 	bl	8004410 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	37e0      	adds	r7, #224	; 0xe0
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	4000a000 	.word	0x4000a000
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58020c00 	.word	0x58020c00

08002ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0b8      	sub	sp, #224	; 0xe0
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	22bc      	movs	r2, #188	; 0xbc
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f007 f98b 	bl	800a024 <memset>
  if(hi2c->Instance==I2C4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <HAL_I2C_MspInit+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d154      	bne.n	8002dc2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002d18:	2310      	movs	r3, #16
 8002d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 8002d20:	2378      	movs	r3, #120	; 0x78
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002d24:	2302      	movs	r3, #2
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 8002d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 feae 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 8002d56:	f7fe fdf1 	bl	800193c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002d62:	f043 0320 	orr.w	r3, r3, #32
 8002d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8002d78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d80:	2312      	movs	r3, #18
 8002d82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d92:	2304      	movs	r3, #4
 8002d94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <HAL_I2C_MspInit+0xec>)
 8002da0:	f001 fb36 	bl	8004410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	37e0      	adds	r7, #224	; 0xe0
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	58001c00 	.word	0x58001c00
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	58021400 	.word	0x58021400

08002dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0b8      	sub	sp, #224	; 0xe0
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df0:	f107 0310 	add.w	r3, r7, #16
 8002df4:	22bc      	movs	r2, #188	; 0xbc
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f007 f913 	bl	800a024 <memset>
  if(hspi->Instance==SPI5)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <HAL_SPI_MspInit+0xc0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d143      	bne.n	8002e90 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8002e0e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e12:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fe47 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002e24:	f7fe fd8a 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e4e:	f043 0320 	orr.w	r3, r3, #32
 8002e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_SPI_MspInit+0xc4>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e64:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e7e:	2305      	movs	r3, #5
 8002e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <HAL_SPI_MspInit+0xc8>)
 8002e8c:	f001 fac0 	bl	8004410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002e90:	bf00      	nop
 8002e92:	37e0      	adds	r7, #224	; 0xe0
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	58021400 	.word	0x58021400

08002ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_TIM_Base_MspInit+0x68>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002ed4:	e013      	b.n	8002efe <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_TIM_Base_MspInit+0x70>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10e      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_TIM_Base_MspInit+0x6c>)
 8002ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40001c00 	.word	0x40001c00
 8002f10:	58024400 	.word	0x58024400
 8002f14:	40002000 	.word	0x40002000

08002f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <HAL_TIM_MspPostInit+0xb4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11f      	bne.n	8002f7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f68:	2309      	movs	r3, #9
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4619      	mov	r1, r3
 8002f72:	4818      	ldr	r0, [pc, #96]	; (8002fd4 <HAL_TIM_MspPostInit+0xbc>)
 8002f74:	f001 fa4c 	bl	8004410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002f78:	e023      	b.n	8002fc2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM14)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIM_MspPostInit+0xc0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11e      	bne.n	8002fc2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_TIM_MspPostInit+0xb8>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002fb2:	2309      	movs	r3, #9
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_TIM_MspPostInit+0xbc>)
 8002fbe:	f001 fa27 	bl	8004410 <HAL_GPIO_Init>
}
 8002fc2:	bf00      	nop
 8002fc4:	3728      	adds	r7, #40	; 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40001c00 	.word	0x40001c00
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58020000 	.word	0x58020000
 8002fd8:	40002000 	.word	0x40002000

08002fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0b8      	sub	sp, #224	; 0xe0
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	22bc      	movs	r2, #188	; 0xbc
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f007 f811 	bl	800a024 <memset>
  if(huart->Instance==USART3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <HAL_UART_MspInit+0xc0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d142      	bne.n	8003092 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003016:	f107 0310 	add.w	r3, r7, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fd46 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003026:	f7fe fc89 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 800302c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003030:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 8003032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003036:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 800303c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 800304a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_UART_MspInit+0xc4>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800306a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003080:	2307      	movs	r3, #7
 8003082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003086:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800308a:	4619      	mov	r1, r3
 800308c:	4805      	ldr	r0, [pc, #20]	; (80030a4 <HAL_UART_MspInit+0xc8>)
 800308e:	f001 f9bf 	bl	8004410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003092:	bf00      	nop
 8003094:	37e0      	adds	r7, #224	; 0xe0
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40004800 	.word	0x40004800
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58020c00 	.word	0x58020c00

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>

080030ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <BusFault_Handler+0x4>

080030c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 f964 	bl	80033c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	return 1;
 8003100:	2301      	movs	r3, #1
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_kill>:

int _kill(int pid, int sig)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003116:	f006 ff4d 	bl	8009fb4 <__errno>
 800311a:	4603      	mov	r3, r0
 800311c:	2216      	movs	r2, #22
 800311e:	601a      	str	r2, [r3, #0]
	return -1;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_exit>:

void _exit (int status)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003134:	f04f 31ff 	mov.w	r1, #4294967295
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffe7 	bl	800310c <_kill>
	while (1) {}		/* Make sure we hang here */
 800313e:	e7fe      	b.n	800313e <_exit+0x12>

08003140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e00a      	b.n	8003168 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003152:	f3af 8000 	nop.w
 8003156:	4601      	mov	r1, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	60ba      	str	r2, [r7, #8]
 800315e:	b2ca      	uxtb	r2, r1
 8003160:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	dbf0      	blt.n	8003152 <_read+0x12>
	}

return len;
 8003170:	687b      	ldr	r3, [r7, #4]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e009      	b.n	80031a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60ba      	str	r2, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd01 	bl	8002b9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	3301      	adds	r3, #1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	dbf1      	blt.n	800318c <_write+0x12>
	}
	return len;
 80031a8:	687b      	ldr	r3, [r7, #4]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <_close>:

int _close(int file)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
	return -1;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031da:	605a      	str	r2, [r3, #4]
	return 0;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_isatty>:

int _isatty(int file)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	return 1;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
	return 0;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <_sbrk+0x5c>)
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <_sbrk+0x60>)
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <_sbrk+0x64>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <_sbrk+0x64>)
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <_sbrk+0x68>)
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	429a      	cmp	r2, r3
 800324a:	d207      	bcs.n	800325c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800324c:	f006 feb2 	bl	8009fb4 <__errno>
 8003250:	4603      	mov	r3, r0
 8003252:	220c      	movs	r2, #12
 8003254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	e009      	b.n	8003270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <_sbrk+0x64>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	4a05      	ldr	r2, [pc, #20]	; (8003280 <_sbrk+0x64>)
 800326c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	24080000 	.word	0x24080000
 800327c:	00000400 	.word	0x00000400
 8003280:	2400067c 	.word	0x2400067c
 8003284:	24000698 	.word	0x24000698

08003288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800328c:	f7fd fbf6 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003290:	480c      	ldr	r0, [pc, #48]	; (80032c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003292:	490d      	ldr	r1, [pc, #52]	; (80032c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003298:	e002      	b.n	80032a0 <LoopCopyDataInit>

0800329a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800329c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329e:	3304      	adds	r3, #4

080032a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a4:	d3f9      	bcc.n	800329a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032a8:	4c0a      	ldr	r4, [pc, #40]	; (80032d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ac:	e001      	b.n	80032b2 <LoopFillZerobss>

080032ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b0:	3204      	adds	r2, #4

080032b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b4:	d3fb      	bcc.n	80032ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032b6:	f006 fe83 	bl	8009fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ba:	f7fd ff61 	bl	8001180 <main>
  bx  lr
 80032be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80032c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032c8:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 80032cc:	0800f8a8 	.word	0x0800f8a8
  ldr r2, =_sbss
 80032d0:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 80032d4:	24000694 	.word	0x24000694

080032d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d8:	e7fe      	b.n	80032d8 <ADC3_IRQHandler>
	...

080032dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e2:	2003      	movs	r0, #3
 80032e4:	f000 f96e 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032e8:	f002 fa0a 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_Init+0x68>)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	4913      	ldr	r1, [pc, #76]	; (8003348 <HAL_Init+0x6c>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_Init+0x68>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_Init+0x6c>)
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_Init+0x70>)
 800331e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003320:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_Init+0x74>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003326:	200f      	movs	r0, #15
 8003328:	f000 f814 	bl	8003354 <HAL_InitTick>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e002      	b.n	800333c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003336:	f7ff fc43 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	58024400 	.word	0x58024400
 8003348:	0800f320 	.word	0x0800f320
 800334c:	24000004 	.word	0x24000004
 8003350:	24000000 	.word	0x24000000

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800335c:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_InitTick+0x60>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_InitTick+0x64>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_InitTick+0x60>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f945 	bl	800360e <HAL_SYSTICK_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00e      	b.n	80033ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d80a      	bhi.n	80033aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003394:	2200      	movs	r2, #0
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f000 f91d 	bl	80035da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <HAL_InitTick+0x68>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2400002c 	.word	0x2400002c
 80033b8:	24000000 	.word	0x24000000
 80033bc:	24000028 	.word	0x24000028

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	2400002c 	.word	0x2400002c
 80033e4:	24000680 	.word	0x24000680

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	24000680 	.word	0x24000680

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2400002c 	.word	0x2400002c

08003448 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetREVID+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0c1b      	lsrs	r3, r3, #16
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	5c001000 	.word	0x5c001000

08003460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	4313      	orrs	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00
 80034a4:	05fa0000 	.word	0x05fa0000

080034a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	; (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff47 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff5e 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff90 	bl	8003518 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5f 	bl	80034c4 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ffb2 	bl	8003580 <SysTick_Config>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b098      	sub	sp, #96	; 0x60
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003630:	4a84      	ldr	r2, [pc, #528]	; (8003844 <HAL_FDCAN_Init+0x21c>)
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4611      	mov	r1, r2
 8003638:	224c      	movs	r2, #76	; 0x4c
 800363a:	4618      	mov	r0, r3
 800363c:	f006 fce4 	bl	800a008 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c6      	b.n	80039d8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a7e      	ldr	r2, [pc, #504]	; (8003848 <HAL_FDCAN_Init+0x220>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d106      	bne.n	8003662 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fabc 	bl	8002bf4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0210 	bic.w	r2, r2, #16
 800368a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800368c:	f7ff feac 	bl	80033e8 <HAL_GetTick>
 8003690:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003692:	e014      	b.n	80036be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003694:	f7ff fea8 	bl	80033e8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b0a      	cmp	r3, #10
 80036a0:	d90d      	bls.n	80036be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2203      	movs	r2, #3
 80036b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e18c      	b.n	80039d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d0e3      	beq.n	8003694 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036dc:	f7ff fe84 	bl	80033e8 <HAL_GetTick>
 80036e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036e2:	e014      	b.n	800370e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036e4:	f7ff fe80 	bl	80033e8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b0a      	cmp	r3, #10
 80036f0:	d90d      	bls.n	800370e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e164      	b.n	80039d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0e3      	beq.n	80036e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7c1b      	ldrb	r3, [r3, #16]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d108      	bne.n	8003746 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	619a      	str	r2, [r3, #24]
 8003744:	e007      	b.n	8003756 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7c5b      	ldrb	r3, [r3, #17]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376c:	619a      	str	r2, [r3, #24]
 800376e:	e007      	b.n	8003780 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800377e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c9b      	ldrb	r3, [r3, #18]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003796:	619a      	str	r2, [r3, #24]
 8003798:	e007      	b.n	80037aa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80037ce:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0210 	bic.w	r2, r2, #16
 80037de:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0204 	orr.w	r2, r2, #4
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	e030      	b.n	800385c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02c      	beq.n	800385c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d020      	beq.n	800384c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003818:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0210 	orr.w	r2, r2, #16
 8003828:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d114      	bne.n	800385c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	619a      	str	r2, [r3, #24]
 8003842:	e00b      	b.n	800385c <HAL_FDCAN_Init+0x234>
 8003844:	0800f2d4 	.word	0x0800f2d4
 8003848:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	3b01      	subs	r3, #1
 8003862:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	3b01      	subs	r3, #1
 800386a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800386c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003874:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	3b01      	subs	r3, #1
 800387e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003884:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003886:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003890:	d115      	bne.n	80038be <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	3b01      	subs	r3, #1
 800389e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038a0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	3b01      	subs	r3, #1
 80038a8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80038aa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	3b01      	subs	r3, #1
 80038b4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80038ba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038bc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	4413      	add	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80038f2:	f023 0107 	bic.w	r1, r3, #7
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	3360      	adds	r3, #96	; 0x60
 80038fe:	443b      	add	r3, r7
 8003900:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d011      	beq.n	800393a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800391e:	f023 0107 	bic.w	r1, r3, #7
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3360      	adds	r3, #96	; 0x60
 800392a:	443b      	add	r3, r7
 800392c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800394a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	443b      	add	r3, r7
 8003958:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003978:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	3360      	adds	r3, #96	; 0x60
 8003984:	443b      	add	r3, r7
 8003986:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_FDCAN_Init+0x3b8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d107      	bne.n	80039b0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f022 0203 	bic.w	r2, r2, #3
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb1d 	bl	8004008 <FDCAN_CalcultateRamBlockAddresses>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80039d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3760      	adds	r7, #96	; 0x60
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	4000a000 	.word	0x4000a000

080039e4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039f4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <HAL_FDCAN_ConfigFilter+0x1e>
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d157      	bne.n	8003ab2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d12b      	bne.n	8003a62 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b07      	cmp	r3, #7
 8003a10:	d10d      	bne.n	8003a2e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a1e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003a24:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003a26:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e00e      	b.n	8003a4c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a3a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003a42:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e025      	b.n	8003aae <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	075a      	lsls	r2, r3, #29
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b07      	cmp	r3, #7
 8003a76:	d103      	bne.n	8003a80 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e006      	b.n	8003a8e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	079a      	lsls	r2, r3, #30
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e008      	b.n	8003ac4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab8:	f043 0202 	orr.w	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d110      	bne.n	8003b0c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003af2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e008      	b.n	8003b1e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d111      	bne.n	8003b62 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e008      	b.n	8003b74 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d141      	bne.n	8003c1c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ba0:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e038      	b.n	8003c2e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e026      	b.n	8003c2e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb8c 	bl	8004314 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	409a      	lsls	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e008      	b.n	8003c2e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c22:	f043 0208 	orr.w	r2, r3, #8
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b08b      	sub	sp, #44	; 0x2c
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c50:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c52:	7efb      	ldrb	r3, [r7, #27]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	f040 814b 	bne.w	8003ef0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d14d      	bne.n	8003cfc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e13e      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e12c      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cb0:	0e1b      	lsrs	r3, r3, #24
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cc2:	0fdb      	lsrs	r3, r3, #31
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ccc:	d101      	bne.n	8003cd2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e069      	b.n	8003dd0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b41      	cmp	r3, #65	; 0x41
 8003d00:	d14d      	bne.n	8003d9e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0ed      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0db      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d52:	0e1b      	lsrs	r3, r3, #24
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10b      	bne.n	8003d74 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d64:	0fdb      	lsrs	r3, r3, #31
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6e:	d101      	bne.n	8003d74 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	e018      	b.n	8003dd0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d309      	bcc.n	8003dbc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0a2      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e005      	b.n	8003e00 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	0fda      	lsrs	r2, r3, #31
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	3304      	adds	r3, #4
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	e00a      	b.n	8003e8a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	441a      	add	r2, r3
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	440b      	add	r3, r1
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	3301      	adds	r3, #1
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d3eb      	bcc.n	8003e74 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d105      	bne.n	8003eae <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003eac:	e01e      	b.n	8003eec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b41      	cmp	r3, #65	; 0x41
 8003eb2:	d105      	bne.n	8003ec0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003ebe:	e015      	b.n	8003eec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b1f      	cmp	r3, #31
 8003ec4:	d808      	bhi.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ed6:	e009      	b.n	8003eec <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 021f 	and.w	r2, r3, #31
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e008      	b.n	8003f02 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef6:	f043 0208 	orr.w	r2, r3, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	372c      	adds	r7, #44	; 0x2c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	0800f340 	.word	0x0800f340

08003f14 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f26:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d002      	beq.n	8003f34 <HAL_FDCAN_ActivateNotification+0x20>
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d155      	bne.n	8003fe0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f52:	e014      	b.n	8003f7e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d108      	bne.n	8003f76 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0202 	orr.w	r2, r2, #2
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f74:	e003      	b.n	8003f7e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <HAL_FDCAN_ActivateNotification+0xec>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6553      	str	r3, [r2, #84]	; 0x54
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0f9b      	lsrs	r3, r3, #30
 8003fd6:	490b      	ldr	r1, [pc, #44]	; (8004004 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e008      	b.n	8003ff2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe6:	f043 0202 	orr.w	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	3fcfffff 	.word	0x3fcfffff
 8004004:	4000a800 	.word	0x4000a800

08004008 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800401e:	4ba7      	ldr	r3, [pc, #668]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004020:	4013      	ands	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0091      	lsls	r1, r2, #2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	430b      	orrs	r3, r1
 800402c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4413      	add	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800405e:	4b97      	ldr	r3, [pc, #604]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004060:	4013      	ands	r3, r2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	0091      	lsls	r1, r2, #2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	430b      	orrs	r3, r1
 800406c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	041a      	lsls	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040a0:	4b86      	ldr	r3, [pc, #536]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	0091      	lsls	r1, r2, #2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	041a      	lsls	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4413      	add	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040e8:	4b74      	ldr	r3, [pc, #464]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0091      	lsls	r1, r2, #2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004102:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	041a      	lsls	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4413      	add	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0091      	lsls	r1, r2, #2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	430b      	orrs	r3, r1
 800413e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800415c:	4b57      	ldr	r3, [pc, #348]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	0091      	lsls	r1, r2, #2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004176:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	041a      	lsls	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	4413      	add	r3, r2
 8004194:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	0091      	lsls	r1, r2, #2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	041a      	lsls	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041dc:	061a      	lsls	r2, r3, #24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80041ee:	4413      	add	r3, r2
 80041f0:	009a      	lsls	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d915      	bls.n	80042e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80042b8:	e006      	b.n	80042c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80042ba:	bf00      	nop
 80042bc:	ffff0003 	.word	0xffff0003
 80042c0:	10002b00 	.word	0x10002b00
 80042c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2203      	movs	r2, #3
 80042dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e010      	b.n	8004306 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e005      	b.n	80042f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3304      	adds	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	429a      	cmp	r2, r3
 8004302:	d3f3      	bcc.n	80042ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004332:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800433a:	4313      	orrs	r3, r2
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e00a      	b.n	8004356 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004348:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800434e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004354:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004360:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004366:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800436c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3304      	adds	r3, #4
 8004396:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3304      	adds	r3, #4
 80043a2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e020      	b.n	80043ec <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3303      	adds	r3, #3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3302      	adds	r3, #2
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	440b      	add	r3, r1
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80043c2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3301      	adds	r3, #1
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	440b      	add	r3, r1
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80043d0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	440a      	add	r2, r1
 80043d8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80043da:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	3304      	adds	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3304      	adds	r3, #4
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	4a06      	ldr	r2, [pc, #24]	; (800440c <FDCAN_CopyMessageToRAM+0xf8>)
 80043f4:	5cd3      	ldrb	r3, [r2, r3]
 80043f6:	461a      	mov	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d3d5      	bcc.n	80043aa <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	3724      	adds	r7, #36	; 0x24
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	0800f340 	.word	0x0800f340

08004410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800441e:	4b89      	ldr	r3, [pc, #548]	; (8004644 <HAL_GPIO_Init+0x234>)
 8004420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004422:	e194      	b.n	800474e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8186 	beq.w	8004748 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d005      	beq.n	8004454 <HAL_GPIO_Init+0x44>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d130      	bne.n	80044b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800448a:	2201      	movs	r2, #1
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 0201 	and.w	r2, r3, #1
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d017      	beq.n	80044f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d123      	bne.n	8004546 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	220f      	movs	r2, #15
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	08da      	lsrs	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3208      	adds	r2, #8
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0203 	and.w	r2, r3, #3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80e0 	beq.w	8004748 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_GPIO_Init+0x238>)
 800458a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800458e:	4a2e      	ldr	r2, [pc, #184]	; (8004648 <HAL_GPIO_Init+0x238>)
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_GPIO_Init+0x238>)
 800459a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <HAL_GPIO_Init+0x23c>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_GPIO_Init+0x240>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d052      	beq.n	8004678 <HAL_GPIO_Init+0x268>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_GPIO_Init+0x244>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_GPIO_Init+0x22e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_GPIO_Init+0x248>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02b      	beq.n	800463a <HAL_GPIO_Init+0x22a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_GPIO_Init+0x24c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d025      	beq.n	8004636 <HAL_GPIO_Init+0x226>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_GPIO_Init+0x250>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01f      	beq.n	8004632 <HAL_GPIO_Init+0x222>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_GPIO_Init+0x254>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d019      	beq.n	800462e <HAL_GPIO_Init+0x21e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <HAL_GPIO_Init+0x258>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_GPIO_Init+0x21a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_GPIO_Init+0x25c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00d      	beq.n	8004626 <HAL_GPIO_Init+0x216>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_GPIO_Init+0x260>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <HAL_GPIO_Init+0x212>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_GPIO_Init+0x264>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_GPIO_Init+0x20e>
 800461a:	2309      	movs	r3, #9
 800461c:	e02d      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800461e:	230a      	movs	r3, #10
 8004620:	e02b      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004622:	2308      	movs	r3, #8
 8004624:	e029      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004626:	2307      	movs	r3, #7
 8004628:	e027      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800462a:	2306      	movs	r3, #6
 800462c:	e025      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800462e:	2305      	movs	r3, #5
 8004630:	e023      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004632:	2304      	movs	r3, #4
 8004634:	e021      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004636:	2303      	movs	r3, #3
 8004638:	e01f      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800463a:	2302      	movs	r3, #2
 800463c:	e01d      	b.n	800467a <HAL_GPIO_Init+0x26a>
 800463e:	2301      	movs	r3, #1
 8004640:	e01b      	b.n	800467a <HAL_GPIO_Init+0x26a>
 8004642:	bf00      	nop
 8004644:	58000080 	.word	0x58000080
 8004648:	58024400 	.word	0x58024400
 800464c:	58000400 	.word	0x58000400
 8004650:	58020000 	.word	0x58020000
 8004654:	58020400 	.word	0x58020400
 8004658:	58020800 	.word	0x58020800
 800465c:	58020c00 	.word	0x58020c00
 8004660:	58021000 	.word	0x58021000
 8004664:	58021400 	.word	0x58021400
 8004668:	58021800 	.word	0x58021800
 800466c:	58021c00 	.word	0x58021c00
 8004670:	58022000 	.word	0x58022000
 8004674:	58022400 	.word	0x58022400
 8004678:	2300      	movs	r3, #0
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	f002 0203 	and.w	r2, r2, #3
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	4093      	lsls	r3, r2
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468a:	4938      	ldr	r1, [pc, #224]	; (800476c <HAL_GPIO_Init+0x35c>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f ae63 	bne.w	8004424 <HAL_GPIO_Init+0x14>
  }
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	3724      	adds	r7, #36	; 0x24
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	58000400 	.word	0x58000400

08004770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004780:	787b      	ldrb	r3, [r7, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800478c:	e003      	b.n	8004796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4013      	ands	r3, r2
 80047ba:	041a      	lsls	r2, r3, #16
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43d9      	mvns	r1, r3
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	400b      	ands	r3, r1
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	619a      	str	r2, [r3, #24]
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <HAL_HSEM_FastTake+0x2c>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3320      	adds	r3, #32
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <HAL_HSEM_FastTake+0x30>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	58026400 	.word	0x58026400
 8004808:	80000300 	.word	0x80000300

0800480c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004816:	4906      	ldr	r1, [pc, #24]	; (8004830 <HAL_HSEM_Release+0x24>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58026400 	.word	0x58026400

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fe fa44 	bl	8002ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e006      	b.n	80048bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d104      	bne.n	80048ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <HAL_I2C_Init+0x11c>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	02008000 	.word	0x02008000

08004954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b20      	cmp	r3, #32
 8004968:	d138      	bne.n	80049dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004974:	2302      	movs	r3, #2
 8004976:	e032      	b.n	80049de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	; 0x24
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d139      	bne.n	8004a74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e033      	b.n	8004a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2224      	movs	r2, #36	; 0x24
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a8c:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d00a      	beq.n	8004aae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e040      	b.n	8004b2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e03e      	b.n	8004b2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004aae:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004ab6:	491f      	ldr	r1, [pc, #124]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004abe:	f7fe fc93 	bl	80033e8 <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ac4:	e009      	b.n	8004ada <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ac6:	f7fe fc8f 	bl	80033e8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad4:	d901      	bls.n	8004ada <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e028      	b.n	8004b2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae6:	d1ee      	bne.n	8004ac6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b1e      	cmp	r3, #30
 8004aec:	d008      	beq.n	8004b00 <HAL_PWREx_ConfigSupply+0x7c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b2e      	cmp	r3, #46	; 0x2e
 8004af2:	d005      	beq.n	8004b00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b1d      	cmp	r3, #29
 8004af8:	d002      	beq.n	8004b00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b2d      	cmp	r3, #45	; 0x2d
 8004afe:	d114      	bne.n	8004b2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b00:	f7fe fc72 	bl	80033e8 <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b06:	e009      	b.n	8004b1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b08:	f7fe fc6e 	bl	80033e8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b16:	d901      	bls.n	8004b1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e007      	b.n	8004b2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d1ee      	bne.n	8004b08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	58024800 	.word	0x58024800

08004b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08c      	sub	sp, #48	; 0x30
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f000 bc1d 	b.w	8005386 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8087 	beq.w	8004c68 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b64:	4b96      	ldr	r3, [pc, #600]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d007      	beq.n	8004b80 <HAL_RCC_OscConfig+0x48>
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	d110      	bne.n	8004b98 <HAL_RCC_OscConfig+0x60>
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d10b      	bne.n	8004b98 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	4b8f      	ldr	r3, [pc, #572]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d06c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x12e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d168      	bne.n	8004c66 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e3f6      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x78>
 8004ba2:	4b87      	ldr	r3, [pc, #540]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a86      	ldr	r2, [pc, #536]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e02e      	b.n	8004c0e <HAL_RCC_OscConfig+0xd6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x9a>
 8004bb8:	4b81      	ldr	r3, [pc, #516]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a80      	ldr	r2, [pc, #512]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b7e      	ldr	r3, [pc, #504]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7d      	ldr	r2, [pc, #500]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e01d      	b.n	8004c0e <HAL_RCC_OscConfig+0xd6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0xbe>
 8004bdc:	4b78      	ldr	r3, [pc, #480]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a77      	ldr	r2, [pc, #476]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a74      	ldr	r2, [pc, #464]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0xd6>
 8004bf6:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a71      	ldr	r2, [pc, #452]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6e      	ldr	r2, [pc, #440]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d013      	beq.n	8004c3e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fe fbe7 	bl	80033e8 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fe fbe3 	bl	80033e8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e3aa      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c30:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0xe6>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fbd3 	bl	80033e8 <HAL_GetTick>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c46:	f7fe fbcf 	bl	80033e8 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e396      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c58:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0x10e>
 8004c64:	e000      	b.n	8004c68 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80cb 	beq.w	8004e0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c80:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_RCC_OscConfig+0x164>
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b18      	cmp	r3, #24
 8004c90:	d156      	bne.n	8004d40 <HAL_RCC_OscConfig+0x208>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d151      	bne.n	8004d40 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9c:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x17c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e368      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cb4:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 0219 	bic.w	r2, r3, #25
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	493f      	ldr	r1, [pc, #252]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cc6:	f7fe fb8f 	bl	80033e8 <HAL_GetTick>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fe fb8b 	bl	80033e8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e352      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce0:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	f7fe fbac 	bl	8003448 <HAL_GetREVID>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d817      	bhi.n	8004d2a <HAL_RCC_OscConfig+0x1f2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d108      	bne.n	8004d14 <HAL_RCC_OscConfig+0x1dc>
 8004d02:	4b2f      	ldr	r3, [pc, #188]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d0a:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d12:	e07b      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	4927      	ldr	r1, [pc, #156]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	e070      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4921      	ldr	r1, [pc, #132]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d3e:	e065      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d048      	beq.n	8004dda <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 0219 	bic.w	r2, r3, #25
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	491a      	ldr	r1, [pc, #104]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fb45 	bl	80033e8 <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fe fb41 	bl	80033e8 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e308      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	f7fe fb62 	bl	8003448 <HAL_GetREVID>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d81a      	bhi.n	8004dc4 <HAL_RCC_OscConfig+0x28c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d108      	bne.n	8004da8 <HAL_RCC_OscConfig+0x270>
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d9e:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da4:	6053      	str	r3, [r2, #4]
 8004da6:	e031      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	4902      	ldr	r1, [pc, #8]	; (8004dc0 <HAL_RCC_OscConfig+0x288>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	e026      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	4b9a      	ldr	r3, [pc, #616]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	4997      	ldr	r1, [pc, #604]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
 8004dd8:	e018      	b.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b95      	ldr	r3, [pc, #596]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a94      	ldr	r2, [pc, #592]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fe faff 	bl	80033e8 <HAL_GetTick>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dee:	f7fe fafb 	bl	80033e8 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e2c2      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e00:	4b8b      	ldr	r3, [pc, #556]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a9 	beq.w	8004f6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1a:	4b85      	ldr	r3, [pc, #532]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e24:	4b82      	ldr	r3, [pc, #520]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d007      	beq.n	8004e40 <HAL_RCC_OscConfig+0x308>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b18      	cmp	r3, #24
 8004e34:	d13a      	bne.n	8004eac <HAL_RCC_OscConfig+0x374>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d135      	bne.n	8004eac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e40:	4b7b      	ldr	r3, [pc, #492]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x320>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e296      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e58:	f7fe faf6 	bl	8003448 <HAL_GetREVID>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d817      	bhi.n	8004e96 <HAL_RCC_OscConfig+0x35e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d108      	bne.n	8004e80 <HAL_RCC_OscConfig+0x348>
 8004e6e:	4b70      	ldr	r3, [pc, #448]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e76:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e7e:	e075      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e80:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	069b      	lsls	r3, r3, #26
 8004e8e:	4968      	ldr	r1, [pc, #416]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e94:	e06a      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e96:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	4962      	ldr	r1, [pc, #392]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eaa:	e05f      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d042      	beq.n	8004f3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004eb4:	4b5e      	ldr	r3, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5d      	ldr	r2, [pc, #372]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe fa92 	bl	80033e8 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ec8:	f7fe fa8e 	bl	80033e8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e255      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eda:	4b55      	ldr	r3, [pc, #340]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee6:	f7fe faaf 	bl	8003448 <HAL_GetREVID>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d817      	bhi.n	8004f24 <HAL_RCC_OscConfig+0x3ec>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d108      	bne.n	8004f0e <HAL_RCC_OscConfig+0x3d6>
 8004efc:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f04:	4a4a      	ldr	r2, [pc, #296]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f0a:	6053      	str	r3, [r2, #4]
 8004f0c:	e02e      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
 8004f0e:	4b48      	ldr	r3, [pc, #288]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	069b      	lsls	r3, r3, #26
 8004f1c:	4944      	ldr	r1, [pc, #272]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]
 8004f22:	e023      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
 8004f24:	4b42      	ldr	r3, [pc, #264]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	493f      	ldr	r1, [pc, #252]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60cb      	str	r3, [r1, #12]
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fe fa4f 	bl	80033e8 <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f4e:	f7fe fa4b 	bl	80033e8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e212      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f60:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d036      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d019      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f80:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f84:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fe fa2c 	bl	80033e8 <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fe fa28 	bl	80033e8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e1ef      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x45c>
 8004fb2:	e018      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fa12 	bl	80033e8 <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc8:	f7fe fa0e 	bl	80033e8 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1d5      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d039      	beq.n	8005066 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01c      	beq.n	8005034 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8005000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005006:	f7fe f9ef 	bl	80033e8 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800500e:	f7fe f9eb 	bl	80033e8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1b2      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <HAL_RCC_OscConfig+0x4f8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x4d6>
 800502c:	e01b      	b.n	8005066 <HAL_RCC_OscConfig+0x52e>
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005034:	4b9b      	ldr	r3, [pc, #620]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a9a      	ldr	r2, [pc, #616]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800503a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800503e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005040:	f7fe f9d2 	bl	80033e8 <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005048:	f7fe f9ce 	bl	80033e8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e195      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800505a:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8081 	beq.w	8005176 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005074:	4b8c      	ldr	r3, [pc, #560]	; (80052a8 <HAL_RCC_OscConfig+0x770>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a8b      	ldr	r2, [pc, #556]	; (80052a8 <HAL_RCC_OscConfig+0x770>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005080:	f7fe f9b2 	bl	80033e8 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005088:	f7fe f9ae 	bl	80033e8 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e175      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800509a:	4b83      	ldr	r3, [pc, #524]	; (80052a8 <HAL_RCC_OscConfig+0x770>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d106      	bne.n	80050bc <HAL_RCC_OscConfig+0x584>
 80050ae:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	4a7c      	ldr	r2, [pc, #496]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ba:	e02d      	b.n	8005118 <HAL_RCC_OscConfig+0x5e0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x5a6>
 80050c4:	4b77      	ldr	r3, [pc, #476]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a76      	ldr	r2, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
 80050d0:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4a73      	ldr	r2, [pc, #460]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050d6:	f023 0304 	bic.w	r3, r3, #4
 80050da:	6713      	str	r3, [r2, #112]	; 0x70
 80050dc:	e01c      	b.n	8005118 <HAL_RCC_OscConfig+0x5e0>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x5c8>
 80050e6:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a6e      	ldr	r2, [pc, #440]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a6b      	ldr	r2, [pc, #428]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0x5e0>
 8005100:	4b68      	ldr	r3, [pc, #416]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a67      	ldr	r2, [pc, #412]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a64      	ldr	r2, [pc, #400]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fe f962 	bl	80033e8 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fe f95e 	bl	80033e8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e123      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513e:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCC_OscConfig+0x5f0>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe f94c 	bl	80033e8 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fe f948 	bl	80033e8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e10d      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800516a:	4b4e      	ldr	r3, [pc, #312]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ee      	bne.n	8005154 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8102 	beq.w	8005384 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005188:	2b18      	cmp	r3, #24
 800518a:	f000 80bd 	beq.w	8005308 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b02      	cmp	r3, #2
 8005194:	f040 809e 	bne.w	80052d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b42      	ldr	r3, [pc, #264]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a41      	ldr	r2, [pc, #260]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800519e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fe f920 	bl	80033e8 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fe f91c 	bl	80033e8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0e3      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051be:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	4b37      	ldr	r3, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x774>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051da:	0112      	lsls	r2, r2, #4
 80051dc:	430a      	orrs	r2, r1
 80051de:	4931      	ldr	r1, [pc, #196]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	628b      	str	r3, [r1, #40]	; 0x28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	3b01      	subs	r3, #1
 80051ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	3b01      	subs	r3, #1
 80051f4:	025b      	lsls	r3, r3, #9
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	3b01      	subs	r3, #1
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005214:	4923      	ldr	r1, [pc, #140]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522a:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x778>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	491b      	ldr	r1, [pc, #108]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f023 020c 	bic.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	4917      	ldr	r1, [pc, #92]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800524c:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f023 0202 	bic.w	r2, r3, #2
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	4912      	ldr	r1, [pc, #72]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 800527c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <HAL_RCC_OscConfig+0x76c>)
 8005294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529a:	f7fe f8a5 	bl	80033e8 <HAL_GetTick>
 800529e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a0:	e011      	b.n	80052c6 <HAL_RCC_OscConfig+0x78e>
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	58024800 	.word	0x58024800
 80052ac:	fffffc0c 	.word	0xfffffc0c
 80052b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fe f898 	bl	80033e8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e05f      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c6:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x77c>
 80052d2:	e057      	b.n	8005384 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2d      	ldr	r2, [pc, #180]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fe f882 	bl	80033e8 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fe f87e 	bl	80033e8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e045      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fa:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x7b0>
 8005306:	e03d      	b.n	8005384 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800530e:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_RCC_OscConfig+0x858>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b01      	cmp	r3, #1
 800531a:	d031      	beq.n	8005380 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d12a      	bne.n	8005380 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d122      	bne.n	8005380 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d11a      	bne.n	8005380 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	0a5b      	lsrs	r3, r3, #9
 800534e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d111      	bne.n	8005380 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d108      	bne.n	8005380 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	0e1b      	lsrs	r3, r3, #24
 8005372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3730      	adds	r7, #48	; 0x30
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	58024400 	.word	0x58024400

08005394 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e19c      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d910      	bls.n	80053d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 020f 	bic.w	r2, r3, #15
 80053be:	4985      	ldr	r1, [pc, #532]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b83      	ldr	r3, [pc, #524]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e184      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	4b7b      	ldr	r3, [pc, #492]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d908      	bls.n	8005406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	4975      	ldr	r1, [pc, #468]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005402:	4313      	orrs	r3, r2
 8005404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d010      	beq.n	8005434 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	4b70      	ldr	r3, [pc, #448]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800541e:	429a      	cmp	r2, r3
 8005420:	d908      	bls.n	8005434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005422:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	496a      	ldr	r1, [pc, #424]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005430:	4313      	orrs	r3, r2
 8005432:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d010      	beq.n	8005462 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	4b64      	ldr	r3, [pc, #400]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800544c:	429a      	cmp	r2, r3
 800544e:	d908      	bls.n	8005462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005450:	4b61      	ldr	r3, [pc, #388]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	495e      	ldr	r1, [pc, #376]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 800545e:	4313      	orrs	r3, r2
 8005460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547a:	429a      	cmp	r2, r3
 800547c:	d908      	bls.n	8005490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800547e:	4b56      	ldr	r3, [pc, #344]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4953      	ldr	r1, [pc, #332]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 800548c:	4313      	orrs	r3, r2
 800548e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	4b4d      	ldr	r3, [pc, #308]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d908      	bls.n	80054be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f023 020f 	bic.w	r2, r3, #15
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4947      	ldr	r1, [pc, #284]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d055      	beq.n	8005576 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054ca:	4b43      	ldr	r3, [pc, #268]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	4940      	ldr	r1, [pc, #256]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054e4:	4b3c      	ldr	r3, [pc, #240]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d121      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0f6      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054fc:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d115      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0ea      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005514:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0de      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0d6      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005534:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f023 0207 	bic.w	r2, r3, #7
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4925      	ldr	r1, [pc, #148]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005542:	4313      	orrs	r3, r2
 8005544:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005546:	f7fd ff4f 	bl	80033e8 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554c:	e00a      	b.n	8005564 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554e:	f7fd ff4b 	bl	80033e8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	4293      	cmp	r3, r2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0be      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005564:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	429a      	cmp	r2, r3
 8005574:	d1eb      	bne.n	800554e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	429a      	cmp	r2, r3
 8005590:	d208      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f023 020f 	bic.w	r2, r3, #15
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	490e      	ldr	r1, [pc, #56]	; (80055d8 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d214      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 020f 	bic.w	r2, r3, #15
 80055ba:	4906      	ldr	r1, [pc, #24]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCC_ClockConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e086      	b.n	80056e2 <HAL_RCC_ClockConfig+0x34e>
 80055d4:	52002000 	.word	0x52002000
 80055d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d208      	bcs.n	800560a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055f8:	4b3c      	ldr	r3, [pc, #240]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	4939      	ldr	r1, [pc, #228]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005606:	4313      	orrs	r3, r2
 8005608:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	4b34      	ldr	r3, [pc, #208]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005622:	429a      	cmp	r2, r3
 8005624:	d208      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005626:	4b31      	ldr	r3, [pc, #196]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	492e      	ldr	r1, [pc, #184]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005634:	4313      	orrs	r3, r2
 8005636:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699a      	ldr	r2, [r3, #24]
 8005648:	4b28      	ldr	r3, [pc, #160]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005650:	429a      	cmp	r2, r3
 8005652:	d208      	bcs.n	8005666 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	4922      	ldr	r1, [pc, #136]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005662:	4313      	orrs	r3, r2
 8005664:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69da      	ldr	r2, [r3, #28]
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800567e:	429a      	cmp	r2, r3
 8005680:	d208      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4917      	ldr	r1, [pc, #92]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 8005690:	4313      	orrs	r3, r2
 8005692:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005694:	f000 f834 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x35c>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_RCC_ClockConfig+0x358>)
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <HAL_RCC_ClockConfig+0x35c>)
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
 80056c8:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x360>)
 80056ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056cc:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <HAL_RCC_ClockConfig+0x364>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_ClockConfig+0x368>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd fe3c 	bl	8003354 <HAL_InitTick>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	58024400 	.word	0x58024400
 80056f0:	0800f320 	.word	0x0800f320
 80056f4:	24000004 	.word	0x24000004
 80056f8:	24000000 	.word	0x24000000
 80056fc:	24000028 	.word	0x24000028

08005700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005706:	4bb3      	ldr	r3, [pc, #716]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570e:	2b18      	cmp	r3, #24
 8005710:	f200 8155 	bhi.w	80059be <HAL_RCC_GetSysClockFreq+0x2be>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005781 	.word	0x08005781
 8005720:	080059bf 	.word	0x080059bf
 8005724:	080059bf 	.word	0x080059bf
 8005728:	080059bf 	.word	0x080059bf
 800572c:	080059bf 	.word	0x080059bf
 8005730:	080059bf 	.word	0x080059bf
 8005734:	080059bf 	.word	0x080059bf
 8005738:	080059bf 	.word	0x080059bf
 800573c:	080057a7 	.word	0x080057a7
 8005740:	080059bf 	.word	0x080059bf
 8005744:	080059bf 	.word	0x080059bf
 8005748:	080059bf 	.word	0x080059bf
 800574c:	080059bf 	.word	0x080059bf
 8005750:	080059bf 	.word	0x080059bf
 8005754:	080059bf 	.word	0x080059bf
 8005758:	080059bf 	.word	0x080059bf
 800575c:	080057ad 	.word	0x080057ad
 8005760:	080059bf 	.word	0x080059bf
 8005764:	080059bf 	.word	0x080059bf
 8005768:	080059bf 	.word	0x080059bf
 800576c:	080059bf 	.word	0x080059bf
 8005770:	080059bf 	.word	0x080059bf
 8005774:	080059bf 	.word	0x080059bf
 8005778:	080059bf 	.word	0x080059bf
 800577c:	080057b3 	.word	0x080057b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005780:	4b94      	ldr	r3, [pc, #592]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800578c:	4b91      	ldr	r3, [pc, #580]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a90      	ldr	r2, [pc, #576]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800579e:	e111      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057a0:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a2:	61bb      	str	r3, [r7, #24]
    break;
 80057a4:	e10e      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057a6:	4b8d      	ldr	r3, [pc, #564]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a8:	61bb      	str	r3, [r7, #24]
    break;
 80057aa:	e10b      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057ac:	4b8c      	ldr	r3, [pc, #560]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057ae:	61bb      	str	r3, [r7, #24]
    break;
 80057b0:	e108      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057b2:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80057bc:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057c8:	4b82      	ldr	r3, [pc, #520]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057d2:	4b80      	ldr	r3, [pc, #512]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	08db      	lsrs	r3, r3, #3
 80057d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80e1 	beq.w	80059b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	f000 8083 	beq.w	8005904 <HAL_RCC_GetSysClockFreq+0x204>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f200 80a1 	bhi.w	8005948 <HAL_RCC_GetSysClockFreq+0x248>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x114>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d056      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005812:	e099      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005814:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02d      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005820:	4b6c      	ldr	r3, [pc, #432]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	4a6b      	ldr	r2, [pc, #428]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b62      	ldr	r3, [pc, #392]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800587a:	e087      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b51      	ldr	r3, [pc, #324]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058be:	e065      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b40      	ldr	r3, [pc, #256]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005902:	e043      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a02 	vldr	s12, [r7, #8]
 800592a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005946:	e021      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596a:	ed97 6a02 	vldr	s12, [r7, #8]
 800596e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800598a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	0a5b      	lsrs	r3, r3, #9
 8005992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005996:	3301      	adds	r3, #1
 8005998:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b0:	ee17 3a90 	vmov	r3, s15
 80059b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80059b6:	e005      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
    break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059c0:	61bb      	str	r3, [r7, #24]
    break;
 80059c2:	bf00      	nop
  }

  return sysclockfreq;
 80059c4:	69bb      	ldr	r3, [r7, #24]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	; 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	003d0900 	.word	0x003d0900
 80059e0:	007a1200 	.word	0x007a1200
 80059e4:	46000000 	.word	0x46000000
 80059e8:	4c742400 	.word	0x4c742400
 80059ec:	4a742400 	.word	0x4a742400
 80059f0:	4af42400 	.word	0x4af42400

080059f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059fa:	f7ff fe81 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	490f      	ldr	r1, [pc, #60]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a0c:	5ccb      	ldrb	r3, [r1, r3]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a22:	5cd3      	ldrb	r3, [r2, r3]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a32:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	58024400 	.word	0x58024400
 8005a48:	0800f320 	.word	0x0800f320
 8005a4c:	24000004 	.word	0x24000004
 8005a50:	24000000 	.word	0x24000000

08005a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a58:	f7ff ffcc 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	0800f320 	.word	0x0800f320

08005a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a84:	f7ff ffb6 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	4904      	ldr	r1, [pc, #16]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a96:	5ccb      	ldrb	r3, [r1, r3]
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	0800f320 	.word	0x0800f320

08005aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ad0:	d02a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ad6:	d824      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005adc:	d018      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ae2:	d81e      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aec:	d007      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aee:	e018      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4ba3      	ldr	r3, [pc, #652]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4aa2      	ldr	r2, [pc, #648]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005afc:	e015      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f9d5 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3324      	adds	r3, #36	; 0x24
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fa7e 	bl	8007018 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
      break;
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b30:	4b93      	ldr	r3, [pc, #588]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3c:	4990      	ldr	r1, [pc, #576]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	650b      	str	r3, [r1, #80]	; 0x50
 8005b42:	e001      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d03d      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d826      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b79 	.word	0x08005b79
 8005b68:	08005b87 	.word	0x08005b87
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005bb1 	.word	0x08005bb1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b81      	ldr	r3, [pc, #516]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a80      	ldr	r2, [pc, #512]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b84:	e015      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f991 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b96:	e00c      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fa3a 	bl	8007018 <RCCEx_PLL3_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ba8:	e003      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
      break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bb8:	4b71      	ldr	r3, [pc, #452]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	f023 0207 	bic.w	r2, r3, #7
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	496e      	ldr	r1, [pc, #440]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d042      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be4:	d02b      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d825      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bec:	2bc0      	cmp	r3, #192	; 0xc0
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bf0:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf2:	d821      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d016      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d81d      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d007      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005c04:	e018      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c06:	4b5e      	ldr	r3, [pc, #376]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	4a5d      	ldr	r2, [pc, #372]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c12:	e017      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 f94a 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c24:	e00e      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3324      	adds	r3, #36	; 0x24
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f9f3 	bl	8007018 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c36:	e005      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c4a:	4b4d      	ldr	r3, [pc, #308]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	494a      	ldr	r1, [pc, #296]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d049      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c78:	d030      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c7e:	d82a      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c84:	d02c      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005c86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c8a:	d824      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c90:	d018      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c96:	d81e      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ca0:	d007      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ca2:	e018      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a35      	ldr	r2, [pc, #212]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cb0:	e017      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f8fb 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005cc2:	e00e      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3324      	adds	r3, #36	; 0x24
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 f9a4 	bl	8007018 <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cd4:	e005      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf6:	4922      	ldr	r1, [pc, #136]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	658b      	str	r3, [r1, #88]	; 0x58
 8005cfc:	e001      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d04b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d18:	d030      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d1e:	d82a      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d24:	d02e      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d2a:	d824      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d30:	d018      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d36:	d81e      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d40:	d007      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d42:	e018      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d50:	e019      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f8ab 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d62:	e010      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3324      	adds	r3, #36	; 0x24
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 f954 	bl	8007018 <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d74:	e007      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7a:	e004      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005d7c:	bf00      	nop
 8005d7e:	e002      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d80:	58024400 	.word	0x58024400
      break;
 8005d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d8c:	4b99      	ldr	r3, [pc, #612]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d9a:	4996      	ldr	r1, [pc, #600]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8005da0:	e001      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d032      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db6:	2b30      	cmp	r3, #48	; 0x30
 8005db8:	d01c      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005dba:	2b30      	cmp	r3, #48	; 0x30
 8005dbc:	d817      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d00c      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d813      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d10f      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dce:	4b89      	ldr	r3, [pc, #548]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	4a88      	ldr	r2, [pc, #544]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005dda:	e00e      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	2102      	movs	r1, #2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f866 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005dec:	e005      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005df4:	bf00      	nop
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e00:	4b7c      	ldr	r3, [pc, #496]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	4979      	ldr	r1, [pc, #484]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d047      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2c:	d030      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e32:	d82a      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e38:	d02c      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e3e:	d824      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e44:	d018      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4a:	d81e      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d007      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005e56:	e018      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e58:	4b66      	ldr	r3, [pc, #408]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	4a65      	ldr	r2, [pc, #404]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e64:	e017      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f821 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e76:	e00e      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 f8ca 	bl	8007018 <RCCEx_PLL3_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e88:	e005      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8e:	e002      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e9c:	4b55      	ldr	r3, [pc, #340]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea8:	4952      	ldr	r1, [pc, #328]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	650b      	str	r3, [r1, #80]	; 0x50
 8005eae:	e001      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d049      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec8:	d02e      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ece:	d828      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ed4:	d02a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eda:	d822      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee0:	d026      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee6:	d81c      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eec:	d010      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef2:	d816      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d111      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 ffd5 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f0e:	e012      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3324      	adds	r3, #36	; 0x24
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 f87e 	bl	8007018 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f20:	e009      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
      break;
 8005f26:	e006      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f28:	bf00      	nop
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f2c:	bf00      	nop
 8005f2e:	e002      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d109      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	492a      	ldr	r1, [pc, #168]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f4e:	e001      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d04d      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f6a:	d02e      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f70:	d828      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d02a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7c:	d822      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f82:	d026      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005f84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f88:	d81c      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8e:	d010      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f94:	d816      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01d      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f9e:	d111      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 ff84 	bl	8006eb4 <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fb0:	e012      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3324      	adds	r3, #36	; 0x24
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f82d 	bl	8007018 <RCCEx_PLL3_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fc2:	e009      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc8:	e006      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fca:	bf00      	nop
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fec:	4901      	ldr	r1, [pc, #4]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d02f      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006010:	d00e      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006016:	d814      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800601c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006020:	d10f      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006022:	4baf      	ldr	r3, [pc, #700]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	4aae      	ldr	r2, [pc, #696]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800602c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800602e:	e00c      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f000 ff3c 	bl	8006eb4 <RCCEx_PLL2_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
      break;
 8006046:	e000      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006050:	4ba3      	ldr	r3, [pc, #652]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605c:	49a0      	ldr	r1, [pc, #640]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800605e:	4313      	orrs	r3, r2
 8006060:	650b      	str	r3, [r1, #80]	; 0x50
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d032      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	2b03      	cmp	r3, #3
 800607a:	d81b      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060bb 	.word	0x080060bb
 8006088:	08006095 	.word	0x08006095
 800608c:	080060a3 	.word	0x080060a3
 8006090:	080060bb 	.word	0x080060bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006094:	4b92      	ldr	r3, [pc, #584]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a91      	ldr	r2, [pc, #580]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800609a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060a0:	e00c      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 ff03 	bl	8006eb4 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
      break;
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80060ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060c2:	4b87      	ldr	r3, [pc, #540]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c6:	f023 0203 	bic.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	4984      	ldr	r1, [pc, #528]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060d4:	e001      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8086 	beq.w	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e8:	4b7e      	ldr	r3, [pc, #504]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a7d      	ldr	r2, [pc, #500]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060f4:	f7fd f978 	bl	80033e8 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060fa:	e009      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fc:	f7fd f974 	bl	80033e8 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d902      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	75fb      	strb	r3, [r7, #23]
        break;
 800610e:	e005      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006110:	4b74      	ldr	r3, [pc, #464]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ef      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d166      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006122:	4b6f      	ldr	r3, [pc, #444]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800612c:	4053      	eors	r3, r2
 800612e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006136:	4b6a      	ldr	r3, [pc, #424]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006140:	4b67      	ldr	r3, [pc, #412]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a66      	ldr	r2, [pc, #408]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800614c:	4b64      	ldr	r3, [pc, #400]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	4a63      	ldr	r2, [pc, #396]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006156:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006158:	4a61      	ldr	r2, [pc, #388]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006168:	d115      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fd f93d 	bl	80033e8 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006170:	e00b      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7fd f939 	bl	80033e8 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	4293      	cmp	r3, r2
 8006182:	d902      	bls.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	75fb      	strb	r3, [r7, #23]
            break;
 8006188:	e005      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800618a:	4b55      	ldr	r3, [pc, #340]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0ed      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d126      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d10d      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80061ac:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ba:	0919      	lsrs	r1, r3, #4
 80061bc:	4b4a      	ldr	r3, [pc, #296]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80061be:	400b      	ands	r3, r1
 80061c0:	4947      	ldr	r1, [pc, #284]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]
 80061c6:	e005      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80061c8:	4b45      	ldr	r3, [pc, #276]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4a44      	ldr	r2, [pc, #272]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061d2:	6113      	str	r3, [r2, #16]
 80061d4:	4b42      	ldr	r3, [pc, #264]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e2:	493f      	ldr	r1, [pc, #252]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	670b      	str	r3, [r1, #112]	; 0x70
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	75bb      	strb	r3, [r7, #22]
 80061ee:	e001      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8085 	beq.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006206:	2b28      	cmp	r3, #40	; 0x28
 8006208:	d866      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	080062ed 	.word	0x080062ed
 8006214:	080062d9 	.word	0x080062d9
 8006218:	080062d9 	.word	0x080062d9
 800621c:	080062d9 	.word	0x080062d9
 8006220:	080062d9 	.word	0x080062d9
 8006224:	080062d9 	.word	0x080062d9
 8006228:	080062d9 	.word	0x080062d9
 800622c:	080062d9 	.word	0x080062d9
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080062d9 	.word	0x080062d9
 8006238:	080062d9 	.word	0x080062d9
 800623c:	080062d9 	.word	0x080062d9
 8006240:	080062d9 	.word	0x080062d9
 8006244:	080062d9 	.word	0x080062d9
 8006248:	080062d9 	.word	0x080062d9
 800624c:	080062d9 	.word	0x080062d9
 8006250:	080062c7 	.word	0x080062c7
 8006254:	080062d9 	.word	0x080062d9
 8006258:	080062d9 	.word	0x080062d9
 800625c:	080062d9 	.word	0x080062d9
 8006260:	080062d9 	.word	0x080062d9
 8006264:	080062d9 	.word	0x080062d9
 8006268:	080062d9 	.word	0x080062d9
 800626c:	080062d9 	.word	0x080062d9
 8006270:	080062ed 	.word	0x080062ed
 8006274:	080062d9 	.word	0x080062d9
 8006278:	080062d9 	.word	0x080062d9
 800627c:	080062d9 	.word	0x080062d9
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062d9 	.word	0x080062d9
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062ed 	.word	0x080062ed
 8006294:	080062d9 	.word	0x080062d9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062ed 	.word	0x080062ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	2101      	movs	r1, #1
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fdfa 	bl	8006eb4 <RCCEx_PLL2_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062c4:	e013      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3324      	adds	r3, #36	; 0x24
 80062ca:	2101      	movs	r1, #1
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fea3 	bl	8007018 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062d6:	e00a      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	e007      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80062de:	bf00      	nop
 80062e0:	58024400 	.word	0x58024400
 80062e4:	58024800 	.word	0x58024800
 80062e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80062ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062f4:	4b96      	ldr	r3, [pc, #600]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006300:	4993      	ldr	r1, [pc, #588]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	654b      	str	r3, [r1, #84]	; 0x54
 8006306:	e001      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d038      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	2b05      	cmp	r3, #5
 800631e:	d821      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800636b 	.word	0x0800636b
 800632c:	08006341 	.word	0x08006341
 8006330:	08006353 	.word	0x08006353
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800636b 	.word	0x0800636b
 800633c:	0800636b 	.word	0x0800636b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fdb4 	bl	8006eb4 <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006350:	e00c      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fe5d 	bl	8007018 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e000      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800636a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006372:	4b77      	ldr	r3, [pc, #476]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	f023 0207 	bic.w	r2, r3, #7
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637e:	4974      	ldr	r1, [pc, #464]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006380:	4313      	orrs	r3, r2
 8006382:	654b      	str	r3, [r1, #84]	; 0x54
 8006384:	e001      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d03a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	2b05      	cmp	r3, #5
 800639e:	d821      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063eb 	.word	0x080063eb
 80063ac:	080063c1 	.word	0x080063c1
 80063b0:	080063d3 	.word	0x080063d3
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	080063eb 	.word	0x080063eb
 80063bc:	080063eb 	.word	0x080063eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	2101      	movs	r1, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fd74 	bl	8006eb4 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	2101      	movs	r1, #1
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fe1d 	bl	8007018 <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80063ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f2:	4b57      	ldr	r3, [pc, #348]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006400:	4953      	ldr	r1, [pc, #332]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006402:	4313      	orrs	r3, r2
 8006404:	658b      	str	r3, [r1, #88]	; 0x58
 8006406:	e001      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d04b      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006422:	d02e      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d828      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d02a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d822      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006436:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800643a:	d026      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800643c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006440:	d81c      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006446:	d010      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d816      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01d      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006456:	d111      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fd28 	bl	8006eb4 <RCCEx_PLL2_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006468:	e012      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3324      	adds	r3, #36	; 0x24
 800646e:	2102      	movs	r1, #2
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fdd1 	bl	8007018 <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800647a:	e009      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
      break;
 8006480:	e006      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a4:	492a      	ldr	r1, [pc, #168]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	654b      	str	r3, [r1, #84]	; 0x54
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d04d      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064c6:	d02e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80064c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064cc:	d828      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d02a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d822      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064de:	d026      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80064e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e4:	d81c      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	d010      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d816      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01d      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80064f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fa:	d111      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fcd6 	bl	8006eb4 <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800650c:	e012      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fd7f 	bl	8007018 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800651e:	e009      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006526:	bf00      	nop
 8006528:	e004      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800652a:	bf00      	nop
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800653c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006548:	4901      	ldr	r1, [pc, #4]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	658b      	str	r3, [r1, #88]	; 0x58
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d04b      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800656e:	d02e      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006570:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006574:	d828      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d02a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d822      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006582:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006586:	d026      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006588:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800658c:	d81c      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800658e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006592:	d010      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006598:	d816      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01d      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a2:	d111      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fc82 	bl	8006eb4 <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065b4:	e012      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fd2b 	bl	8007018 <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065c6:	e009      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	e006      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065ce:	bf00      	nop
 80065d0:	e004      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065d2:	bf00      	nop
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065e2:	4b9d      	ldr	r3, [pc, #628]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f0:	4999      	ldr	r1, [pc, #612]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	658b      	str	r3, [r1, #88]	; 0x58
 80065f6:	e001      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	d10a      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fcfc 	bl	8007018 <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800662a:	4b8b      	ldr	r3, [pc, #556]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006638:	4987      	ldr	r1, [pc, #540]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800663a:	4313      	orrs	r3, r2
 800663c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3324      	adds	r3, #36	; 0x24
 800665a:	2102      	movs	r1, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fcdb 	bl	8007018 <RCCEx_PLL3_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800666c:	4b7a      	ldr	r3, [pc, #488]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667a:	4977      	ldr	r1, [pc, #476]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800667c:	4313      	orrs	r3, r2
 800667e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d034      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006696:	d01d      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800669c:	d817      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80066a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80066a8:	e011      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fbff 	bl	8006eb4 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066ba:	e00c      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3324      	adds	r3, #36	; 0x24
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fca8 	bl	8007018 <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
      break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80066d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066dc:	4b5e      	ldr	r3, [pc, #376]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066ea:	495b      	ldr	r1, [pc, #364]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	658b      	str	r3, [r1, #88]	; 0x58
 80066f0:	e001      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d033      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800670c:	d01c      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800670e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006712:	d816      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006718:	d003      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800671a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800671e:	d007      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006720:	e00f      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006722:	4b4d      	ldr	r3, [pc, #308]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	4a4c      	ldr	r2, [pc, #304]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800672e:	e00c      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3324      	adds	r3, #36	; 0x24
 8006734:	2101      	movs	r1, #1
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fc6e 	bl	8007018 <RCCEx_PLL3_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006740:	e003      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
      break;
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006750:	4b41      	ldr	r3, [pc, #260]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675e:	493e      	ldr	r1, [pc, #248]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006760:	4313      	orrs	r3, r2
 8006762:	654b      	str	r3, [r1, #84]	; 0x54
 8006764:	e001      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d029      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006782:	d007      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006784:	e00f      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	4a33      	ldr	r2, [pc, #204]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800678c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006792:	e00b      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fb8a 	bl	8006eb4 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]
      break;
 80067aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067b2:	4b29      	ldr	r3, [pc, #164]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067be:	4926      	ldr	r1, [pc, #152]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067c4:	e001      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3324      	adds	r3, #36	; 0x24
 80067da:	2102      	movs	r1, #2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fc1b 	bl	8007018 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d033      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006800:	d017      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006806:	d811      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680c:	d013      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800680e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006812:	d80b      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d010      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681c:	d106      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800682a:	e007      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	e004      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800683a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10c      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684e:	4902      	ldr	r1, [pc, #8]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006850:	4313      	orrs	r3, r2
 8006852:	654b      	str	r3, [r1, #84]	; 0x54
 8006854:	e004      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800686c:	4b31      	ldr	r3, [pc, #196]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	492e      	ldr	r1, [pc, #184]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800687a:	4313      	orrs	r3, r2
 800687c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800688a:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006898:	4926      	ldr	r1, [pc, #152]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800689a:	4313      	orrs	r3, r2
 800689c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068aa:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b6:	491f      	ldr	r1, [pc, #124]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00d      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d2:	6113      	str	r3, [r2, #16]
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068de:	4915      	ldr	r1, [pc, #84]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da08      	bge.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	490e      	ldr	r1, [pc, #56]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800691a:	4313      	orrs	r3, r2
 800691c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800691e:	7dbb      	ldrb	r3, [r7, #22]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400

08006938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800693c:	f7ff f85a 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4904      	ldr	r1, [pc, #16]	; (8006960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	58024400 	.word	0x58024400
 8006960:	0800f320 	.word	0x0800f320

08006964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800696c:	4ba1      	ldr	r3, [pc, #644]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006976:	4b9f      	ldr	r3, [pc, #636]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	0b1b      	lsrs	r3, r3, #12
 800697c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006982:	4b9c      	ldr	r3, [pc, #624]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800698e:	4b99      	ldr	r3, [pc, #612]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8111 	beq.w	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	f000 8083 	beq.w	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	f200 80a1 	bhi.w	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d056      	beq.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069ce:	e099      	b.n	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d0:	4b88      	ldr	r3, [pc, #544]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d02d      	beq.n	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069dc:	4b85      	ldr	r3, [pc, #532]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	4a84      	ldr	r2, [pc, #528]	; (8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b7b      	ldr	r3, [pc, #492]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a36:	e087      	b.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b6a      	ldr	r3, [pc, #424]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a7a:	e065      	b.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006abe:	e043      	b.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b48      	ldr	r3, [pc, #288]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b02:	e021      	b.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006b48:	4b2a      	ldr	r3, [pc, #168]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	0a5b      	lsrs	r3, r3, #9
 8006b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6e:	ee17 2a90 	vmov	r2, s15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b76:	4b1f      	ldr	r3, [pc, #124]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b9c:	ee17 2a90 	vmov	r2, s15
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ba4:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006bd2:	e008      	b.n	8006be6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	609a      	str	r2, [r3, #8]
}
 8006be6:	bf00      	nop
 8006be8:	3724      	adds	r7, #36	; 0x24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	58024400 	.word	0x58024400
 8006bf8:	03d09000 	.word	0x03d09000
 8006bfc:	46000000 	.word	0x46000000
 8006c00:	4c742400 	.word	0x4c742400
 8006c04:	4a742400 	.word	0x4a742400
 8006c08:	4af42400 	.word	0x4af42400

08006c0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b089      	sub	sp, #36	; 0x24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c14:	4ba1      	ldr	r3, [pc, #644]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006c1e:	4b9f      	ldr	r3, [pc, #636]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	0d1b      	lsrs	r3, r3, #20
 8006c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c2a:	4b9c      	ldr	r3, [pc, #624]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c36:	4b99      	ldr	r3, [pc, #612]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	08db      	lsrs	r3, r3, #3
 8006c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8111 	beq.w	8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	f000 8083 	beq.w	8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	f200 80a1 	bhi.w	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d056      	beq.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c76:	e099      	b.n	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c78:	4b88      	ldr	r3, [pc, #544]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d02d      	beq.n	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c84:	4b85      	ldr	r3, [pc, #532]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	08db      	lsrs	r3, r3, #3
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	4a84      	ldr	r2, [pc, #528]	; (8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cde:	e087      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d22:	e065      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d66:	e043      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006daa:	e021      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006df0:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	0a5b      	lsrs	r3, r3, #9
 8006df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e16:	ee17 2a90 	vmov	r2, s15
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006e1e:	4b1f      	ldr	r3, [pc, #124]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e44:	ee17 2a90 	vmov	r2, s15
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006e4c:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	0e1b      	lsrs	r3, r3, #24
 8006e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e72:	ee17 2a90 	vmov	r2, s15
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e7a:	e008      	b.n	8006e8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	609a      	str	r2, [r3, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	3724      	adds	r7, #36	; 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	03d09000 	.word	0x03d09000
 8006ea4:	46000000 	.word	0x46000000
 8006ea8:	4c742400 	.word	0x4c742400
 8006eac:	4a742400 	.word	0x4a742400
 8006eb0:	4af42400 	.word	0x4af42400

08006eb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ec2:	4b53      	ldr	r3, [pc, #332]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d101      	bne.n	8006ed2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e099      	b.n	8007006 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ed2:	4b4f      	ldr	r3, [pc, #316]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4e      	ldr	r2, [pc, #312]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006ed8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ede:	f7fc fa83 	bl	80033e8 <HAL_GetTick>
 8006ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ee6:	f7fc fa7f 	bl	80033e8 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e086      	b.n	8007006 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ef8:	4b45      	ldr	r3, [pc, #276]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f04:	4b42      	ldr	r3, [pc, #264]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	493f      	ldr	r1, [pc, #252]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	628b      	str	r3, [r1, #40]	; 0x28
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	025b      	lsls	r3, r3, #9
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	041b      	lsls	r3, r3, #16
 8006f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	061b      	lsls	r3, r3, #24
 8006f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f48:	4931      	ldr	r1, [pc, #196]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f4e:	4b30      	ldr	r3, [pc, #192]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	492d      	ldr	r1, [pc, #180]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f60:	4b2b      	ldr	r3, [pc, #172]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	f023 0220 	bic.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4928      	ldr	r1, [pc, #160]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f72:	4b27      	ldr	r3, [pc, #156]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a26      	ldr	r2, [pc, #152]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	f023 0310 	bic.w	r3, r3, #16
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f7e:	4b24      	ldr	r3, [pc, #144]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <RCCEx_PLL2_Config+0x160>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	69d2      	ldr	r2, [r2, #28]
 8006f8a:	00d2      	lsls	r2, r2, #3
 8006f8c:	4920      	ldr	r1, [pc, #128]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f92:	4b1f      	ldr	r3, [pc, #124]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	4a1e      	ldr	r2, [pc, #120]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006f98:	f043 0310 	orr.w	r3, r3, #16
 8006f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a19      	ldr	r2, [pc, #100]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fb0:	e00f      	b.n	8006fd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a14      	ldr	r2, [pc, #80]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fc4:	e005      	b.n	8006fd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	4a11      	ldr	r2, [pc, #68]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fde:	f7fc fa03 	bl	80033e8 <HAL_GetTick>
 8006fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fe4:	e008      	b.n	8006ff8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006fe6:	f7fc f9ff 	bl	80033e8 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	58024400 	.word	0x58024400
 8007014:	ffff0007 	.word	0xffff0007

08007018 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007026:	4b53      	ldr	r3, [pc, #332]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d101      	bne.n	8007036 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e099      	b.n	800716a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007036:	4b4f      	ldr	r3, [pc, #316]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800703c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007042:	f7fc f9d1 	bl	80033e8 <HAL_GetTick>
 8007046:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007048:	e008      	b.n	800705c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800704a:	f7fc f9cd 	bl	80033e8 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e086      	b.n	800716a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800705c:	4b45      	ldr	r3, [pc, #276]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f0      	bne.n	800704a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007068:	4b42      	ldr	r3, [pc, #264]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	051b      	lsls	r3, r3, #20
 8007076:	493f      	ldr	r1, [pc, #252]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007078:	4313      	orrs	r3, r2
 800707a:	628b      	str	r3, [r1, #40]	; 0x28
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	3b01      	subs	r3, #1
 8007082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	3b01      	subs	r3, #1
 800708c:	025b      	lsls	r3, r3, #9
 800708e:	b29b      	uxth	r3, r3
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	3b01      	subs	r3, #1
 8007098:	041b      	lsls	r3, r3, #16
 800709a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070ac:	4931      	ldr	r1, [pc, #196]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070b2:	4b30      	ldr	r3, [pc, #192]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	492d      	ldr	r1, [pc, #180]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80070c4:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	4928      	ldr	r1, [pc, #160]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070d6:	4b27      	ldr	r3, [pc, #156]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	4a26      	ldr	r2, [pc, #152]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070e2:	4b24      	ldr	r3, [pc, #144]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e6:	4b24      	ldr	r3, [pc, #144]	; (8007178 <RCCEx_PLL3_Config+0x160>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	69d2      	ldr	r2, [r2, #28]
 80070ee:	00d2      	lsls	r2, r2, #3
 80070f0:	4920      	ldr	r1, [pc, #128]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070f6:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 80070fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4a19      	ldr	r2, [pc, #100]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800710e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007114:	e00f      	b.n	8007136 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d106      	bne.n	800712a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800711c:	4b15      	ldr	r3, [pc, #84]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007122:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007128:	e005      	b.n	8007136 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800712a:	4b12      	ldr	r3, [pc, #72]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	4a11      	ldr	r2, [pc, #68]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007134:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800713c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007142:	f7fc f951 	bl	80033e8 <HAL_GetTick>
 8007146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007148:	e008      	b.n	800715c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800714a:	f7fc f94d 	bl	80033e8 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e006      	b.n	800716a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <RCCEx_PLL3_Config+0x15c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0f0      	beq.n	800714a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	58024400 	.word	0x58024400
 8007178:	ffff0007 	.word	0xffff0007

0800717c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0f1      	b.n	8007372 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a78      	ldr	r2, [pc, #480]	; (800737c <HAL_SPI_Init+0x200>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00f      	beq.n	80071be <HAL_SPI_Init+0x42>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a77      	ldr	r2, [pc, #476]	; (8007380 <HAL_SPI_Init+0x204>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00a      	beq.n	80071be <HAL_SPI_Init+0x42>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a75      	ldr	r2, [pc, #468]	; (8007384 <HAL_SPI_Init+0x208>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d005      	beq.n	80071be <HAL_SPI_Init+0x42>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d901      	bls.n	80071be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0d9      	b.n	8007372 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 ff66 	bl	8008090 <SPI_GetPacketSize>
 80071c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6c      	ldr	r2, [pc, #432]	; (800737c <HAL_SPI_Init+0x200>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00c      	beq.n	80071ea <HAL_SPI_Init+0x6e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a6a      	ldr	r2, [pc, #424]	; (8007380 <HAL_SPI_Init+0x204>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <HAL_SPI_Init+0x6e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a69      	ldr	r2, [pc, #420]	; (8007384 <HAL_SPI_Init+0x208>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_Init+0x6e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d811      	bhi.n	800720e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071ee:	4a63      	ldr	r2, [pc, #396]	; (800737c <HAL_SPI_Init+0x200>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a61      	ldr	r2, [pc, #388]	; (8007380 <HAL_SPI_Init+0x204>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_SPI_Init+0x8c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a60      	ldr	r2, [pc, #384]	; (8007384 <HAL_SPI_Init+0x208>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d104      	bne.n	8007212 <HAL_SPI_Init+0x96>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b10      	cmp	r3, #16
 800720c:	d901      	bls.n	8007212 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0af      	b.n	8007372 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fb fdd6 	bl	8002dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800724e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007258:	d119      	bne.n	800728e <HAL_SPI_Init+0x112>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007262:	d103      	bne.n	800726c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800727c:	d107      	bne.n	800728e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69da      	ldr	r2, [r3, #28]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	431a      	orrs	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	ea42 0103 	orr.w	r1, r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ee:	ea42 0103 	orr.w	r1, r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d113      	bne.n	800732e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007318:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800732c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0201 	bic.w	r2, r2, #1
 800733c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40013000 	.word	0x40013000
 8007380:	40003800 	.word	0x40003800
 8007384:	40003c00 	.word	0x40003c00

08007388 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3320      	adds	r3, #32
 800739e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_SPI_Transmit+0x2a>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e1d7      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ba:	f7fc f815 	bl	80033e8 <HAL_GetTick>
 80073be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d007      	beq.n	80073dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80073cc:	2302      	movs	r3, #2
 80073ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80073d8:	7efb      	ldrb	r3, [r7, #27]
 80073da:	e1c2      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_SPI_Transmit+0x60>
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80073f4:	7efb      	ldrb	r3, [r7, #27]
 80073f6:	e1b4      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2203      	movs	r2, #3
 80073fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007448:	d107      	bne.n	800745a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007458:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b96      	ldr	r3, [pc, #600]	; (80076bc <HAL_SPI_Transmit+0x334>)
 8007462:	4013      	ands	r3, r2
 8007464:	88f9      	ldrh	r1, [r7, #6]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	430b      	orrs	r3, r1
 800746c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007486:	d107      	bne.n	8007498 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b0f      	cmp	r3, #15
 800749e:	d947      	bls.n	8007530 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80074a0:	e03f      	b.n	8007522 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d114      	bne.n	80074da <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80074d8:	e023      	b.n	8007522 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074da:	f7fb ff85 	bl	80033e8 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d803      	bhi.n	80074f2 <HAL_SPI_Transmit+0x16a>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d102      	bne.n	80074f8 <HAL_SPI_Transmit+0x170>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d114      	bne.n	8007522 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fcfb 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e11f      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1b9      	bne.n	80074a2 <HAL_SPI_Transmit+0x11a>
 800752e:	e0f2      	b.n	8007716 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b07      	cmp	r3, #7
 8007536:	f240 80e7 	bls.w	8007708 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800753a:	e05d      	b.n	80075f8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b02      	cmp	r3, #2
 8007548:	d132      	bne.n	80075b0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	d918      	bls.n	8007588 <HAL_SPI_Transmit+0x200>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d014      	beq.n	8007588 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b02      	subs	r3, #2
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007586:	e037      	b.n	80075f8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007596:	1c9a      	adds	r2, r3, #2
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80075ae:	e023      	b.n	80075f8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b0:	f7fb ff1a 	bl	80033e8 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d803      	bhi.n	80075c8 <HAL_SPI_Transmit+0x240>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x246>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d114      	bne.n	80075f8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fc90 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0b4      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d19b      	bne.n	800753c <HAL_SPI_Transmit+0x1b4>
 8007604:	e087      	b.n	8007716 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b02      	cmp	r3, #2
 8007612:	d155      	bne.n	80076c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b03      	cmp	r3, #3
 800761e:	d918      	bls.n	8007652 <HAL_SPI_Transmit+0x2ca>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d914      	bls.n	8007652 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	1d1a      	adds	r2, r3, #4
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b04      	subs	r3, #4
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007650:	e05a      	b.n	8007708 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d917      	bls.n	800768e <HAL_SPI_Transmit+0x306>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b02      	subs	r3, #2
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800768c:	e03c      	b.n	8007708 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3320      	adds	r3, #32
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80076b8:	e026      	b.n	8007708 <HAL_SPI_Transmit+0x380>
 80076ba:	bf00      	nop
 80076bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076c0:	f7fb fe92 	bl	80033e8 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d803      	bhi.n	80076d8 <HAL_SPI_Transmit+0x350>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d102      	bne.n	80076de <HAL_SPI_Transmit+0x356>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d114      	bne.n	8007708 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fc08 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e02c      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	f47f af78 	bne.w	8007606 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	2108      	movs	r1, #8
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fc87 	bl	8008034 <SPI_WaitOnFlagUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fbd9 	bl	8007ef4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007760:	7efb      	ldrb	r3, [r7, #27]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop

0800776c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3330      	adds	r3, #48	; 0x30
 8007786:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007790:	d112      	bne.n	80077b8 <HAL_SPI_Receive+0x4c>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10e      	bne.n	80077b8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2204      	movs	r2, #4
 800779e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f978 	bl	8007aa4 <HAL_SPI_TransmitReceive>
 80077b4:	4603      	mov	r3, r0
 80077b6:	e16f      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_SPI_Receive+0x5a>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e168      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ce:	f7fb fe0b 	bl	80033e8 <HAL_GetTick>
 80077d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d007      	beq.n	80077f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
 80077e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077ec:	7ffb      	ldrb	r3, [r7, #31]
 80077ee:	e153      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Receive+0x90>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007808:	7ffb      	ldrb	r3, [r7, #31]
 800780a:	e145      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2204      	movs	r2, #4
 8007810:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800785c:	d107      	bne.n	800786e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800786c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	4b8a      	ldr	r3, [pc, #552]	; (8007aa0 <HAL_SPI_Receive+0x334>)
 8007876:	4013      	ands	r3, r2
 8007878:	88f9      	ldrh	r1, [r7, #6]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	430b      	orrs	r3, r1
 8007880:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800789a:	d107      	bne.n	80078ac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	d948      	bls.n	8007946 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80078b4:	e040      	b.n	8007938 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	f248 0308 	movw	r3, #32776	; 0x8008
 80078c0:	4013      	ands	r3, r2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d014      	beq.n	80078f0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80078d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80078ee:	e023      	b.n	8007938 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f0:	f7fb fd7a 	bl	80033e8 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d803      	bhi.n	8007908 <HAL_SPI_Receive+0x19c>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d102      	bne.n	800790e <HAL_SPI_Receive+0x1a2>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d114      	bne.n	8007938 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 faf0 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e0af      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1b8      	bne.n	80078b6 <HAL_SPI_Receive+0x14a>
 8007944:	e095      	b.n	8007a72 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2b07      	cmp	r3, #7
 800794c:	f240 808b 	bls.w	8007a66 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007950:	e03f      	b.n	80079d2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d114      	bne.n	800798a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	8812      	ldrh	r2, [r2, #0]
 8007968:	b292      	uxth	r2, r2
 800796a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007970:	1c9a      	adds	r2, r3, #2
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007988:	e023      	b.n	80079d2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798a:	f7fb fd2d 	bl	80033e8 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d803      	bhi.n	80079a2 <HAL_SPI_Receive+0x236>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d102      	bne.n	80079a8 <HAL_SPI_Receive+0x23c>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d114      	bne.n	80079d2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 faa3 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e062      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1b9      	bne.n	8007952 <HAL_SPI_Receive+0x1e6>
 80079de:	e048      	b.n	8007a72 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d117      	bne.n	8007a1e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007a1c:	e023      	b.n	8007a66 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a1e:	f7fb fce3 	bl	80033e8 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d803      	bhi.n	8007a36 <HAL_SPI_Receive+0x2ca>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d102      	bne.n	8007a3c <HAL_SPI_Receive+0x2d0>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d114      	bne.n	8007a66 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fa59 	bl	8007ef4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e018      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1b6      	bne.n	80079e0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fa3e 	bl	8007ef4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	ffff0000 	.word	0xffff0000

08007aa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08e      	sub	sp, #56	; 0x38
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3320      	adds	r3, #32
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3330      	adds	r3, #48	; 0x30
 8007ac6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x32>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e209      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ade:	f7fb fc83 	bl	80033e8 <HAL_GetTick>
 8007ae2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007ae4:	887b      	ldrh	r3, [r7, #2]
 8007ae6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8007ae8:	887b      	ldrh	r3, [r7, #2]
 8007aea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007af2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007afa:	7efb      	ldrb	r3, [r7, #27]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d014      	beq.n	8007b2a <HAL_SPI_TransmitReceive+0x86>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b06:	d106      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007b10:	7efb      	ldrb	r3, [r7, #27]
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d009      	beq.n	8007b2a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007b16:	2302      	movs	r3, #2
 8007b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b28:	e1df      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x98>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x98>
 8007b36:	887b      	ldrh	r3, [r7, #2]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d109      	bne.n	8007b50 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	e1cc      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d003      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2205      	movs	r2, #5
 8007b60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	887a      	ldrh	r2, [r7, #2]
 8007b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	887a      	ldrh	r2, [r7, #2]
 8007b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	887a      	ldrh	r2, [r7, #2]
 8007b8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	4b82      	ldr	r3, [pc, #520]	; (8007db4 <HAL_SPI_TransmitReceive+0x310>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	8879      	ldrh	r1, [r7, #2]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd0:	d107      	bne.n	8007be2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	d970      	bls.n	8007ccc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bea:	e068      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d11a      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x18c>
 8007bfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	f248 0308 	movw	r3, #32776	; 0x8008
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x1d2>
 8007c40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d017      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c74:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c76:	f7fb fbb7 	bl	80033e8 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d803      	bhi.n	8007c8e <HAL_SPI_TransmitReceive+0x1ea>
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d102      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x1f0>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d114      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f92d 	bl	8007ef4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e115      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007cbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d193      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x148>
 8007cc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d190      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x148>
 8007cca:	e0e7      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b07      	cmp	r3, #7
 8007cd2:	f240 80dd 	bls.w	8007e90 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007cd6:	e066      	b.n	8007da6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d119      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x276>
 8007ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf0:	881a      	ldrh	r2, [r3, #0]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d11a      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x2ba>
 8007d28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d017      	beq.n	8007d5e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d32:	6a3a      	ldr	r2, [r7, #32]
 8007d34:	8812      	ldrh	r2, [r2, #0]
 8007d36:	b292      	uxth	r2, r2
 8007d38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d5e:	f7fb fb43 	bl	80033e8 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d803      	bhi.n	8007d76 <HAL_SPI_TransmitReceive+0x2d2>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d102      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x2d8>
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d114      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f8b9 	bl	8007ef4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e0a1      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d195      	bne.n	8007cd8 <HAL_SPI_TransmitReceive+0x234>
 8007dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d192      	bne.n	8007cd8 <HAL_SPI_TransmitReceive+0x234>
 8007db2:	e073      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x3f8>
 8007db4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d11b      	bne.n	8007dfe <HAL_SPI_TransmitReceive+0x35a>
 8007dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3320      	adds	r3, #32
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11d      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x3a4>
 8007e0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e46:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e48:	f7fb face 	bl	80033e8 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d803      	bhi.n	8007e60 <HAL_SPI_TransmitReceive+0x3bc>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d102      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x3c2>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d114      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f844 	bl	8007ef4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e02c      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d190      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x314>
 8007e96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d18d      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2108      	movs	r1, #8
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f8c4 	bl	8008034 <SPI_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f816 	bl	8007ef4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e001      	b.n	8007eea <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3730      	adds	r7, #48	; 0x30
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop

08007ef4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0210 	orr.w	r2, r2, #16
 8007f22:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0201 	bic.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6919      	ldr	r1, [r3, #16]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b3c      	ldr	r3, [pc, #240]	; (8008030 <SPI_CloseTransfer+0x13c>)
 8007f40:	400b      	ands	r3, r1
 8007f42:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f52:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d014      	beq.n	8007f8a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0220 	orr.w	r2, r2, #32
 8007f88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d014      	beq.n	8007fc0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00f      	beq.n	8007fc0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa6:	f043 0204 	orr.w	r2, r3, #4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fbe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00f      	beq.n	8007fea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00f      	beq.n	8008014 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffa:	f043 0208 	orr.w	r2, r3, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008012:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008024:	bf00      	nop
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	fffffc90 	.word	0xfffffc90

08008034 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008044:	e010      	b.n	8008068 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008046:	f7fb f9cf 	bl	80033e8 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	429a      	cmp	r2, r3
 8008054:	d803      	bhi.n	800805e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d102      	bne.n	8008064 <SPI_WaitOnFlagUntilTimeout+0x30>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e00f      	b.n	8008088 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695a      	ldr	r2, [r3, #20]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4013      	ands	r3, r2
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	bf0c      	ite	eq
 8008078:	2301      	moveq	r3, #1
 800807a:	2300      	movne	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	429a      	cmp	r2, r3
 8008084:	d0df      	beq.n	8008046 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	3301      	adds	r3, #1
 80080a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3307      	adds	r3, #7
 80080ae:	08db      	lsrs	r3, r3, #3
 80080b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e049      	b.n	800816c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d106      	bne.n	80080f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fa fed9 	bl	8002ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f000 fab9 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e049      	b.n	800821a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f841 	bl	8008222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f000 fa62 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d109      	bne.n	800825c <HAL_TIM_PWM_Start+0x24>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	bf14      	ite	ne
 8008254:	2301      	movne	r3, #1
 8008256:	2300      	moveq	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e03c      	b.n	80082d6 <HAL_TIM_PWM_Start+0x9e>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d109      	bne.n	8008276 <HAL_TIM_PWM_Start+0x3e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b01      	cmp	r3, #1
 800826c:	bf14      	ite	ne
 800826e:	2301      	movne	r3, #1
 8008270:	2300      	moveq	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	e02f      	b.n	80082d6 <HAL_TIM_PWM_Start+0x9e>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d109      	bne.n	8008290 <HAL_TIM_PWM_Start+0x58>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b01      	cmp	r3, #1
 8008286:	bf14      	ite	ne
 8008288:	2301      	movne	r3, #1
 800828a:	2300      	moveq	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	e022      	b.n	80082d6 <HAL_TIM_PWM_Start+0x9e>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b0c      	cmp	r3, #12
 8008294:	d109      	bne.n	80082aa <HAL_TIM_PWM_Start+0x72>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	bf14      	ite	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	2300      	moveq	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	e015      	b.n	80082d6 <HAL_TIM_PWM_Start+0x9e>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d109      	bne.n	80082c4 <HAL_TIM_PWM_Start+0x8c>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	bf14      	ite	ne
 80082bc:	2301      	movne	r3, #1
 80082be:	2300      	moveq	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	e008      	b.n	80082d6 <HAL_TIM_PWM_Start+0x9e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e0a1      	b.n	8008422 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <HAL_TIM_PWM_Start+0xb6>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ec:	e023      	b.n	8008336 <HAL_TIM_PWM_Start+0xfe>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_PWM_Start+0xc6>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082fc:	e01b      	b.n	8008336 <HAL_TIM_PWM_Start+0xfe>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b08      	cmp	r3, #8
 8008302:	d104      	bne.n	800830e <HAL_TIM_PWM_Start+0xd6>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800830c:	e013      	b.n	8008336 <HAL_TIM_PWM_Start+0xfe>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d104      	bne.n	800831e <HAL_TIM_PWM_Start+0xe6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800831c:	e00b      	b.n	8008336 <HAL_TIM_PWM_Start+0xfe>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b10      	cmp	r3, #16
 8008322:	d104      	bne.n	800832e <HAL_TIM_PWM_Start+0xf6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800832c:	e003      	b.n	8008336 <HAL_TIM_PWM_Start+0xfe>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2201      	movs	r2, #1
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fd0c 	bl	8008d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a38      	ldr	r2, [pc, #224]	; (800842c <HAL_TIM_PWM_Start+0x1f4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_TIM_PWM_Start+0x13e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a37      	ldr	r2, [pc, #220]	; (8008430 <HAL_TIM_PWM_Start+0x1f8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIM_PWM_Start+0x13e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a35      	ldr	r2, [pc, #212]	; (8008434 <HAL_TIM_PWM_Start+0x1fc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_TIM_PWM_Start+0x13e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a34      	ldr	r2, [pc, #208]	; (8008438 <HAL_TIM_PWM_Start+0x200>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIM_PWM_Start+0x13e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a32      	ldr	r2, [pc, #200]	; (800843c <HAL_TIM_PWM_Start+0x204>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d101      	bne.n	800837a <HAL_TIM_PWM_Start+0x142>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <HAL_TIM_PWM_Start+0x144>
 800837a:	2300      	movs	r3, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800838e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a25      	ldr	r2, [pc, #148]	; (800842c <HAL_TIM_PWM_Start+0x1f4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d022      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a2:	d01d      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a25      	ldr	r2, [pc, #148]	; (8008440 <HAL_TIM_PWM_Start+0x208>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d018      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a24      	ldr	r2, [pc, #144]	; (8008444 <HAL_TIM_PWM_Start+0x20c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a22      	ldr	r2, [pc, #136]	; (8008448 <HAL_TIM_PWM_Start+0x210>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00e      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <HAL_TIM_PWM_Start+0x1f8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d009      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1e      	ldr	r2, [pc, #120]	; (800844c <HAL_TIM_PWM_Start+0x214>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x1a8>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a16      	ldr	r2, [pc, #88]	; (8008434 <HAL_TIM_PWM_Start+0x1fc>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d115      	bne.n	800840c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <HAL_TIM_PWM_Start+0x218>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b06      	cmp	r3, #6
 80083f0:	d015      	beq.n	800841e <HAL_TIM_PWM_Start+0x1e6>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f8:	d011      	beq.n	800841e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0201 	orr.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840a:	e008      	b.n	800841e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	e000      	b.n	8008420 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40010400 	.word	0x40010400
 8008434:	40014000 	.word	0x40014000
 8008438:	40014400 	.word	0x40014400
 800843c:	40014800 	.word	0x40014800
 8008440:	40000400 	.word	0x40000400
 8008444:	40000800 	.word	0x40000800
 8008448:	40000c00 	.word	0x40000c00
 800844c:	40001800 	.word	0x40001800
 8008450:	00010007 	.word	0x00010007

08008454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800846e:	2302      	movs	r3, #2
 8008470:	e0ff      	b.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b14      	cmp	r3, #20
 800847e:	f200 80f0 	bhi.w	8008662 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084dd 	.word	0x080084dd
 800848c:	08008663 	.word	0x08008663
 8008490:	08008663 	.word	0x08008663
 8008494:	08008663 	.word	0x08008663
 8008498:	0800851d 	.word	0x0800851d
 800849c:	08008663 	.word	0x08008663
 80084a0:	08008663 	.word	0x08008663
 80084a4:	08008663 	.word	0x08008663
 80084a8:	0800855f 	.word	0x0800855f
 80084ac:	08008663 	.word	0x08008663
 80084b0:	08008663 	.word	0x08008663
 80084b4:	08008663 	.word	0x08008663
 80084b8:	0800859f 	.word	0x0800859f
 80084bc:	08008663 	.word	0x08008663
 80084c0:	08008663 	.word	0x08008663
 80084c4:	08008663 	.word	0x08008663
 80084c8:	080085e1 	.word	0x080085e1
 80084cc:	08008663 	.word	0x08008663
 80084d0:	08008663 	.word	0x08008663
 80084d4:	08008663 	.word	0x08008663
 80084d8:	08008621 	.word	0x08008621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f964 	bl	80087b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0208 	orr.w	r2, r2, #8
 80084f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0204 	bic.w	r2, r2, #4
 8008506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6999      	ldr	r1, [r3, #24]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	619a      	str	r2, [r3, #24]
      break;
 800851a:	e0a5      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f9d4 	bl	80088d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6999      	ldr	r1, [r3, #24]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	021a      	lsls	r2, r3, #8
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	619a      	str	r2, [r3, #24]
      break;
 800855c:	e084      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fa3d 	bl	80089e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69da      	ldr	r2, [r3, #28]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0208 	orr.w	r2, r2, #8
 8008578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0204 	bic.w	r2, r2, #4
 8008588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69d9      	ldr	r1, [r3, #28]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	61da      	str	r2, [r3, #28]
      break;
 800859c:	e064      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 faa5 	bl	8008af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69d9      	ldr	r1, [r3, #28]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	021a      	lsls	r2, r3, #8
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	61da      	str	r2, [r3, #28]
      break;
 80085de:	e043      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 faee 	bl	8008bc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0208 	orr.w	r2, r2, #8
 80085fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0204 	bic.w	r2, r2, #4
 800860a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	691a      	ldr	r2, [r3, #16]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800861e:	e023      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fb32 	bl	8008c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800863a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	021a      	lsls	r2, r3, #8
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008660:	e002      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	75fb      	strb	r3, [r7, #23]
      break;
 8008666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008670:	7dfb      	ldrb	r3, [r7, #23]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d00f      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a3c      	ldr	r2, [pc, #240]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a3b      	ldr	r2, [pc, #236]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a3a      	ldr	r2, [pc, #232]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <TIM_Base_SetConfig+0x114>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086dc:	d01b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d017      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a2a      	ldr	r2, [pc, #168]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a26      	ldr	r2, [pc, #152]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d108      	bne.n	8008728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800871c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800

080087b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f023 0201 	bic.w	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4b37      	ldr	r3, [pc, #220]	; (80088b8 <TIM_OC1_SetConfig+0x108>)
 80087dc:	4013      	ands	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f023 0302 	bic.w	r3, r3, #2
 80087f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a2d      	ldr	r2, [pc, #180]	; (80088bc <TIM_OC1_SetConfig+0x10c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00f      	beq.n	800882c <TIM_OC1_SetConfig+0x7c>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <TIM_OC1_SetConfig+0x110>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <TIM_OC1_SetConfig+0x7c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a2b      	ldr	r2, [pc, #172]	; (80088c4 <TIM_OC1_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <TIM_OC1_SetConfig+0x7c>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <TIM_OC1_SetConfig+0x118>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_OC1_SetConfig+0x7c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a29      	ldr	r2, [pc, #164]	; (80088cc <TIM_OC1_SetConfig+0x11c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d10c      	bne.n	8008846 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f023 0308 	bic.w	r3, r3, #8
 8008832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f023 0304 	bic.w	r3, r3, #4
 8008844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a1c      	ldr	r2, [pc, #112]	; (80088bc <TIM_OC1_SetConfig+0x10c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00f      	beq.n	800886e <TIM_OC1_SetConfig+0xbe>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a1b      	ldr	r2, [pc, #108]	; (80088c0 <TIM_OC1_SetConfig+0x110>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00b      	beq.n	800886e <TIM_OC1_SetConfig+0xbe>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <TIM_OC1_SetConfig+0x114>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d007      	beq.n	800886e <TIM_OC1_SetConfig+0xbe>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <TIM_OC1_SetConfig+0x118>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_OC1_SetConfig+0xbe>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a18      	ldr	r2, [pc, #96]	; (80088cc <TIM_OC1_SetConfig+0x11c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d111      	bne.n	8008892 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800887c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	fffeff8f 	.word	0xfffeff8f
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800

080088d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f023 0210 	bic.w	r2, r3, #16
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4b34      	ldr	r3, [pc, #208]	; (80089cc <TIM_OC2_SetConfig+0xfc>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0320 	bic.w	r3, r3, #32
 800891a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a29      	ldr	r2, [pc, #164]	; (80089d0 <TIM_OC2_SetConfig+0x100>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <TIM_OC2_SetConfig+0x68>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <TIM_OC2_SetConfig+0x104>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d10d      	bne.n	8008954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800893e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a1e      	ldr	r2, [pc, #120]	; (80089d0 <TIM_OC2_SetConfig+0x100>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00f      	beq.n	800897c <TIM_OC2_SetConfig+0xac>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <TIM_OC2_SetConfig+0x104>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00b      	beq.n	800897c <TIM_OC2_SetConfig+0xac>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <TIM_OC2_SetConfig+0x108>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d007      	beq.n	800897c <TIM_OC2_SetConfig+0xac>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1b      	ldr	r2, [pc, #108]	; (80089dc <TIM_OC2_SetConfig+0x10c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <TIM_OC2_SetConfig+0xac>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a1a      	ldr	r2, [pc, #104]	; (80089e0 <TIM_OC2_SetConfig+0x110>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d113      	bne.n	80089a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800898a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	feff8fff 	.word	0xfeff8fff
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40010400 	.word	0x40010400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800

080089e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <TIM_OC3_SetConfig+0xf8>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <TIM_OC3_SetConfig+0xfc>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_OC3_SetConfig+0x66>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <TIM_OC3_SetConfig+0x100>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d10d      	bne.n	8008a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <TIM_OC3_SetConfig+0xfc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_OC3_SetConfig+0xaa>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1c      	ldr	r2, [pc, #112]	; (8008ae4 <TIM_OC3_SetConfig+0x100>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00b      	beq.n	8008a8e <TIM_OC3_SetConfig+0xaa>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1b      	ldr	r2, [pc, #108]	; (8008ae8 <TIM_OC3_SetConfig+0x104>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_OC3_SetConfig+0xaa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a1a      	ldr	r2, [pc, #104]	; (8008aec <TIM_OC3_SetConfig+0x108>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_OC3_SetConfig+0xaa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a19      	ldr	r2, [pc, #100]	; (8008af0 <TIM_OC3_SetConfig+0x10c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d113      	bne.n	8008ab6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	621a      	str	r2, [r3, #32]
}
 8008ad0:	bf00      	nop
 8008ad2:	371c      	adds	r7, #28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	fffeff8f 	.word	0xfffeff8f
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40010400 	.word	0x40010400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40014400 	.word	0x40014400
 8008af0:	40014800 	.word	0x40014800

08008af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4b24      	ldr	r3, [pc, #144]	; (8008bb0 <TIM_OC4_SetConfig+0xbc>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	031b      	lsls	r3, r3, #12
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <TIM_OC4_SetConfig+0xc0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00f      	beq.n	8008b74 <TIM_OC4_SetConfig+0x80>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <TIM_OC4_SetConfig+0xc4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00b      	beq.n	8008b74 <TIM_OC4_SetConfig+0x80>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <TIM_OC4_SetConfig+0xc8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d007      	beq.n	8008b74 <TIM_OC4_SetConfig+0x80>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a16      	ldr	r2, [pc, #88]	; (8008bc0 <TIM_OC4_SetConfig+0xcc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_OC4_SetConfig+0x80>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <TIM_OC4_SetConfig+0xd0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d109      	bne.n	8008b88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	019b      	lsls	r3, r3, #6
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	feff8fff 	.word	0xfeff8fff
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40010400 	.word	0x40010400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40014400 	.word	0x40014400
 8008bc4:	40014800 	.word	0x40014800

08008bc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <TIM_OC5_SetConfig+0xb0>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	041b      	lsls	r3, r3, #16
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <TIM_OC5_SetConfig+0xb4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_OC5_SetConfig+0x76>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <TIM_OC5_SetConfig+0xb8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_OC5_SetConfig+0x76>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a16      	ldr	r2, [pc, #88]	; (8008c84 <TIM_OC5_SetConfig+0xbc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_OC5_SetConfig+0x76>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <TIM_OC5_SetConfig+0xc0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC5_SetConfig+0x76>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <TIM_OC5_SetConfig+0xc4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d109      	bne.n	8008c52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	fffeff8f 	.word	0xfffeff8f
 8008c7c:	40010000 	.word	0x40010000
 8008c80:	40010400 	.word	0x40010400
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800

08008c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <TIM_OC6_SetConfig+0xb4>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	051b      	lsls	r3, r3, #20
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a19      	ldr	r2, [pc, #100]	; (8008d48 <TIM_OC6_SetConfig+0xb8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00f      	beq.n	8008d08 <TIM_OC6_SetConfig+0x78>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <TIM_OC6_SetConfig+0xbc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00b      	beq.n	8008d08 <TIM_OC6_SetConfig+0x78>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <TIM_OC6_SetConfig+0xc0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <TIM_OC6_SetConfig+0x78>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <TIM_OC6_SetConfig+0xc4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_OC6_SetConfig+0x78>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <TIM_OC6_SetConfig+0xc8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d109      	bne.n	8008d1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	029b      	lsls	r3, r3, #10
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	621a      	str	r2, [r3, #32]
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	feff8fff 	.word	0xfeff8fff
 8008d48:	40010000 	.word	0x40010000
 8008d4c:	40010400 	.word	0x40010400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 031f 	and.w	r3, r3, #31
 8008d6e:	2201      	movs	r2, #1
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1a      	ldr	r2, [r3, #32]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	fa01 f303 	lsl.w	r3, r1, r3
 8008d94:	431a      	orrs	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e042      	b.n	8008e3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fa f906 	bl	8002fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	; 0x24
 8008dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f8c3 	bl	8008f74 <UART_SetConfig>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e022      	b.n	8008e3e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fe1f 	bl	8009a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0201 	orr.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fea6 	bl	8009b88 <UART_CheckIdleState>
 8008e3c:	4603      	mov	r3, r0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b08a      	sub	sp, #40	; 0x28
 8008e4a:	af02      	add	r7, sp, #8
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	4613      	mov	r3, r2
 8008e54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	f040 8083 	bne.w	8008f68 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <HAL_UART_Transmit+0x28>
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e07b      	b.n	8008f6a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Transmit+0x3a>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e074      	b.n	8008f6a <HAL_UART_Transmit+0x124>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2221      	movs	r2, #33	; 0x21
 8008e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e98:	f7fa faa6 	bl	80033e8 <HAL_GetTick>
 8008e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	88fa      	ldrh	r2, [r7, #6]
 8008eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb6:	d108      	bne.n	8008eca <HAL_UART_Transmit+0x84>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	61bb      	str	r3, [r7, #24]
 8008ec8:	e003      	b.n	8008ed2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008eda:	e02c      	b.n	8008f36 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fe99 	bl	8009c1e <UART_WaitOnFlagUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e039      	b.n	8008f6a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	3302      	adds	r3, #2
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	e007      	b.n	8008f24 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	3301      	adds	r3, #1
 8008f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1cc      	bne.n	8008edc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2140      	movs	r1, #64	; 0x40
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fe66 	bl	8009c1e <UART_WaitOnFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e006      	b.n	8008f6a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e000      	b.n	8008f6a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f78:	b092      	sub	sp, #72	; 0x48
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4bbe      	ldr	r3, [pc, #760]	; (800929c <UART_SetConfig+0x328>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4ab3      	ldr	r2, [pc, #716]	; (80092a0 <UART_SetConfig+0x32c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d004      	beq.n	8008fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	4baf      	ldr	r3, [pc, #700]	; (80092a4 <UART_SetConfig+0x330>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	f023 010f 	bic.w	r1, r3, #15
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4aa6      	ldr	r2, [pc, #664]	; (80092a8 <UART_SetConfig+0x334>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d177      	bne.n	8009104 <UART_SetConfig+0x190>
 8009014:	4ba5      	ldr	r3, [pc, #660]	; (80092ac <UART_SetConfig+0x338>)
 8009016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901c:	2b28      	cmp	r3, #40	; 0x28
 800901e:	d86d      	bhi.n	80090fc <UART_SetConfig+0x188>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <UART_SetConfig+0xb4>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	080090cd 	.word	0x080090cd
 800902c:	080090fd 	.word	0x080090fd
 8009030:	080090fd 	.word	0x080090fd
 8009034:	080090fd 	.word	0x080090fd
 8009038:	080090fd 	.word	0x080090fd
 800903c:	080090fd 	.word	0x080090fd
 8009040:	080090fd 	.word	0x080090fd
 8009044:	080090fd 	.word	0x080090fd
 8009048:	080090d5 	.word	0x080090d5
 800904c:	080090fd 	.word	0x080090fd
 8009050:	080090fd 	.word	0x080090fd
 8009054:	080090fd 	.word	0x080090fd
 8009058:	080090fd 	.word	0x080090fd
 800905c:	080090fd 	.word	0x080090fd
 8009060:	080090fd 	.word	0x080090fd
 8009064:	080090fd 	.word	0x080090fd
 8009068:	080090dd 	.word	0x080090dd
 800906c:	080090fd 	.word	0x080090fd
 8009070:	080090fd 	.word	0x080090fd
 8009074:	080090fd 	.word	0x080090fd
 8009078:	080090fd 	.word	0x080090fd
 800907c:	080090fd 	.word	0x080090fd
 8009080:	080090fd 	.word	0x080090fd
 8009084:	080090fd 	.word	0x080090fd
 8009088:	080090e5 	.word	0x080090e5
 800908c:	080090fd 	.word	0x080090fd
 8009090:	080090fd 	.word	0x080090fd
 8009094:	080090fd 	.word	0x080090fd
 8009098:	080090fd 	.word	0x080090fd
 800909c:	080090fd 	.word	0x080090fd
 80090a0:	080090fd 	.word	0x080090fd
 80090a4:	080090fd 	.word	0x080090fd
 80090a8:	080090ed 	.word	0x080090ed
 80090ac:	080090fd 	.word	0x080090fd
 80090b0:	080090fd 	.word	0x080090fd
 80090b4:	080090fd 	.word	0x080090fd
 80090b8:	080090fd 	.word	0x080090fd
 80090bc:	080090fd 	.word	0x080090fd
 80090c0:	080090fd 	.word	0x080090fd
 80090c4:	080090fd 	.word	0x080090fd
 80090c8:	080090f5 	.word	0x080090f5
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d2:	e222      	b.n	800951a <UART_SetConfig+0x5a6>
 80090d4:	2304      	movs	r3, #4
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090da:	e21e      	b.n	800951a <UART_SetConfig+0x5a6>
 80090dc:	2308      	movs	r3, #8
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e2:	e21a      	b.n	800951a <UART_SetConfig+0x5a6>
 80090e4:	2310      	movs	r3, #16
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ea:	e216      	b.n	800951a <UART_SetConfig+0x5a6>
 80090ec:	2320      	movs	r3, #32
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f2:	e212      	b.n	800951a <UART_SetConfig+0x5a6>
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e20e      	b.n	800951a <UART_SetConfig+0x5a6>
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e20a      	b.n	800951a <UART_SetConfig+0x5a6>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a69      	ldr	r2, [pc, #420]	; (80092b0 <UART_SetConfig+0x33c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d130      	bne.n	8009170 <UART_SetConfig+0x1fc>
 800910e:	4b67      	ldr	r3, [pc, #412]	; (80092ac <UART_SetConfig+0x338>)
 8009110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b05      	cmp	r3, #5
 8009118:	d826      	bhi.n	8009168 <UART_SetConfig+0x1f4>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <UART_SetConfig+0x1ac>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009139 	.word	0x08009139
 8009124:	08009141 	.word	0x08009141
 8009128:	08009149 	.word	0x08009149
 800912c:	08009151 	.word	0x08009151
 8009130:	08009159 	.word	0x08009159
 8009134:	08009161 	.word	0x08009161
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913e:	e1ec      	b.n	800951a <UART_SetConfig+0x5a6>
 8009140:	2304      	movs	r3, #4
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009146:	e1e8      	b.n	800951a <UART_SetConfig+0x5a6>
 8009148:	2308      	movs	r3, #8
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914e:	e1e4      	b.n	800951a <UART_SetConfig+0x5a6>
 8009150:	2310      	movs	r3, #16
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009156:	e1e0      	b.n	800951a <UART_SetConfig+0x5a6>
 8009158:	2320      	movs	r3, #32
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915e:	e1dc      	b.n	800951a <UART_SetConfig+0x5a6>
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e1d8      	b.n	800951a <UART_SetConfig+0x5a6>
 8009168:	2380      	movs	r3, #128	; 0x80
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e1d4      	b.n	800951a <UART_SetConfig+0x5a6>
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a4f      	ldr	r2, [pc, #316]	; (80092b4 <UART_SetConfig+0x340>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d130      	bne.n	80091dc <UART_SetConfig+0x268>
 800917a:	4b4c      	ldr	r3, [pc, #304]	; (80092ac <UART_SetConfig+0x338>)
 800917c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b05      	cmp	r3, #5
 8009184:	d826      	bhi.n	80091d4 <UART_SetConfig+0x260>
 8009186:	a201      	add	r2, pc, #4	; (adr r2, 800918c <UART_SetConfig+0x218>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a5 	.word	0x080091a5
 8009190:	080091ad 	.word	0x080091ad
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091c5 	.word	0x080091c5
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091aa:	e1b6      	b.n	800951a <UART_SetConfig+0x5a6>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e1b2      	b.n	800951a <UART_SetConfig+0x5a6>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e1ae      	b.n	800951a <UART_SetConfig+0x5a6>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e1aa      	b.n	800951a <UART_SetConfig+0x5a6>
 80091c4:	2320      	movs	r3, #32
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ca:	e1a6      	b.n	800951a <UART_SetConfig+0x5a6>
 80091cc:	2340      	movs	r3, #64	; 0x40
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e1a2      	b.n	800951a <UART_SetConfig+0x5a6>
 80091d4:	2380      	movs	r3, #128	; 0x80
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e19e      	b.n	800951a <UART_SetConfig+0x5a6>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <UART_SetConfig+0x344>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d130      	bne.n	8009248 <UART_SetConfig+0x2d4>
 80091e6:	4b31      	ldr	r3, [pc, #196]	; (80092ac <UART_SetConfig+0x338>)
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d826      	bhi.n	8009240 <UART_SetConfig+0x2cc>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <UART_SetConfig+0x284>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009211 	.word	0x08009211
 80091fc:	08009219 	.word	0x08009219
 8009200:	08009221 	.word	0x08009221
 8009204:	08009229 	.word	0x08009229
 8009208:	08009231 	.word	0x08009231
 800920c:	08009239 	.word	0x08009239
 8009210:	2300      	movs	r3, #0
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009216:	e180      	b.n	800951a <UART_SetConfig+0x5a6>
 8009218:	2304      	movs	r3, #4
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921e:	e17c      	b.n	800951a <UART_SetConfig+0x5a6>
 8009220:	2308      	movs	r3, #8
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009226:	e178      	b.n	800951a <UART_SetConfig+0x5a6>
 8009228:	2310      	movs	r3, #16
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922e:	e174      	b.n	800951a <UART_SetConfig+0x5a6>
 8009230:	2320      	movs	r3, #32
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009236:	e170      	b.n	800951a <UART_SetConfig+0x5a6>
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e16c      	b.n	800951a <UART_SetConfig+0x5a6>
 8009240:	2380      	movs	r3, #128	; 0x80
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009246:	e168      	b.n	800951a <UART_SetConfig+0x5a6>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <UART_SetConfig+0x348>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d142      	bne.n	80092d8 <UART_SetConfig+0x364>
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <UART_SetConfig+0x338>)
 8009254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b05      	cmp	r3, #5
 800925c:	d838      	bhi.n	80092d0 <UART_SetConfig+0x35c>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <UART_SetConfig+0x2f0>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	0800927d 	.word	0x0800927d
 8009268:	08009285 	.word	0x08009285
 800926c:	0800928d 	.word	0x0800928d
 8009270:	08009295 	.word	0x08009295
 8009274:	080092c1 	.word	0x080092c1
 8009278:	080092c9 	.word	0x080092c9
 800927c:	2300      	movs	r3, #0
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009282:	e14a      	b.n	800951a <UART_SetConfig+0x5a6>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928a:	e146      	b.n	800951a <UART_SetConfig+0x5a6>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e142      	b.n	800951a <UART_SetConfig+0x5a6>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929a:	e13e      	b.n	800951a <UART_SetConfig+0x5a6>
 800929c:	cfff69f3 	.word	0xcfff69f3
 80092a0:	58000c00 	.word	0x58000c00
 80092a4:	11fff4ff 	.word	0x11fff4ff
 80092a8:	40011000 	.word	0x40011000
 80092ac:	58024400 	.word	0x58024400
 80092b0:	40004400 	.word	0x40004400
 80092b4:	40004800 	.word	0x40004800
 80092b8:	40004c00 	.word	0x40004c00
 80092bc:	40005000 	.word	0x40005000
 80092c0:	2320      	movs	r3, #32
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092c6:	e128      	b.n	800951a <UART_SetConfig+0x5a6>
 80092c8:	2340      	movs	r3, #64	; 0x40
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ce:	e124      	b.n	800951a <UART_SetConfig+0x5a6>
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d6:	e120      	b.n	800951a <UART_SetConfig+0x5a6>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4acb      	ldr	r2, [pc, #812]	; (800960c <UART_SetConfig+0x698>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d176      	bne.n	80093d0 <UART_SetConfig+0x45c>
 80092e2:	4bcb      	ldr	r3, [pc, #812]	; (8009610 <UART_SetConfig+0x69c>)
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092ea:	2b28      	cmp	r3, #40	; 0x28
 80092ec:	d86c      	bhi.n	80093c8 <UART_SetConfig+0x454>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <UART_SetConfig+0x380>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009399 	.word	0x08009399
 80092f8:	080093c9 	.word	0x080093c9
 80092fc:	080093c9 	.word	0x080093c9
 8009300:	080093c9 	.word	0x080093c9
 8009304:	080093c9 	.word	0x080093c9
 8009308:	080093c9 	.word	0x080093c9
 800930c:	080093c9 	.word	0x080093c9
 8009310:	080093c9 	.word	0x080093c9
 8009314:	080093a1 	.word	0x080093a1
 8009318:	080093c9 	.word	0x080093c9
 800931c:	080093c9 	.word	0x080093c9
 8009320:	080093c9 	.word	0x080093c9
 8009324:	080093c9 	.word	0x080093c9
 8009328:	080093c9 	.word	0x080093c9
 800932c:	080093c9 	.word	0x080093c9
 8009330:	080093c9 	.word	0x080093c9
 8009334:	080093a9 	.word	0x080093a9
 8009338:	080093c9 	.word	0x080093c9
 800933c:	080093c9 	.word	0x080093c9
 8009340:	080093c9 	.word	0x080093c9
 8009344:	080093c9 	.word	0x080093c9
 8009348:	080093c9 	.word	0x080093c9
 800934c:	080093c9 	.word	0x080093c9
 8009350:	080093c9 	.word	0x080093c9
 8009354:	080093b1 	.word	0x080093b1
 8009358:	080093c9 	.word	0x080093c9
 800935c:	080093c9 	.word	0x080093c9
 8009360:	080093c9 	.word	0x080093c9
 8009364:	080093c9 	.word	0x080093c9
 8009368:	080093c9 	.word	0x080093c9
 800936c:	080093c9 	.word	0x080093c9
 8009370:	080093c9 	.word	0x080093c9
 8009374:	080093b9 	.word	0x080093b9
 8009378:	080093c9 	.word	0x080093c9
 800937c:	080093c9 	.word	0x080093c9
 8009380:	080093c9 	.word	0x080093c9
 8009384:	080093c9 	.word	0x080093c9
 8009388:	080093c9 	.word	0x080093c9
 800938c:	080093c9 	.word	0x080093c9
 8009390:	080093c9 	.word	0x080093c9
 8009394:	080093c1 	.word	0x080093c1
 8009398:	2301      	movs	r3, #1
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939e:	e0bc      	b.n	800951a <UART_SetConfig+0x5a6>
 80093a0:	2304      	movs	r3, #4
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a6:	e0b8      	b.n	800951a <UART_SetConfig+0x5a6>
 80093a8:	2308      	movs	r3, #8
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ae:	e0b4      	b.n	800951a <UART_SetConfig+0x5a6>
 80093b0:	2310      	movs	r3, #16
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b6:	e0b0      	b.n	800951a <UART_SetConfig+0x5a6>
 80093b8:	2320      	movs	r3, #32
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093be:	e0ac      	b.n	800951a <UART_SetConfig+0x5a6>
 80093c0:	2340      	movs	r3, #64	; 0x40
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e0a8      	b.n	800951a <UART_SetConfig+0x5a6>
 80093c8:	2380      	movs	r3, #128	; 0x80
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ce:	e0a4      	b.n	800951a <UART_SetConfig+0x5a6>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a8f      	ldr	r2, [pc, #572]	; (8009614 <UART_SetConfig+0x6a0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d130      	bne.n	800943c <UART_SetConfig+0x4c8>
 80093da:	4b8d      	ldr	r3, [pc, #564]	; (8009610 <UART_SetConfig+0x69c>)
 80093dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	d826      	bhi.n	8009434 <UART_SetConfig+0x4c0>
 80093e6:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <UART_SetConfig+0x478>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009405 	.word	0x08009405
 80093f0:	0800940d 	.word	0x0800940d
 80093f4:	08009415 	.word	0x08009415
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	08009425 	.word	0x08009425
 8009400:	0800942d 	.word	0x0800942d
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940a:	e086      	b.n	800951a <UART_SetConfig+0x5a6>
 800940c:	2304      	movs	r3, #4
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009412:	e082      	b.n	800951a <UART_SetConfig+0x5a6>
 8009414:	2308      	movs	r3, #8
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800941a:	e07e      	b.n	800951a <UART_SetConfig+0x5a6>
 800941c:	2310      	movs	r3, #16
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009422:	e07a      	b.n	800951a <UART_SetConfig+0x5a6>
 8009424:	2320      	movs	r3, #32
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942a:	e076      	b.n	800951a <UART_SetConfig+0x5a6>
 800942c:	2340      	movs	r3, #64	; 0x40
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009432:	e072      	b.n	800951a <UART_SetConfig+0x5a6>
 8009434:	2380      	movs	r3, #128	; 0x80
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800943a:	e06e      	b.n	800951a <UART_SetConfig+0x5a6>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a75      	ldr	r2, [pc, #468]	; (8009618 <UART_SetConfig+0x6a4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d130      	bne.n	80094a8 <UART_SetConfig+0x534>
 8009446:	4b72      	ldr	r3, [pc, #456]	; (8009610 <UART_SetConfig+0x69c>)
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	2b05      	cmp	r3, #5
 8009450:	d826      	bhi.n	80094a0 <UART_SetConfig+0x52c>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0x4e4>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	08009471 	.word	0x08009471
 800945c:	08009479 	.word	0x08009479
 8009460:	08009481 	.word	0x08009481
 8009464:	08009489 	.word	0x08009489
 8009468:	08009491 	.word	0x08009491
 800946c:	08009499 	.word	0x08009499
 8009470:	2300      	movs	r3, #0
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009476:	e050      	b.n	800951a <UART_SetConfig+0x5a6>
 8009478:	2304      	movs	r3, #4
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947e:	e04c      	b.n	800951a <UART_SetConfig+0x5a6>
 8009480:	2308      	movs	r3, #8
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009486:	e048      	b.n	800951a <UART_SetConfig+0x5a6>
 8009488:	2310      	movs	r3, #16
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948e:	e044      	b.n	800951a <UART_SetConfig+0x5a6>
 8009490:	2320      	movs	r3, #32
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009496:	e040      	b.n	800951a <UART_SetConfig+0x5a6>
 8009498:	2340      	movs	r3, #64	; 0x40
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949e:	e03c      	b.n	800951a <UART_SetConfig+0x5a6>
 80094a0:	2380      	movs	r3, #128	; 0x80
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a6:	e038      	b.n	800951a <UART_SetConfig+0x5a6>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a5b      	ldr	r2, [pc, #364]	; (800961c <UART_SetConfig+0x6a8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d130      	bne.n	8009514 <UART_SetConfig+0x5a0>
 80094b2:	4b57      	ldr	r3, [pc, #348]	; (8009610 <UART_SetConfig+0x69c>)
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b05      	cmp	r3, #5
 80094bc:	d826      	bhi.n	800950c <UART_SetConfig+0x598>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <UART_SetConfig+0x550>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094dd 	.word	0x080094dd
 80094c8:	080094e5 	.word	0x080094e5
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	080094f5 	.word	0x080094f5
 80094d4:	080094fd 	.word	0x080094fd
 80094d8:	08009505 	.word	0x08009505
 80094dc:	2302      	movs	r3, #2
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e01a      	b.n	800951a <UART_SetConfig+0x5a6>
 80094e4:	2304      	movs	r3, #4
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e016      	b.n	800951a <UART_SetConfig+0x5a6>
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e012      	b.n	800951a <UART_SetConfig+0x5a6>
 80094f4:	2310      	movs	r3, #16
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e00e      	b.n	800951a <UART_SetConfig+0x5a6>
 80094fc:	2320      	movs	r3, #32
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e00a      	b.n	800951a <UART_SetConfig+0x5a6>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e006      	b.n	800951a <UART_SetConfig+0x5a6>
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e002      	b.n	800951a <UART_SetConfig+0x5a6>
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a3f      	ldr	r2, [pc, #252]	; (800961c <UART_SetConfig+0x6a8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	f040 80f8 	bne.w	8009716 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009526:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800952a:	2b20      	cmp	r3, #32
 800952c:	dc46      	bgt.n	80095bc <UART_SetConfig+0x648>
 800952e:	2b02      	cmp	r3, #2
 8009530:	f2c0 8082 	blt.w	8009638 <UART_SetConfig+0x6c4>
 8009534:	3b02      	subs	r3, #2
 8009536:	2b1e      	cmp	r3, #30
 8009538:	d87e      	bhi.n	8009638 <UART_SetConfig+0x6c4>
 800953a:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0x5cc>)
 800953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009540:	080095c3 	.word	0x080095c3
 8009544:	08009639 	.word	0x08009639
 8009548:	080095cb 	.word	0x080095cb
 800954c:	08009639 	.word	0x08009639
 8009550:	08009639 	.word	0x08009639
 8009554:	08009639 	.word	0x08009639
 8009558:	080095db 	.word	0x080095db
 800955c:	08009639 	.word	0x08009639
 8009560:	08009639 	.word	0x08009639
 8009564:	08009639 	.word	0x08009639
 8009568:	08009639 	.word	0x08009639
 800956c:	08009639 	.word	0x08009639
 8009570:	08009639 	.word	0x08009639
 8009574:	08009639 	.word	0x08009639
 8009578:	080095eb 	.word	0x080095eb
 800957c:	08009639 	.word	0x08009639
 8009580:	08009639 	.word	0x08009639
 8009584:	08009639 	.word	0x08009639
 8009588:	08009639 	.word	0x08009639
 800958c:	08009639 	.word	0x08009639
 8009590:	08009639 	.word	0x08009639
 8009594:	08009639 	.word	0x08009639
 8009598:	08009639 	.word	0x08009639
 800959c:	08009639 	.word	0x08009639
 80095a0:	08009639 	.word	0x08009639
 80095a4:	08009639 	.word	0x08009639
 80095a8:	08009639 	.word	0x08009639
 80095ac:	08009639 	.word	0x08009639
 80095b0:	08009639 	.word	0x08009639
 80095b4:	08009639 	.word	0x08009639
 80095b8:	0800962b 	.word	0x0800962b
 80095bc:	2b40      	cmp	r3, #64	; 0x40
 80095be:	d037      	beq.n	8009630 <UART_SetConfig+0x6bc>
 80095c0:	e03a      	b.n	8009638 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80095c2:	f7fd f9b9 	bl	8006938 <HAL_RCCEx_GetD3PCLK1Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c8:	e03c      	b.n	8009644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd f9c8 	bl	8006964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d8:	e034      	b.n	8009644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0318 	add.w	r3, r7, #24
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fb14 	bl	8006c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e8:	e02c      	b.n	8009644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <UART_SetConfig+0x69c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d016      	beq.n	8009624 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <UART_SetConfig+0x69c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a07      	ldr	r2, [pc, #28]	; (8009620 <UART_SetConfig+0x6ac>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009608:	e01c      	b.n	8009644 <UART_SetConfig+0x6d0>
 800960a:	bf00      	nop
 800960c:	40011400 	.word	0x40011400
 8009610:	58024400 	.word	0x58024400
 8009614:	40007800 	.word	0x40007800
 8009618:	40007c00 	.word	0x40007c00
 800961c:	58000c00 	.word	0x58000c00
 8009620:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009624:	4b9d      	ldr	r3, [pc, #628]	; (800989c <UART_SetConfig+0x928>)
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009628:	e00c      	b.n	8009644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800962a:	4b9d      	ldr	r3, [pc, #628]	; (80098a0 <UART_SetConfig+0x92c>)
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962e:	e009      	b.n	8009644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009636:	e005      	b.n	8009644 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009642:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 81de 	beq.w	8009a08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	4a94      	ldr	r2, [pc, #592]	; (80098a4 <UART_SetConfig+0x930>)
 8009652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009656:	461a      	mov	r2, r3
 8009658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965a:	fbb3 f3f2 	udiv	r3, r3, r2
 800965e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	4413      	add	r3, r2
 800966a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966c:	429a      	cmp	r2, r3
 800966e:	d305      	bcc.n	800967c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009678:	429a      	cmp	r2, r3
 800967a:	d903      	bls.n	8009684 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009682:	e1c1      	b.n	8009a08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	2200      	movs	r2, #0
 8009688:	60bb      	str	r3, [r7, #8]
 800968a:	60fa      	str	r2, [r7, #12]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	4a84      	ldr	r2, [pc, #528]	; (80098a4 <UART_SetConfig+0x930>)
 8009692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009696:	b29b      	uxth	r3, r3
 8009698:	2200      	movs	r2, #0
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	607a      	str	r2, [r7, #4]
 800969e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096a6:	f7f7 f82f 	bl	8000708 <__aeabi_uldivmod>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4610      	mov	r0, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	f04f 0200 	mov.w	r2, #0
 80096b6:	f04f 0300 	mov.w	r3, #0
 80096ba:	020b      	lsls	r3, r1, #8
 80096bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096c0:	0202      	lsls	r2, r0, #8
 80096c2:	6979      	ldr	r1, [r7, #20]
 80096c4:	6849      	ldr	r1, [r1, #4]
 80096c6:	0849      	lsrs	r1, r1, #1
 80096c8:	2000      	movs	r0, #0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4605      	mov	r5, r0
 80096ce:	eb12 0804 	adds.w	r8, r2, r4
 80096d2:	eb43 0905 	adc.w	r9, r3, r5
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	469a      	mov	sl, r3
 80096de:	4693      	mov	fp, r2
 80096e0:	4652      	mov	r2, sl
 80096e2:	465b      	mov	r3, fp
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f7 f80e 	bl	8000708 <__aeabi_uldivmod>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4613      	mov	r3, r2
 80096f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096fa:	d308      	bcc.n	800970e <UART_SetConfig+0x79a>
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009702:	d204      	bcs.n	800970e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	e17c      	b.n	8009a08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009714:	e178      	b.n	8009a08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800971e:	f040 80c5 	bne.w	80098ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009722:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009726:	2b20      	cmp	r3, #32
 8009728:	dc48      	bgt.n	80097bc <UART_SetConfig+0x848>
 800972a:	2b00      	cmp	r3, #0
 800972c:	db7b      	blt.n	8009826 <UART_SetConfig+0x8b2>
 800972e:	2b20      	cmp	r3, #32
 8009730:	d879      	bhi.n	8009826 <UART_SetConfig+0x8b2>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x7c4>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	080097c3 	.word	0x080097c3
 800973c:	080097cb 	.word	0x080097cb
 8009740:	08009827 	.word	0x08009827
 8009744:	08009827 	.word	0x08009827
 8009748:	080097d3 	.word	0x080097d3
 800974c:	08009827 	.word	0x08009827
 8009750:	08009827 	.word	0x08009827
 8009754:	08009827 	.word	0x08009827
 8009758:	080097e3 	.word	0x080097e3
 800975c:	08009827 	.word	0x08009827
 8009760:	08009827 	.word	0x08009827
 8009764:	08009827 	.word	0x08009827
 8009768:	08009827 	.word	0x08009827
 800976c:	08009827 	.word	0x08009827
 8009770:	08009827 	.word	0x08009827
 8009774:	08009827 	.word	0x08009827
 8009778:	080097f3 	.word	0x080097f3
 800977c:	08009827 	.word	0x08009827
 8009780:	08009827 	.word	0x08009827
 8009784:	08009827 	.word	0x08009827
 8009788:	08009827 	.word	0x08009827
 800978c:	08009827 	.word	0x08009827
 8009790:	08009827 	.word	0x08009827
 8009794:	08009827 	.word	0x08009827
 8009798:	08009827 	.word	0x08009827
 800979c:	08009827 	.word	0x08009827
 80097a0:	08009827 	.word	0x08009827
 80097a4:	08009827 	.word	0x08009827
 80097a8:	08009827 	.word	0x08009827
 80097ac:	08009827 	.word	0x08009827
 80097b0:	08009827 	.word	0x08009827
 80097b4:	08009827 	.word	0x08009827
 80097b8:	08009819 	.word	0x08009819
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	d02e      	beq.n	800981e <UART_SetConfig+0x8aa>
 80097c0:	e031      	b.n	8009826 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c2:	f7fc f947 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 80097c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097c8:	e033      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097ca:	f7fc f959 	bl	8005a80 <HAL_RCC_GetPCLK2Freq>
 80097ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097d0:	e02f      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fd f8c4 	bl	8006964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e0:	e027      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097e2:	f107 0318 	add.w	r3, r7, #24
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fd fa10 	bl	8006c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f0:	e01f      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097f2:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <UART_SetConfig+0x934>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0320 	and.w	r3, r3, #32
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097fe:	4b2a      	ldr	r3, [pc, #168]	; (80098a8 <UART_SetConfig+0x934>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	08db      	lsrs	r3, r3, #3
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	4a24      	ldr	r2, [pc, #144]	; (800989c <UART_SetConfig+0x928>)
 800980a:	fa22 f303 	lsr.w	r3, r2, r3
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009810:	e00f      	b.n	8009832 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009812:	4b22      	ldr	r3, [pc, #136]	; (800989c <UART_SetConfig+0x928>)
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009816:	e00c      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009818:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <UART_SetConfig+0x92c>)
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800981c:	e009      	b.n	8009832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800981e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009824:	e005      	b.n	8009832 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80e7 	beq.w	8009a08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <UART_SetConfig+0x930>)
 8009840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009844:	461a      	mov	r2, r3
 8009846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009848:	fbb3 f3f2 	udiv	r3, r3, r2
 800984c:	005a      	lsls	r2, r3, #1
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	441a      	add	r2, r3
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	fbb2 f3f3 	udiv	r3, r2, r3
 800985e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	2b0f      	cmp	r3, #15
 8009864:	d916      	bls.n	8009894 <UART_SetConfig+0x920>
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986c:	d212      	bcs.n	8009894 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	b29b      	uxth	r3, r3
 8009872:	f023 030f 	bic.w	r3, r3, #15
 8009876:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	b29b      	uxth	r3, r3
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	b29a      	uxth	r2, r3
 8009884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009886:	4313      	orrs	r3, r2
 8009888:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009890:	60da      	str	r2, [r3, #12]
 8009892:	e0b9      	b.n	8009a08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800989a:	e0b5      	b.n	8009a08 <UART_SetConfig+0xa94>
 800989c:	03d09000 	.word	0x03d09000
 80098a0:	003d0900 	.word	0x003d0900
 80098a4:	0800f350 	.word	0x0800f350
 80098a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80098ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	dc49      	bgt.n	8009948 <UART_SetConfig+0x9d4>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	db7c      	blt.n	80099b2 <UART_SetConfig+0xa3e>
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d87a      	bhi.n	80099b2 <UART_SetConfig+0xa3e>
 80098bc:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x950>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	0800994f 	.word	0x0800994f
 80098c8:	08009957 	.word	0x08009957
 80098cc:	080099b3 	.word	0x080099b3
 80098d0:	080099b3 	.word	0x080099b3
 80098d4:	0800995f 	.word	0x0800995f
 80098d8:	080099b3 	.word	0x080099b3
 80098dc:	080099b3 	.word	0x080099b3
 80098e0:	080099b3 	.word	0x080099b3
 80098e4:	0800996f 	.word	0x0800996f
 80098e8:	080099b3 	.word	0x080099b3
 80098ec:	080099b3 	.word	0x080099b3
 80098f0:	080099b3 	.word	0x080099b3
 80098f4:	080099b3 	.word	0x080099b3
 80098f8:	080099b3 	.word	0x080099b3
 80098fc:	080099b3 	.word	0x080099b3
 8009900:	080099b3 	.word	0x080099b3
 8009904:	0800997f 	.word	0x0800997f
 8009908:	080099b3 	.word	0x080099b3
 800990c:	080099b3 	.word	0x080099b3
 8009910:	080099b3 	.word	0x080099b3
 8009914:	080099b3 	.word	0x080099b3
 8009918:	080099b3 	.word	0x080099b3
 800991c:	080099b3 	.word	0x080099b3
 8009920:	080099b3 	.word	0x080099b3
 8009924:	080099b3 	.word	0x080099b3
 8009928:	080099b3 	.word	0x080099b3
 800992c:	080099b3 	.word	0x080099b3
 8009930:	080099b3 	.word	0x080099b3
 8009934:	080099b3 	.word	0x080099b3
 8009938:	080099b3 	.word	0x080099b3
 800993c:	080099b3 	.word	0x080099b3
 8009940:	080099b3 	.word	0x080099b3
 8009944:	080099a5 	.word	0x080099a5
 8009948:	2b40      	cmp	r3, #64	; 0x40
 800994a:	d02e      	beq.n	80099aa <UART_SetConfig+0xa36>
 800994c:	e031      	b.n	80099b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800994e:	f7fc f881 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 8009952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009954:	e033      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009956:	f7fc f893 	bl	8005a80 <HAL_RCC_GetPCLK2Freq>
 800995a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800995c:	e02f      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009962:	4618      	mov	r0, r3
 8009964:	f7fc fffe 	bl	8006964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996c:	e027      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996e:	f107 0318 	add.w	r3, r7, #24
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd f94a 	bl	8006c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800997c:	e01f      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997e:	4b2d      	ldr	r3, [pc, #180]	; (8009a34 <UART_SetConfig+0xac0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	d009      	beq.n	800999e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800998a:	4b2a      	ldr	r3, [pc, #168]	; (8009a34 <UART_SetConfig+0xac0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	08db      	lsrs	r3, r3, #3
 8009990:	f003 0303 	and.w	r3, r3, #3
 8009994:	4a28      	ldr	r2, [pc, #160]	; (8009a38 <UART_SetConfig+0xac4>)
 8009996:	fa22 f303 	lsr.w	r3, r2, r3
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800999c:	e00f      	b.n	80099be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800999e:	4b26      	ldr	r3, [pc, #152]	; (8009a38 <UART_SetConfig+0xac4>)
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a2:	e00c      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <UART_SetConfig+0xac8>)
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a8:	e009      	b.n	80099be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b0:	e005      	b.n	80099be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099bc:	bf00      	nop
    }

    if (pclk != 0U)
 80099be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d021      	beq.n	8009a08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <UART_SetConfig+0xacc>)
 80099ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	085b      	lsrs	r3, r3, #1
 80099dc:	441a      	add	r2, r3
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	2b0f      	cmp	r3, #15
 80099ec:	d909      	bls.n	8009a02 <UART_SetConfig+0xa8e>
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f4:	d205      	bcs.n	8009a02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60da      	str	r2, [r3, #12]
 8009a00:	e002      	b.n	8009a08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2200      	movs	r2, #0
 8009a22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3748      	adds	r7, #72	; 0x48
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a32:	bf00      	nop
 8009a34:	58024400 	.word	0x58024400
 8009a38:	03d09000 	.word	0x03d09000
 8009a3c:	003d0900 	.word	0x003d0900
 8009a40:	0800f350 	.word	0x0800f350

08009a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	f003 0308 	and.w	r3, r3, #8
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	f003 0310 	and.w	r3, r3, #16
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01a      	beq.n	8009b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b42:	d10a      	bne.n	8009b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	605a      	str	r2, [r3, #4]
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b98:	f7f9 fc26 	bl	80033e8 <HAL_GetTick>
 8009b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d10e      	bne.n	8009bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f82f 	bl	8009c1e <UART_WaitOnFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e025      	b.n	8009c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d10e      	bne.n	8009bf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f819 	bl	8009c1e <UART_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e00f      	b.n	8009c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b09c      	sub	sp, #112	; 0x70
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	603b      	str	r3, [r7, #0]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c2e:	e0a9      	b.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	f000 80a5 	beq.w	8009d84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c3a:	f7f9 fbd5 	bl	80033e8 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d302      	bcc.n	8009c50 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d140      	bne.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c64:	667b      	str	r3, [r7, #100]	; 0x64
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e6      	bne.n	8009c50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3308      	adds	r3, #8
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	f023 0301 	bic.w	r3, r3, #1
 8009c98:	663b      	str	r3, [r7, #96]	; 0x60
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ca2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ca4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e5      	bne.n	8009c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e069      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d051      	beq.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cee:	d149      	bne.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e6      	bne.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f023 0301 	bic.w	r3, r3, #1
 8009d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d4c:	623a      	str	r2, [r7, #32]
 8009d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	69f9      	ldr	r1, [r7, #28]
 8009d52:	6a3a      	ldr	r2, [r7, #32]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e5      	bne.n	8009d2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e010      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	bf0c      	ite	eq
 8009d94:	2301      	moveq	r3, #1
 8009d96:	2300      	movne	r3, #0
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	f43f af46 	beq.w	8009c30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3770      	adds	r7, #112	; 0x70
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e027      	b.n	8009e14 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2224      	movs	r2, #36	; 0x24
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0201 	bic.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009df2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e02d      	b.n	8009e94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2224      	movs	r2, #36	; 0x24
 8009e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 0201 	bic.w	r2, r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f84f 	bl	8009f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e02d      	b.n	8009f10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2224      	movs	r2, #36	; 0x24
 8009ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0201 	bic.w	r2, r2, #1
 8009eda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f811 	bl	8009f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f38:	e031      	b.n	8009f9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f3a:	2310      	movs	r3, #16
 8009f3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f3e:	2310      	movs	r3, #16
 8009f40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	0e5b      	lsrs	r3, r3, #25
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	0f5b      	lsrs	r3, r3, #29
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	7b3a      	ldrb	r2, [r7, #12]
 8009f66:	4911      	ldr	r1, [pc, #68]	; (8009fac <UARTEx_SetNbDataToProcess+0x94>)
 8009f68:	5c8a      	ldrb	r2, [r1, r2]
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f6e:	7b3a      	ldrb	r2, [r7, #12]
 8009f70:	490f      	ldr	r1, [pc, #60]	; (8009fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009f72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	7b7a      	ldrb	r2, [r7, #13]
 8009f84:	4909      	ldr	r1, [pc, #36]	; (8009fac <UARTEx_SetNbDataToProcess+0x94>)
 8009f86:	5c8a      	ldrb	r2, [r1, r2]
 8009f88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f8c:	7b7a      	ldrb	r2, [r7, #13]
 8009f8e:	4908      	ldr	r1, [pc, #32]	; (8009fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009f90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	0800f368 	.word	0x0800f368
 8009fb0:	0800f370 	.word	0x0800f370

08009fb4 <__errno>:
 8009fb4:	4b01      	ldr	r3, [pc, #4]	; (8009fbc <__errno+0x8>)
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	24000030 	.word	0x24000030

08009fc0 <__libc_init_array>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	4d0d      	ldr	r5, [pc, #52]	; (8009ff8 <__libc_init_array+0x38>)
 8009fc4:	4c0d      	ldr	r4, [pc, #52]	; (8009ffc <__libc_init_array+0x3c>)
 8009fc6:	1b64      	subs	r4, r4, r5
 8009fc8:	10a4      	asrs	r4, r4, #2
 8009fca:	2600      	movs	r6, #0
 8009fcc:	42a6      	cmp	r6, r4
 8009fce:	d109      	bne.n	8009fe4 <__libc_init_array+0x24>
 8009fd0:	4d0b      	ldr	r5, [pc, #44]	; (800a000 <__libc_init_array+0x40>)
 8009fd2:	4c0c      	ldr	r4, [pc, #48]	; (800a004 <__libc_init_array+0x44>)
 8009fd4:	f004 fe5c 	bl	800ec90 <_init>
 8009fd8:	1b64      	subs	r4, r4, r5
 8009fda:	10a4      	asrs	r4, r4, #2
 8009fdc:	2600      	movs	r6, #0
 8009fde:	42a6      	cmp	r6, r4
 8009fe0:	d105      	bne.n	8009fee <__libc_init_array+0x2e>
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe8:	4798      	blx	r3
 8009fea:	3601      	adds	r6, #1
 8009fec:	e7ee      	b.n	8009fcc <__libc_init_array+0xc>
 8009fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff2:	4798      	blx	r3
 8009ff4:	3601      	adds	r6, #1
 8009ff6:	e7f2      	b.n	8009fde <__libc_init_array+0x1e>
 8009ff8:	0800f8a0 	.word	0x0800f8a0
 8009ffc:	0800f8a0 	.word	0x0800f8a0
 800a000:	0800f8a0 	.word	0x0800f8a0
 800a004:	0800f8a4 	.word	0x0800f8a4

0800a008 <memcpy>:
 800a008:	440a      	add	r2, r1
 800a00a:	4291      	cmp	r1, r2
 800a00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a010:	d100      	bne.n	800a014 <memcpy+0xc>
 800a012:	4770      	bx	lr
 800a014:	b510      	push	{r4, lr}
 800a016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a01e:	4291      	cmp	r1, r2
 800a020:	d1f9      	bne.n	800a016 <memcpy+0xe>
 800a022:	bd10      	pop	{r4, pc}

0800a024 <memset>:
 800a024:	4402      	add	r2, r0
 800a026:	4603      	mov	r3, r0
 800a028:	4293      	cmp	r3, r2
 800a02a:	d100      	bne.n	800a02e <memset+0xa>
 800a02c:	4770      	bx	lr
 800a02e:	f803 1b01 	strb.w	r1, [r3], #1
 800a032:	e7f9      	b.n	800a028 <memset+0x4>

0800a034 <__cvt>:
 800a034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a036:	ed2d 8b02 	vpush	{d8}
 800a03a:	eeb0 8b40 	vmov.f64	d8, d0
 800a03e:	b085      	sub	sp, #20
 800a040:	4617      	mov	r7, r2
 800a042:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a044:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a046:	ee18 2a90 	vmov	r2, s17
 800a04a:	f025 0520 	bic.w	r5, r5, #32
 800a04e:	2a00      	cmp	r2, #0
 800a050:	bfb6      	itet	lt
 800a052:	222d      	movlt	r2, #45	; 0x2d
 800a054:	2200      	movge	r2, #0
 800a056:	eeb1 8b40 	vneglt.f64	d8, d0
 800a05a:	2d46      	cmp	r5, #70	; 0x46
 800a05c:	460c      	mov	r4, r1
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	d004      	beq.n	800a06c <__cvt+0x38>
 800a062:	2d45      	cmp	r5, #69	; 0x45
 800a064:	d100      	bne.n	800a068 <__cvt+0x34>
 800a066:	3401      	adds	r4, #1
 800a068:	2102      	movs	r1, #2
 800a06a:	e000      	b.n	800a06e <__cvt+0x3a>
 800a06c:	2103      	movs	r1, #3
 800a06e:	ab03      	add	r3, sp, #12
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	ab02      	add	r3, sp, #8
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4622      	mov	r2, r4
 800a078:	4633      	mov	r3, r6
 800a07a:	eeb0 0b48 	vmov.f64	d0, d8
 800a07e:	f001 feb3 	bl	800bde8 <_dtoa_r>
 800a082:	2d47      	cmp	r5, #71	; 0x47
 800a084:	d101      	bne.n	800a08a <__cvt+0x56>
 800a086:	07fb      	lsls	r3, r7, #31
 800a088:	d51a      	bpl.n	800a0c0 <__cvt+0x8c>
 800a08a:	2d46      	cmp	r5, #70	; 0x46
 800a08c:	eb00 0204 	add.w	r2, r0, r4
 800a090:	d10c      	bne.n	800a0ac <__cvt+0x78>
 800a092:	7803      	ldrb	r3, [r0, #0]
 800a094:	2b30      	cmp	r3, #48	; 0x30
 800a096:	d107      	bne.n	800a0a8 <__cvt+0x74>
 800a098:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a0:	bf1c      	itt	ne
 800a0a2:	f1c4 0401 	rsbne	r4, r4, #1
 800a0a6:	6034      	strne	r4, [r6, #0]
 800a0a8:	6833      	ldr	r3, [r6, #0]
 800a0aa:	441a      	add	r2, r3
 800a0ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b4:	bf08      	it	eq
 800a0b6:	9203      	streq	r2, [sp, #12]
 800a0b8:	2130      	movs	r1, #48	; 0x30
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d307      	bcc.n	800a0d0 <__cvt+0x9c>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c4:	1a1b      	subs	r3, r3, r0
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	b005      	add	sp, #20
 800a0ca:	ecbd 8b02 	vpop	{d8}
 800a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d0:	1c5c      	adds	r4, r3, #1
 800a0d2:	9403      	str	r4, [sp, #12]
 800a0d4:	7019      	strb	r1, [r3, #0]
 800a0d6:	e7f0      	b.n	800a0ba <__cvt+0x86>

0800a0d8 <__exponent>:
 800a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	bfb8      	it	lt
 800a0e0:	4249      	neglt	r1, r1
 800a0e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a0e6:	bfb4      	ite	lt
 800a0e8:	222d      	movlt	r2, #45	; 0x2d
 800a0ea:	222b      	movge	r2, #43	; 0x2b
 800a0ec:	2909      	cmp	r1, #9
 800a0ee:	7042      	strb	r2, [r0, #1]
 800a0f0:	dd2a      	ble.n	800a148 <__exponent+0x70>
 800a0f2:	f10d 0407 	add.w	r4, sp, #7
 800a0f6:	46a4      	mov	ip, r4
 800a0f8:	270a      	movs	r7, #10
 800a0fa:	46a6      	mov	lr, r4
 800a0fc:	460a      	mov	r2, r1
 800a0fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a102:	fb07 1516 	mls	r5, r7, r6, r1
 800a106:	3530      	adds	r5, #48	; 0x30
 800a108:	2a63      	cmp	r2, #99	; 0x63
 800a10a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a10e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a112:	4631      	mov	r1, r6
 800a114:	dcf1      	bgt.n	800a0fa <__exponent+0x22>
 800a116:	3130      	adds	r1, #48	; 0x30
 800a118:	f1ae 0502 	sub.w	r5, lr, #2
 800a11c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a120:	1c44      	adds	r4, r0, #1
 800a122:	4629      	mov	r1, r5
 800a124:	4561      	cmp	r1, ip
 800a126:	d30a      	bcc.n	800a13e <__exponent+0x66>
 800a128:	f10d 0209 	add.w	r2, sp, #9
 800a12c:	eba2 020e 	sub.w	r2, r2, lr
 800a130:	4565      	cmp	r5, ip
 800a132:	bf88      	it	hi
 800a134:	2200      	movhi	r2, #0
 800a136:	4413      	add	r3, r2
 800a138:	1a18      	subs	r0, r3, r0
 800a13a:	b003      	add	sp, #12
 800a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a142:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a146:	e7ed      	b.n	800a124 <__exponent+0x4c>
 800a148:	2330      	movs	r3, #48	; 0x30
 800a14a:	3130      	adds	r1, #48	; 0x30
 800a14c:	7083      	strb	r3, [r0, #2]
 800a14e:	70c1      	strb	r1, [r0, #3]
 800a150:	1d03      	adds	r3, r0, #4
 800a152:	e7f1      	b.n	800a138 <__exponent+0x60>
 800a154:	0000      	movs	r0, r0
	...

0800a158 <_printf_float>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	b08b      	sub	sp, #44	; 0x2c
 800a15e:	460c      	mov	r4, r1
 800a160:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a164:	4616      	mov	r6, r2
 800a166:	461f      	mov	r7, r3
 800a168:	4605      	mov	r5, r0
 800a16a:	f003 f8d1 	bl	800d310 <_localeconv_r>
 800a16e:	f8d0 b000 	ldr.w	fp, [r0]
 800a172:	4658      	mov	r0, fp
 800a174:	f7f6 f8b4 	bl	80002e0 <strlen>
 800a178:	2300      	movs	r3, #0
 800a17a:	9308      	str	r3, [sp, #32]
 800a17c:	f8d8 3000 	ldr.w	r3, [r8]
 800a180:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	3307      	adds	r3, #7
 800a188:	f023 0307 	bic.w	r3, r3, #7
 800a18c:	f103 0108 	add.w	r1, r3, #8
 800a190:	f8c8 1000 	str.w	r1, [r8]
 800a194:	4682      	mov	sl, r0
 800a196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a19a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a19e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a400 <_printf_float+0x2a8>
 800a1a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a1a6:	eeb0 6bc0 	vabs.f64	d6, d0
 800a1aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	dd24      	ble.n	800a1fe <_printf_float+0xa6>
 800a1b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1bc:	d502      	bpl.n	800a1c4 <_printf_float+0x6c>
 800a1be:	232d      	movs	r3, #45	; 0x2d
 800a1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c4:	4b90      	ldr	r3, [pc, #576]	; (800a408 <_printf_float+0x2b0>)
 800a1c6:	4891      	ldr	r0, [pc, #580]	; (800a40c <_printf_float+0x2b4>)
 800a1c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a1cc:	bf94      	ite	ls
 800a1ce:	4698      	movls	r8, r3
 800a1d0:	4680      	movhi	r8, r0
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	f022 0204 	bic.w	r2, r2, #4
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	9700      	str	r7, [sp, #0]
 800a1e2:	4633      	mov	r3, r6
 800a1e4:	aa09      	add	r2, sp, #36	; 0x24
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f000 f9d3 	bl	800a594 <_printf_common>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f040 808a 	bne.w	800a308 <_printf_float+0x1b0>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	b00b      	add	sp, #44	; 0x2c
 800a1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fe:	eeb4 0b40 	vcmp.f64	d0, d0
 800a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a206:	d709      	bvc.n	800a21c <_printf_float+0xc4>
 800a208:	ee10 3a90 	vmov	r3, s1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfbc      	itt	lt
 800a210:	232d      	movlt	r3, #45	; 0x2d
 800a212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a216:	487e      	ldr	r0, [pc, #504]	; (800a410 <_printf_float+0x2b8>)
 800a218:	4b7e      	ldr	r3, [pc, #504]	; (800a414 <_printf_float+0x2bc>)
 800a21a:	e7d5      	b.n	800a1c8 <_printf_float+0x70>
 800a21c:	6863      	ldr	r3, [r4, #4]
 800a21e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a222:	9104      	str	r1, [sp, #16]
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	d13c      	bne.n	800a2a2 <_printf_float+0x14a>
 800a228:	2306      	movs	r3, #6
 800a22a:	6063      	str	r3, [r4, #4]
 800a22c:	2300      	movs	r3, #0
 800a22e:	9303      	str	r3, [sp, #12]
 800a230:	ab08      	add	r3, sp, #32
 800a232:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a23a:	ab07      	add	r3, sp, #28
 800a23c:	6861      	ldr	r1, [r4, #4]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	f10d 031b 	add.w	r3, sp, #27
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff fef4 	bl	800a034 <__cvt>
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	9907      	ldr	r1, [sp, #28]
 800a250:	2b47      	cmp	r3, #71	; 0x47
 800a252:	4680      	mov	r8, r0
 800a254:	d108      	bne.n	800a268 <_printf_float+0x110>
 800a256:	1cc8      	adds	r0, r1, #3
 800a258:	db02      	blt.n	800a260 <_printf_float+0x108>
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	4299      	cmp	r1, r3
 800a25e:	dd41      	ble.n	800a2e4 <_printf_float+0x18c>
 800a260:	f1a9 0902 	sub.w	r9, r9, #2
 800a264:	fa5f f989 	uxtb.w	r9, r9
 800a268:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a26c:	d820      	bhi.n	800a2b0 <_printf_float+0x158>
 800a26e:	3901      	subs	r1, #1
 800a270:	464a      	mov	r2, r9
 800a272:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a276:	9107      	str	r1, [sp, #28]
 800a278:	f7ff ff2e 	bl	800a0d8 <__exponent>
 800a27c:	9a08      	ldr	r2, [sp, #32]
 800a27e:	9004      	str	r0, [sp, #16]
 800a280:	1813      	adds	r3, r2, r0
 800a282:	2a01      	cmp	r2, #1
 800a284:	6123      	str	r3, [r4, #16]
 800a286:	dc02      	bgt.n	800a28e <_printf_float+0x136>
 800a288:	6822      	ldr	r2, [r4, #0]
 800a28a:	07d2      	lsls	r2, r2, #31
 800a28c:	d501      	bpl.n	800a292 <_printf_float+0x13a>
 800a28e:	3301      	adds	r3, #1
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0a2      	beq.n	800a1e0 <_printf_float+0x88>
 800a29a:	232d      	movs	r3, #45	; 0x2d
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a0:	e79e      	b.n	800a1e0 <_printf_float+0x88>
 800a2a2:	9904      	ldr	r1, [sp, #16]
 800a2a4:	2947      	cmp	r1, #71	; 0x47
 800a2a6:	d1c1      	bne.n	800a22c <_printf_float+0xd4>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1bf      	bne.n	800a22c <_printf_float+0xd4>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e7bc      	b.n	800a22a <_printf_float+0xd2>
 800a2b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a2b4:	d118      	bne.n	800a2e8 <_printf_float+0x190>
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	dd0b      	ble.n	800a2d4 <_printf_float+0x17c>
 800a2bc:	6121      	str	r1, [r4, #16]
 800a2be:	b913      	cbnz	r3, 800a2c6 <_printf_float+0x16e>
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	07d0      	lsls	r0, r2, #31
 800a2c4:	d502      	bpl.n	800a2cc <_printf_float+0x174>
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	440b      	add	r3, r1
 800a2ca:	6123      	str	r3, [r4, #16]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	e7de      	b.n	800a292 <_printf_float+0x13a>
 800a2d4:	b913      	cbnz	r3, 800a2dc <_printf_float+0x184>
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	07d2      	lsls	r2, r2, #31
 800a2da:	d501      	bpl.n	800a2e0 <_printf_float+0x188>
 800a2dc:	3302      	adds	r3, #2
 800a2de:	e7f4      	b.n	800a2ca <_printf_float+0x172>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7f2      	b.n	800a2ca <_printf_float+0x172>
 800a2e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	db05      	blt.n	800a2fa <_printf_float+0x1a2>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	6121      	str	r1, [r4, #16]
 800a2f2:	07d8      	lsls	r0, r3, #31
 800a2f4:	d5ea      	bpl.n	800a2cc <_printf_float+0x174>
 800a2f6:	1c4b      	adds	r3, r1, #1
 800a2f8:	e7e7      	b.n	800a2ca <_printf_float+0x172>
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	bfd4      	ite	le
 800a2fe:	f1c1 0202 	rsble	r2, r1, #2
 800a302:	2201      	movgt	r2, #1
 800a304:	4413      	add	r3, r2
 800a306:	e7e0      	b.n	800a2ca <_printf_float+0x172>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	055a      	lsls	r2, r3, #21
 800a30c:	d407      	bmi.n	800a31e <_printf_float+0x1c6>
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	4642      	mov	r2, r8
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	d12a      	bne.n	800a372 <_printf_float+0x21a>
 800a31c:	e76a      	b.n	800a1f4 <_printf_float+0x9c>
 800a31e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a322:	f240 80e2 	bls.w	800a4ea <_printf_float+0x392>
 800a326:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a32a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a332:	d133      	bne.n	800a39c <_printf_float+0x244>
 800a334:	4a38      	ldr	r2, [pc, #224]	; (800a418 <_printf_float+0x2c0>)
 800a336:	2301      	movs	r3, #1
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f af58 	beq.w	800a1f4 <_printf_float+0x9c>
 800a344:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a348:	429a      	cmp	r2, r3
 800a34a:	db02      	blt.n	800a352 <_printf_float+0x1fa>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	07d8      	lsls	r0, r3, #31
 800a350:	d50f      	bpl.n	800a372 <_printf_float+0x21a>
 800a352:	4653      	mov	r3, sl
 800a354:	465a      	mov	r2, fp
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f af49 	beq.w	800a1f4 <_printf_float+0x9c>
 800a362:	f04f 0800 	mov.w	r8, #0
 800a366:	f104 091a 	add.w	r9, r4, #26
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	4543      	cmp	r3, r8
 800a370:	dc09      	bgt.n	800a386 <_printf_float+0x22e>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	079b      	lsls	r3, r3, #30
 800a376:	f100 8108 	bmi.w	800a58a <_printf_float+0x432>
 800a37a:	68e0      	ldr	r0, [r4, #12]
 800a37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37e:	4298      	cmp	r0, r3
 800a380:	bfb8      	it	lt
 800a382:	4618      	movlt	r0, r3
 800a384:	e738      	b.n	800a1f8 <_printf_float+0xa0>
 800a386:	2301      	movs	r3, #1
 800a388:	464a      	mov	r2, r9
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f af2f 	beq.w	800a1f4 <_printf_float+0x9c>
 800a396:	f108 0801 	add.w	r8, r8, #1
 800a39a:	e7e6      	b.n	800a36a <_printf_float+0x212>
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dc3c      	bgt.n	800a41c <_printf_float+0x2c4>
 800a3a2:	4a1d      	ldr	r2, [pc, #116]	; (800a418 <_printf_float+0x2c0>)
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f af21 	beq.w	800a1f4 <_printf_float+0x9c>
 800a3b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d102      	bne.n	800a3c0 <_printf_float+0x268>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	07d9      	lsls	r1, r3, #31
 800a3be:	d5d8      	bpl.n	800a372 <_printf_float+0x21a>
 800a3c0:	4653      	mov	r3, sl
 800a3c2:	465a      	mov	r2, fp
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f43f af12 	beq.w	800a1f4 <_printf_float+0x9c>
 800a3d0:	f04f 0900 	mov.w	r9, #0
 800a3d4:	f104 0a1a 	add.w	sl, r4, #26
 800a3d8:	9b07      	ldr	r3, [sp, #28]
 800a3da:	425b      	negs	r3, r3
 800a3dc:	454b      	cmp	r3, r9
 800a3de:	dc01      	bgt.n	800a3e4 <_printf_float+0x28c>
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	e795      	b.n	800a310 <_printf_float+0x1b8>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f af00 	beq.w	800a1f4 <_printf_float+0x9c>
 800a3f4:	f109 0901 	add.w	r9, r9, #1
 800a3f8:	e7ee      	b.n	800a3d8 <_printf_float+0x280>
 800a3fa:	bf00      	nop
 800a3fc:	f3af 8000 	nop.w
 800a400:	ffffffff 	.word	0xffffffff
 800a404:	7fefffff 	.word	0x7fefffff
 800a408:	0800f37c 	.word	0x0800f37c
 800a40c:	0800f380 	.word	0x0800f380
 800a410:	0800f388 	.word	0x0800f388
 800a414:	0800f384 	.word	0x0800f384
 800a418:	0800f38c 	.word	0x0800f38c
 800a41c:	9a08      	ldr	r2, [sp, #32]
 800a41e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a420:	429a      	cmp	r2, r3
 800a422:	bfa8      	it	ge
 800a424:	461a      	movge	r2, r3
 800a426:	2a00      	cmp	r2, #0
 800a428:	4691      	mov	r9, r2
 800a42a:	dc38      	bgt.n	800a49e <_printf_float+0x346>
 800a42c:	2300      	movs	r3, #0
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a434:	f104 021a 	add.w	r2, r4, #26
 800a438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a43a:	9905      	ldr	r1, [sp, #20]
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	eba3 0309 	sub.w	r3, r3, r9
 800a442:	428b      	cmp	r3, r1
 800a444:	dc33      	bgt.n	800a4ae <_printf_float+0x356>
 800a446:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	db3c      	blt.n	800a4c8 <_printf_float+0x370>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	07da      	lsls	r2, r3, #31
 800a452:	d439      	bmi.n	800a4c8 <_printf_float+0x370>
 800a454:	9b08      	ldr	r3, [sp, #32]
 800a456:	9a04      	ldr	r2, [sp, #16]
 800a458:	9907      	ldr	r1, [sp, #28]
 800a45a:	1a9a      	subs	r2, r3, r2
 800a45c:	eba3 0901 	sub.w	r9, r3, r1
 800a460:	4591      	cmp	r9, r2
 800a462:	bfa8      	it	ge
 800a464:	4691      	movge	r9, r2
 800a466:	f1b9 0f00 	cmp.w	r9, #0
 800a46a:	dc35      	bgt.n	800a4d8 <_printf_float+0x380>
 800a46c:	f04f 0800 	mov.w	r8, #0
 800a470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a474:	f104 0a1a 	add.w	sl, r4, #26
 800a478:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	eba3 0309 	sub.w	r3, r3, r9
 800a482:	4543      	cmp	r3, r8
 800a484:	f77f af75 	ble.w	800a372 <_printf_float+0x21a>
 800a488:	2301      	movs	r3, #1
 800a48a:	4652      	mov	r2, sl
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f aeae 	beq.w	800a1f4 <_printf_float+0x9c>
 800a498:	f108 0801 	add.w	r8, r8, #1
 800a49c:	e7ec      	b.n	800a478 <_printf_float+0x320>
 800a49e:	4613      	mov	r3, r2
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4642      	mov	r2, r8
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d1bf      	bne.n	800a42c <_printf_float+0x2d4>
 800a4ac:	e6a2      	b.n	800a1f4 <_printf_float+0x9c>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	9204      	str	r2, [sp, #16]
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f ae9b 	beq.w	800a1f4 <_printf_float+0x9c>
 800a4be:	9b05      	ldr	r3, [sp, #20]
 800a4c0:	9a04      	ldr	r2, [sp, #16]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	e7b7      	b.n	800a438 <_printf_float+0x2e0>
 800a4c8:	4653      	mov	r3, sl
 800a4ca:	465a      	mov	r2, fp
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d1be      	bne.n	800a454 <_printf_float+0x2fc>
 800a4d6:	e68d      	b.n	800a1f4 <_printf_float+0x9c>
 800a4d8:	9a04      	ldr	r2, [sp, #16]
 800a4da:	464b      	mov	r3, r9
 800a4dc:	4442      	add	r2, r8
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b8      	blx	r7
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d1c1      	bne.n	800a46c <_printf_float+0x314>
 800a4e8:	e684      	b.n	800a1f4 <_printf_float+0x9c>
 800a4ea:	9a08      	ldr	r2, [sp, #32]
 800a4ec:	2a01      	cmp	r2, #1
 800a4ee:	dc01      	bgt.n	800a4f4 <_printf_float+0x39c>
 800a4f0:	07db      	lsls	r3, r3, #31
 800a4f2:	d537      	bpl.n	800a564 <_printf_float+0x40c>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	f43f ae78 	beq.w	800a1f4 <_printf_float+0x9c>
 800a504:	4653      	mov	r3, sl
 800a506:	465a      	mov	r2, fp
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	f43f ae70 	beq.w	800a1f4 <_printf_float+0x9c>
 800a514:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a518:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a520:	d01b      	beq.n	800a55a <_printf_float+0x402>
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	f108 0201 	add.w	r2, r8, #1
 800a528:	3b01      	subs	r3, #1
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	d10e      	bne.n	800a552 <_printf_float+0x3fa>
 800a534:	e65e      	b.n	800a1f4 <_printf_float+0x9c>
 800a536:	2301      	movs	r3, #1
 800a538:	464a      	mov	r2, r9
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	f43f ae57 	beq.w	800a1f4 <_printf_float+0x9c>
 800a546:	f108 0801 	add.w	r8, r8, #1
 800a54a:	9b08      	ldr	r3, [sp, #32]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	4543      	cmp	r3, r8
 800a550:	dcf1      	bgt.n	800a536 <_printf_float+0x3de>
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a558:	e6db      	b.n	800a312 <_printf_float+0x1ba>
 800a55a:	f04f 0800 	mov.w	r8, #0
 800a55e:	f104 091a 	add.w	r9, r4, #26
 800a562:	e7f2      	b.n	800a54a <_printf_float+0x3f2>
 800a564:	2301      	movs	r3, #1
 800a566:	4642      	mov	r2, r8
 800a568:	e7df      	b.n	800a52a <_printf_float+0x3d2>
 800a56a:	2301      	movs	r3, #1
 800a56c:	464a      	mov	r2, r9
 800a56e:	4631      	mov	r1, r6
 800a570:	4628      	mov	r0, r5
 800a572:	47b8      	blx	r7
 800a574:	3001      	adds	r0, #1
 800a576:	f43f ae3d 	beq.w	800a1f4 <_printf_float+0x9c>
 800a57a:	f108 0801 	add.w	r8, r8, #1
 800a57e:	68e3      	ldr	r3, [r4, #12]
 800a580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a582:	1a5b      	subs	r3, r3, r1
 800a584:	4543      	cmp	r3, r8
 800a586:	dcf0      	bgt.n	800a56a <_printf_float+0x412>
 800a588:	e6f7      	b.n	800a37a <_printf_float+0x222>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	f104 0919 	add.w	r9, r4, #25
 800a592:	e7f4      	b.n	800a57e <_printf_float+0x426>

0800a594 <_printf_common>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	4616      	mov	r6, r2
 800a59a:	4699      	mov	r9, r3
 800a59c:	688a      	ldr	r2, [r1, #8]
 800a59e:	690b      	ldr	r3, [r1, #16]
 800a5a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	bfb8      	it	lt
 800a5a8:	4613      	movlt	r3, r2
 800a5aa:	6033      	str	r3, [r6, #0]
 800a5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b10a      	cbz	r2, 800a5ba <_printf_common+0x26>
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	6033      	str	r3, [r6, #0]
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	0699      	lsls	r1, r3, #26
 800a5be:	bf42      	ittt	mi
 800a5c0:	6833      	ldrmi	r3, [r6, #0]
 800a5c2:	3302      	addmi	r3, #2
 800a5c4:	6033      	strmi	r3, [r6, #0]
 800a5c6:	6825      	ldr	r5, [r4, #0]
 800a5c8:	f015 0506 	ands.w	r5, r5, #6
 800a5cc:	d106      	bne.n	800a5dc <_printf_common+0x48>
 800a5ce:	f104 0a19 	add.w	sl, r4, #25
 800a5d2:	68e3      	ldr	r3, [r4, #12]
 800a5d4:	6832      	ldr	r2, [r6, #0]
 800a5d6:	1a9b      	subs	r3, r3, r2
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	dc26      	bgt.n	800a62a <_printf_common+0x96>
 800a5dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5e0:	1e13      	subs	r3, r2, #0
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	bf18      	it	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	0692      	lsls	r2, r2, #26
 800a5ea:	d42b      	bmi.n	800a644 <_printf_common+0xb0>
 800a5ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	47c0      	blx	r8
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d01e      	beq.n	800a638 <_printf_common+0xa4>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	68e5      	ldr	r5, [r4, #12]
 800a5fe:	6832      	ldr	r2, [r6, #0]
 800a600:	f003 0306 	and.w	r3, r3, #6
 800a604:	2b04      	cmp	r3, #4
 800a606:	bf08      	it	eq
 800a608:	1aad      	subeq	r5, r5, r2
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	bf0c      	ite	eq
 800a610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a614:	2500      	movne	r5, #0
 800a616:	4293      	cmp	r3, r2
 800a618:	bfc4      	itt	gt
 800a61a:	1a9b      	subgt	r3, r3, r2
 800a61c:	18ed      	addgt	r5, r5, r3
 800a61e:	2600      	movs	r6, #0
 800a620:	341a      	adds	r4, #26
 800a622:	42b5      	cmp	r5, r6
 800a624:	d11a      	bne.n	800a65c <_printf_common+0xc8>
 800a626:	2000      	movs	r0, #0
 800a628:	e008      	b.n	800a63c <_printf_common+0xa8>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4652      	mov	r2, sl
 800a62e:	4649      	mov	r1, r9
 800a630:	4638      	mov	r0, r7
 800a632:	47c0      	blx	r8
 800a634:	3001      	adds	r0, #1
 800a636:	d103      	bne.n	800a640 <_printf_common+0xac>
 800a638:	f04f 30ff 	mov.w	r0, #4294967295
 800a63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a640:	3501      	adds	r5, #1
 800a642:	e7c6      	b.n	800a5d2 <_printf_common+0x3e>
 800a644:	18e1      	adds	r1, r4, r3
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	2030      	movs	r0, #48	; 0x30
 800a64a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a64e:	4422      	add	r2, r4
 800a650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a658:	3302      	adds	r3, #2
 800a65a:	e7c7      	b.n	800a5ec <_printf_common+0x58>
 800a65c:	2301      	movs	r3, #1
 800a65e:	4622      	mov	r2, r4
 800a660:	4649      	mov	r1, r9
 800a662:	4638      	mov	r0, r7
 800a664:	47c0      	blx	r8
 800a666:	3001      	adds	r0, #1
 800a668:	d0e6      	beq.n	800a638 <_printf_common+0xa4>
 800a66a:	3601      	adds	r6, #1
 800a66c:	e7d9      	b.n	800a622 <_printf_common+0x8e>
	...

0800a670 <_printf_i>:
 800a670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	7e0f      	ldrb	r7, [r1, #24]
 800a676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a678:	2f78      	cmp	r7, #120	; 0x78
 800a67a:	4691      	mov	r9, r2
 800a67c:	4680      	mov	r8, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	469a      	mov	sl, r3
 800a682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a686:	d807      	bhi.n	800a698 <_printf_i+0x28>
 800a688:	2f62      	cmp	r7, #98	; 0x62
 800a68a:	d80a      	bhi.n	800a6a2 <_printf_i+0x32>
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	f000 80d8 	beq.w	800a842 <_printf_i+0x1d2>
 800a692:	2f58      	cmp	r7, #88	; 0x58
 800a694:	f000 80a3 	beq.w	800a7de <_printf_i+0x16e>
 800a698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a69c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6a0:	e03a      	b.n	800a718 <_printf_i+0xa8>
 800a6a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6a6:	2b15      	cmp	r3, #21
 800a6a8:	d8f6      	bhi.n	800a698 <_printf_i+0x28>
 800a6aa:	a101      	add	r1, pc, #4	; (adr r1, 800a6b0 <_printf_i+0x40>)
 800a6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6b0:	0800a709 	.word	0x0800a709
 800a6b4:	0800a71d 	.word	0x0800a71d
 800a6b8:	0800a699 	.word	0x0800a699
 800a6bc:	0800a699 	.word	0x0800a699
 800a6c0:	0800a699 	.word	0x0800a699
 800a6c4:	0800a699 	.word	0x0800a699
 800a6c8:	0800a71d 	.word	0x0800a71d
 800a6cc:	0800a699 	.word	0x0800a699
 800a6d0:	0800a699 	.word	0x0800a699
 800a6d4:	0800a699 	.word	0x0800a699
 800a6d8:	0800a699 	.word	0x0800a699
 800a6dc:	0800a829 	.word	0x0800a829
 800a6e0:	0800a74d 	.word	0x0800a74d
 800a6e4:	0800a80b 	.word	0x0800a80b
 800a6e8:	0800a699 	.word	0x0800a699
 800a6ec:	0800a699 	.word	0x0800a699
 800a6f0:	0800a84b 	.word	0x0800a84b
 800a6f4:	0800a699 	.word	0x0800a699
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a699 	.word	0x0800a699
 800a700:	0800a699 	.word	0x0800a699
 800a704:	0800a813 	.word	0x0800a813
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	602a      	str	r2, [r5, #0]
 800a710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a718:	2301      	movs	r3, #1
 800a71a:	e0a3      	b.n	800a864 <_printf_i+0x1f4>
 800a71c:	6820      	ldr	r0, [r4, #0]
 800a71e:	6829      	ldr	r1, [r5, #0]
 800a720:	0606      	lsls	r6, r0, #24
 800a722:	f101 0304 	add.w	r3, r1, #4
 800a726:	d50a      	bpl.n	800a73e <_printf_i+0xce>
 800a728:	680e      	ldr	r6, [r1, #0]
 800a72a:	602b      	str	r3, [r5, #0]
 800a72c:	2e00      	cmp	r6, #0
 800a72e:	da03      	bge.n	800a738 <_printf_i+0xc8>
 800a730:	232d      	movs	r3, #45	; 0x2d
 800a732:	4276      	negs	r6, r6
 800a734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a738:	485e      	ldr	r0, [pc, #376]	; (800a8b4 <_printf_i+0x244>)
 800a73a:	230a      	movs	r3, #10
 800a73c:	e019      	b.n	800a772 <_printf_i+0x102>
 800a73e:	680e      	ldr	r6, [r1, #0]
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a746:	bf18      	it	ne
 800a748:	b236      	sxthne	r6, r6
 800a74a:	e7ef      	b.n	800a72c <_printf_i+0xbc>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	6820      	ldr	r0, [r4, #0]
 800a750:	1d19      	adds	r1, r3, #4
 800a752:	6029      	str	r1, [r5, #0]
 800a754:	0601      	lsls	r1, r0, #24
 800a756:	d501      	bpl.n	800a75c <_printf_i+0xec>
 800a758:	681e      	ldr	r6, [r3, #0]
 800a75a:	e002      	b.n	800a762 <_printf_i+0xf2>
 800a75c:	0646      	lsls	r6, r0, #25
 800a75e:	d5fb      	bpl.n	800a758 <_printf_i+0xe8>
 800a760:	881e      	ldrh	r6, [r3, #0]
 800a762:	4854      	ldr	r0, [pc, #336]	; (800a8b4 <_printf_i+0x244>)
 800a764:	2f6f      	cmp	r7, #111	; 0x6f
 800a766:	bf0c      	ite	eq
 800a768:	2308      	moveq	r3, #8
 800a76a:	230a      	movne	r3, #10
 800a76c:	2100      	movs	r1, #0
 800a76e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a772:	6865      	ldr	r5, [r4, #4]
 800a774:	60a5      	str	r5, [r4, #8]
 800a776:	2d00      	cmp	r5, #0
 800a778:	bfa2      	ittt	ge
 800a77a:	6821      	ldrge	r1, [r4, #0]
 800a77c:	f021 0104 	bicge.w	r1, r1, #4
 800a780:	6021      	strge	r1, [r4, #0]
 800a782:	b90e      	cbnz	r6, 800a788 <_printf_i+0x118>
 800a784:	2d00      	cmp	r5, #0
 800a786:	d04d      	beq.n	800a824 <_printf_i+0x1b4>
 800a788:	4615      	mov	r5, r2
 800a78a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a78e:	fb03 6711 	mls	r7, r3, r1, r6
 800a792:	5dc7      	ldrb	r7, [r0, r7]
 800a794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a798:	4637      	mov	r7, r6
 800a79a:	42bb      	cmp	r3, r7
 800a79c:	460e      	mov	r6, r1
 800a79e:	d9f4      	bls.n	800a78a <_printf_i+0x11a>
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d10b      	bne.n	800a7bc <_printf_i+0x14c>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07de      	lsls	r6, r3, #31
 800a7a8:	d508      	bpl.n	800a7bc <_printf_i+0x14c>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	6861      	ldr	r1, [r4, #4]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	bfde      	ittt	le
 800a7b2:	2330      	movle	r3, #48	; 0x30
 800a7b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7bc:	1b52      	subs	r2, r2, r5
 800a7be:	6122      	str	r2, [r4, #16]
 800a7c0:	f8cd a000 	str.w	sl, [sp]
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	aa03      	add	r2, sp, #12
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	f7ff fee2 	bl	800a594 <_printf_common>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d14c      	bne.n	800a86e <_printf_i+0x1fe>
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	b004      	add	sp, #16
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	4835      	ldr	r0, [pc, #212]	; (800a8b4 <_printf_i+0x244>)
 800a7e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7e4:	6829      	ldr	r1, [r5, #0]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7ec:	6029      	str	r1, [r5, #0]
 800a7ee:	061d      	lsls	r5, r3, #24
 800a7f0:	d514      	bpl.n	800a81c <_printf_i+0x1ac>
 800a7f2:	07df      	lsls	r7, r3, #31
 800a7f4:	bf44      	itt	mi
 800a7f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7fa:	6023      	strmi	r3, [r4, #0]
 800a7fc:	b91e      	cbnz	r6, 800a806 <_printf_i+0x196>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	f023 0320 	bic.w	r3, r3, #32
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	2310      	movs	r3, #16
 800a808:	e7b0      	b.n	800a76c <_printf_i+0xfc>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	f043 0320 	orr.w	r3, r3, #32
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	2378      	movs	r3, #120	; 0x78
 800a814:	4828      	ldr	r0, [pc, #160]	; (800a8b8 <_printf_i+0x248>)
 800a816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a81a:	e7e3      	b.n	800a7e4 <_printf_i+0x174>
 800a81c:	0659      	lsls	r1, r3, #25
 800a81e:	bf48      	it	mi
 800a820:	b2b6      	uxthmi	r6, r6
 800a822:	e7e6      	b.n	800a7f2 <_printf_i+0x182>
 800a824:	4615      	mov	r5, r2
 800a826:	e7bb      	b.n	800a7a0 <_printf_i+0x130>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	6826      	ldr	r6, [r4, #0]
 800a82c:	6961      	ldr	r1, [r4, #20]
 800a82e:	1d18      	adds	r0, r3, #4
 800a830:	6028      	str	r0, [r5, #0]
 800a832:	0635      	lsls	r5, r6, #24
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	d501      	bpl.n	800a83c <_printf_i+0x1cc>
 800a838:	6019      	str	r1, [r3, #0]
 800a83a:	e002      	b.n	800a842 <_printf_i+0x1d2>
 800a83c:	0670      	lsls	r0, r6, #25
 800a83e:	d5fb      	bpl.n	800a838 <_printf_i+0x1c8>
 800a840:	8019      	strh	r1, [r3, #0]
 800a842:	2300      	movs	r3, #0
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	4615      	mov	r5, r2
 800a848:	e7ba      	b.n	800a7c0 <_printf_i+0x150>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	1d1a      	adds	r2, r3, #4
 800a84e:	602a      	str	r2, [r5, #0]
 800a850:	681d      	ldr	r5, [r3, #0]
 800a852:	6862      	ldr	r2, [r4, #4]
 800a854:	2100      	movs	r1, #0
 800a856:	4628      	mov	r0, r5
 800a858:	f7f5 fd4a 	bl	80002f0 <memchr>
 800a85c:	b108      	cbz	r0, 800a862 <_printf_i+0x1f2>
 800a85e:	1b40      	subs	r0, r0, r5
 800a860:	6060      	str	r0, [r4, #4]
 800a862:	6863      	ldr	r3, [r4, #4]
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	2300      	movs	r3, #0
 800a868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a86c:	e7a8      	b.n	800a7c0 <_printf_i+0x150>
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	462a      	mov	r2, r5
 800a872:	4649      	mov	r1, r9
 800a874:	4640      	mov	r0, r8
 800a876:	47d0      	blx	sl
 800a878:	3001      	adds	r0, #1
 800a87a:	d0ab      	beq.n	800a7d4 <_printf_i+0x164>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	079b      	lsls	r3, r3, #30
 800a880:	d413      	bmi.n	800a8aa <_printf_i+0x23a>
 800a882:	68e0      	ldr	r0, [r4, #12]
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	4298      	cmp	r0, r3
 800a888:	bfb8      	it	lt
 800a88a:	4618      	movlt	r0, r3
 800a88c:	e7a4      	b.n	800a7d8 <_printf_i+0x168>
 800a88e:	2301      	movs	r3, #1
 800a890:	4632      	mov	r2, r6
 800a892:	4649      	mov	r1, r9
 800a894:	4640      	mov	r0, r8
 800a896:	47d0      	blx	sl
 800a898:	3001      	adds	r0, #1
 800a89a:	d09b      	beq.n	800a7d4 <_printf_i+0x164>
 800a89c:	3501      	adds	r5, #1
 800a89e:	68e3      	ldr	r3, [r4, #12]
 800a8a0:	9903      	ldr	r1, [sp, #12]
 800a8a2:	1a5b      	subs	r3, r3, r1
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	dcf2      	bgt.n	800a88e <_printf_i+0x21e>
 800a8a8:	e7eb      	b.n	800a882 <_printf_i+0x212>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	f104 0619 	add.w	r6, r4, #25
 800a8b0:	e7f5      	b.n	800a89e <_printf_i+0x22e>
 800a8b2:	bf00      	nop
 800a8b4:	0800f38e 	.word	0x0800f38e
 800a8b8:	0800f39f 	.word	0x0800f39f

0800a8bc <_scanf_float>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b087      	sub	sp, #28
 800a8c2:	4617      	mov	r7, r2
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	688b      	ldr	r3, [r1, #8]
 800a8c8:	1e5a      	subs	r2, r3, #1
 800a8ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a8ce:	bf83      	ittte	hi
 800a8d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a8d4:	195b      	addhi	r3, r3, r5
 800a8d6:	9302      	strhi	r3, [sp, #8]
 800a8d8:	2300      	movls	r3, #0
 800a8da:	bf86      	itte	hi
 800a8dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a8e0:	608b      	strhi	r3, [r1, #8]
 800a8e2:	9302      	strls	r3, [sp, #8]
 800a8e4:	680b      	ldr	r3, [r1, #0]
 800a8e6:	468b      	mov	fp, r1
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a8ee:	f84b 3b1c 	str.w	r3, [fp], #28
 800a8f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	465e      	mov	r6, fp
 800a8fc:	46aa      	mov	sl, r5
 800a8fe:	46a9      	mov	r9, r5
 800a900:	9501      	str	r5, [sp, #4]
 800a902:	68a2      	ldr	r2, [r4, #8]
 800a904:	b152      	cbz	r2, 800a91c <_scanf_float+0x60>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b4e      	cmp	r3, #78	; 0x4e
 800a90c:	d864      	bhi.n	800a9d8 <_scanf_float+0x11c>
 800a90e:	2b40      	cmp	r3, #64	; 0x40
 800a910:	d83c      	bhi.n	800a98c <_scanf_float+0xd0>
 800a912:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a916:	b2c8      	uxtb	r0, r1
 800a918:	280e      	cmp	r0, #14
 800a91a:	d93a      	bls.n	800a992 <_scanf_float+0xd6>
 800a91c:	f1b9 0f00 	cmp.w	r9, #0
 800a920:	d003      	beq.n	800a92a <_scanf_float+0x6e>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a92e:	f1ba 0f01 	cmp.w	sl, #1
 800a932:	f200 8113 	bhi.w	800ab5c <_scanf_float+0x2a0>
 800a936:	455e      	cmp	r6, fp
 800a938:	f200 8105 	bhi.w	800ab46 <_scanf_float+0x28a>
 800a93c:	2501      	movs	r5, #1
 800a93e:	4628      	mov	r0, r5
 800a940:	b007      	add	sp, #28
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a94a:	2a0d      	cmp	r2, #13
 800a94c:	d8e6      	bhi.n	800a91c <_scanf_float+0x60>
 800a94e:	a101      	add	r1, pc, #4	; (adr r1, 800a954 <_scanf_float+0x98>)
 800a950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a954:	0800aa93 	.word	0x0800aa93
 800a958:	0800a91d 	.word	0x0800a91d
 800a95c:	0800a91d 	.word	0x0800a91d
 800a960:	0800a91d 	.word	0x0800a91d
 800a964:	0800aaf3 	.word	0x0800aaf3
 800a968:	0800aacb 	.word	0x0800aacb
 800a96c:	0800a91d 	.word	0x0800a91d
 800a970:	0800a91d 	.word	0x0800a91d
 800a974:	0800aaa1 	.word	0x0800aaa1
 800a978:	0800a91d 	.word	0x0800a91d
 800a97c:	0800a91d 	.word	0x0800a91d
 800a980:	0800a91d 	.word	0x0800a91d
 800a984:	0800a91d 	.word	0x0800a91d
 800a988:	0800aa59 	.word	0x0800aa59
 800a98c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a990:	e7db      	b.n	800a94a <_scanf_float+0x8e>
 800a992:	290e      	cmp	r1, #14
 800a994:	d8c2      	bhi.n	800a91c <_scanf_float+0x60>
 800a996:	a001      	add	r0, pc, #4	; (adr r0, 800a99c <_scanf_float+0xe0>)
 800a998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a99c:	0800aa4b 	.word	0x0800aa4b
 800a9a0:	0800a91d 	.word	0x0800a91d
 800a9a4:	0800aa4b 	.word	0x0800aa4b
 800a9a8:	0800aadf 	.word	0x0800aadf
 800a9ac:	0800a91d 	.word	0x0800a91d
 800a9b0:	0800a9f9 	.word	0x0800a9f9
 800a9b4:	0800aa35 	.word	0x0800aa35
 800a9b8:	0800aa35 	.word	0x0800aa35
 800a9bc:	0800aa35 	.word	0x0800aa35
 800a9c0:	0800aa35 	.word	0x0800aa35
 800a9c4:	0800aa35 	.word	0x0800aa35
 800a9c8:	0800aa35 	.word	0x0800aa35
 800a9cc:	0800aa35 	.word	0x0800aa35
 800a9d0:	0800aa35 	.word	0x0800aa35
 800a9d4:	0800aa35 	.word	0x0800aa35
 800a9d8:	2b6e      	cmp	r3, #110	; 0x6e
 800a9da:	d809      	bhi.n	800a9f0 <_scanf_float+0x134>
 800a9dc:	2b60      	cmp	r3, #96	; 0x60
 800a9de:	d8b2      	bhi.n	800a946 <_scanf_float+0x8a>
 800a9e0:	2b54      	cmp	r3, #84	; 0x54
 800a9e2:	d077      	beq.n	800aad4 <_scanf_float+0x218>
 800a9e4:	2b59      	cmp	r3, #89	; 0x59
 800a9e6:	d199      	bne.n	800a91c <_scanf_float+0x60>
 800a9e8:	2d07      	cmp	r5, #7
 800a9ea:	d197      	bne.n	800a91c <_scanf_float+0x60>
 800a9ec:	2508      	movs	r5, #8
 800a9ee:	e029      	b.n	800aa44 <_scanf_float+0x188>
 800a9f0:	2b74      	cmp	r3, #116	; 0x74
 800a9f2:	d06f      	beq.n	800aad4 <_scanf_float+0x218>
 800a9f4:	2b79      	cmp	r3, #121	; 0x79
 800a9f6:	e7f6      	b.n	800a9e6 <_scanf_float+0x12a>
 800a9f8:	6821      	ldr	r1, [r4, #0]
 800a9fa:	05c8      	lsls	r0, r1, #23
 800a9fc:	d51a      	bpl.n	800aa34 <_scanf_float+0x178>
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aa04:	6021      	str	r1, [r4, #0]
 800aa06:	f109 0901 	add.w	r9, r9, #1
 800aa0a:	b11b      	cbz	r3, 800aa14 <_scanf_float+0x158>
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	3201      	adds	r2, #1
 800aa10:	9302      	str	r3, [sp, #8]
 800aa12:	60a2      	str	r2, [r4, #8]
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	60a3      	str	r3, [r4, #8]
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	607b      	str	r3, [r7, #4]
 800aa28:	f340 8084 	ble.w	800ab34 <_scanf_float+0x278>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	603b      	str	r3, [r7, #0]
 800aa32:	e766      	b.n	800a902 <_scanf_float+0x46>
 800aa34:	eb1a 0f05 	cmn.w	sl, r5
 800aa38:	f47f af70 	bne.w	800a91c <_scanf_float+0x60>
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	f806 3b01 	strb.w	r3, [r6], #1
 800aa48:	e7e4      	b.n	800aa14 <_scanf_float+0x158>
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	0610      	lsls	r0, r2, #24
 800aa4e:	f57f af65 	bpl.w	800a91c <_scanf_float+0x60>
 800aa52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa56:	e7f4      	b.n	800aa42 <_scanf_float+0x186>
 800aa58:	f1ba 0f00 	cmp.w	sl, #0
 800aa5c:	d10e      	bne.n	800aa7c <_scanf_float+0x1c0>
 800aa5e:	f1b9 0f00 	cmp.w	r9, #0
 800aa62:	d10e      	bne.n	800aa82 <_scanf_float+0x1c6>
 800aa64:	6822      	ldr	r2, [r4, #0]
 800aa66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aa6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa6e:	d108      	bne.n	800aa82 <_scanf_float+0x1c6>
 800aa70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	f04f 0a01 	mov.w	sl, #1
 800aa7a:	e7e3      	b.n	800aa44 <_scanf_float+0x188>
 800aa7c:	f1ba 0f02 	cmp.w	sl, #2
 800aa80:	d055      	beq.n	800ab2e <_scanf_float+0x272>
 800aa82:	2d01      	cmp	r5, #1
 800aa84:	d002      	beq.n	800aa8c <_scanf_float+0x1d0>
 800aa86:	2d04      	cmp	r5, #4
 800aa88:	f47f af48 	bne.w	800a91c <_scanf_float+0x60>
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	b2ed      	uxtb	r5, r5
 800aa90:	e7d8      	b.n	800aa44 <_scanf_float+0x188>
 800aa92:	f1ba 0f01 	cmp.w	sl, #1
 800aa96:	f47f af41 	bne.w	800a91c <_scanf_float+0x60>
 800aa9a:	f04f 0a02 	mov.w	sl, #2
 800aa9e:	e7d1      	b.n	800aa44 <_scanf_float+0x188>
 800aaa0:	b97d      	cbnz	r5, 800aac2 <_scanf_float+0x206>
 800aaa2:	f1b9 0f00 	cmp.w	r9, #0
 800aaa6:	f47f af3c 	bne.w	800a922 <_scanf_float+0x66>
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aab0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aab4:	f47f af39 	bne.w	800a92a <_scanf_float+0x6e>
 800aab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aabc:	6022      	str	r2, [r4, #0]
 800aabe:	2501      	movs	r5, #1
 800aac0:	e7c0      	b.n	800aa44 <_scanf_float+0x188>
 800aac2:	2d03      	cmp	r5, #3
 800aac4:	d0e2      	beq.n	800aa8c <_scanf_float+0x1d0>
 800aac6:	2d05      	cmp	r5, #5
 800aac8:	e7de      	b.n	800aa88 <_scanf_float+0x1cc>
 800aaca:	2d02      	cmp	r5, #2
 800aacc:	f47f af26 	bne.w	800a91c <_scanf_float+0x60>
 800aad0:	2503      	movs	r5, #3
 800aad2:	e7b7      	b.n	800aa44 <_scanf_float+0x188>
 800aad4:	2d06      	cmp	r5, #6
 800aad6:	f47f af21 	bne.w	800a91c <_scanf_float+0x60>
 800aada:	2507      	movs	r5, #7
 800aadc:	e7b2      	b.n	800aa44 <_scanf_float+0x188>
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	0591      	lsls	r1, r2, #22
 800aae2:	f57f af1b 	bpl.w	800a91c <_scanf_float+0x60>
 800aae6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aaea:	6022      	str	r2, [r4, #0]
 800aaec:	f8cd 9004 	str.w	r9, [sp, #4]
 800aaf0:	e7a8      	b.n	800aa44 <_scanf_float+0x188>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aaf8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aafc:	d006      	beq.n	800ab0c <_scanf_float+0x250>
 800aafe:	0550      	lsls	r0, r2, #21
 800ab00:	f57f af0c 	bpl.w	800a91c <_scanf_float+0x60>
 800ab04:	f1b9 0f00 	cmp.w	r9, #0
 800ab08:	f43f af0f 	beq.w	800a92a <_scanf_float+0x6e>
 800ab0c:	0591      	lsls	r1, r2, #22
 800ab0e:	bf58      	it	pl
 800ab10:	9901      	ldrpl	r1, [sp, #4]
 800ab12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab16:	bf58      	it	pl
 800ab18:	eba9 0101 	subpl.w	r1, r9, r1
 800ab1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ab20:	bf58      	it	pl
 800ab22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	f04f 0900 	mov.w	r9, #0
 800ab2c:	e78a      	b.n	800aa44 <_scanf_float+0x188>
 800ab2e:	f04f 0a03 	mov.w	sl, #3
 800ab32:	e787      	b.n	800aa44 <_scanf_float+0x188>
 800ab34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4798      	blx	r3
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f43f aedf 	beq.w	800a902 <_scanf_float+0x46>
 800ab44:	e6ea      	b.n	800a91c <_scanf_float+0x60>
 800ab46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab4e:	463a      	mov	r2, r7
 800ab50:	4640      	mov	r0, r8
 800ab52:	4798      	blx	r3
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	e6ec      	b.n	800a936 <_scanf_float+0x7a>
 800ab5c:	1e6b      	subs	r3, r5, #1
 800ab5e:	2b06      	cmp	r3, #6
 800ab60:	d825      	bhi.n	800abae <_scanf_float+0x2f2>
 800ab62:	2d02      	cmp	r5, #2
 800ab64:	d836      	bhi.n	800abd4 <_scanf_float+0x318>
 800ab66:	455e      	cmp	r6, fp
 800ab68:	f67f aee8 	bls.w	800a93c <_scanf_float+0x80>
 800ab6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab74:	463a      	mov	r2, r7
 800ab76:	4640      	mov	r0, r8
 800ab78:	4798      	blx	r3
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	e7f1      	b.n	800ab66 <_scanf_float+0x2aa>
 800ab82:	9802      	ldr	r0, [sp, #8]
 800ab84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	463a      	mov	r2, r7
 800ab90:	4640      	mov	r0, r8
 800ab92:	4798      	blx	r3
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab9e:	fa5f fa8a 	uxtb.w	sl, sl
 800aba2:	f1ba 0f02 	cmp.w	sl, #2
 800aba6:	d1ec      	bne.n	800ab82 <_scanf_float+0x2c6>
 800aba8:	3d03      	subs	r5, #3
 800abaa:	b2ed      	uxtb	r5, r5
 800abac:	1b76      	subs	r6, r6, r5
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	05da      	lsls	r2, r3, #23
 800abb2:	d52f      	bpl.n	800ac14 <_scanf_float+0x358>
 800abb4:	055b      	lsls	r3, r3, #21
 800abb6:	d510      	bpl.n	800abda <_scanf_float+0x31e>
 800abb8:	455e      	cmp	r6, fp
 800abba:	f67f aebf 	bls.w	800a93c <_scanf_float+0x80>
 800abbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abc6:	463a      	mov	r2, r7
 800abc8:	4640      	mov	r0, r8
 800abca:	4798      	blx	r3
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	3b01      	subs	r3, #1
 800abd0:	6123      	str	r3, [r4, #16]
 800abd2:	e7f1      	b.n	800abb8 <_scanf_float+0x2fc>
 800abd4:	46aa      	mov	sl, r5
 800abd6:	9602      	str	r6, [sp, #8]
 800abd8:	e7df      	b.n	800ab9a <_scanf_float+0x2de>
 800abda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	2965      	cmp	r1, #101	; 0x65
 800abe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800abe6:	f106 35ff 	add.w	r5, r6, #4294967295
 800abea:	6123      	str	r3, [r4, #16]
 800abec:	d00c      	beq.n	800ac08 <_scanf_float+0x34c>
 800abee:	2945      	cmp	r1, #69	; 0x45
 800abf0:	d00a      	beq.n	800ac08 <_scanf_float+0x34c>
 800abf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abf6:	463a      	mov	r2, r7
 800abf8:	4640      	mov	r0, r8
 800abfa:	4798      	blx	r3
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	1eb5      	subs	r5, r6, #2
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac0c:	463a      	mov	r2, r7
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4798      	blx	r3
 800ac12:	462e      	mov	r6, r5
 800ac14:	6825      	ldr	r5, [r4, #0]
 800ac16:	f015 0510 	ands.w	r5, r5, #16
 800ac1a:	d14e      	bne.n	800acba <_scanf_float+0x3fe>
 800ac1c:	7035      	strb	r5, [r6, #0]
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac28:	d119      	bne.n	800ac5e <_scanf_float+0x3a2>
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	454b      	cmp	r3, r9
 800ac2e:	eba3 0209 	sub.w	r2, r3, r9
 800ac32:	d121      	bne.n	800ac78 <_scanf_float+0x3bc>
 800ac34:	2200      	movs	r2, #0
 800ac36:	4659      	mov	r1, fp
 800ac38:	4640      	mov	r0, r8
 800ac3a:	f000 feff 	bl	800ba3c <_strtod_r>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	f012 0f02 	tst.w	r2, #2
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	d021      	beq.n	800ac8e <_scanf_float+0x3d2>
 800ac4a:	9903      	ldr	r1, [sp, #12]
 800ac4c:	1d1a      	adds	r2, r3, #4
 800ac4e:	600a      	str	r2, [r1, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	ed83 0b00 	vstr	d0, [r3]
 800ac56:	68e3      	ldr	r3, [r4, #12]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	60e3      	str	r3, [r4, #12]
 800ac5c:	e66f      	b.n	800a93e <_scanf_float+0x82>
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0e7      	beq.n	800ac34 <_scanf_float+0x378>
 800ac64:	9905      	ldr	r1, [sp, #20]
 800ac66:	230a      	movs	r3, #10
 800ac68:	462a      	mov	r2, r5
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	f000 ff6d 	bl	800bb4c <_strtol_r>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	9e05      	ldr	r6, [sp, #20]
 800ac76:	1ac2      	subs	r2, r0, r3
 800ac78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ac7c:	429e      	cmp	r6, r3
 800ac7e:	bf28      	it	cs
 800ac80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ac84:	490e      	ldr	r1, [pc, #56]	; (800acc0 <_scanf_float+0x404>)
 800ac86:	4630      	mov	r0, r6
 800ac88:	f000 f8e6 	bl	800ae58 <siprintf>
 800ac8c:	e7d2      	b.n	800ac34 <_scanf_float+0x378>
 800ac8e:	9903      	ldr	r1, [sp, #12]
 800ac90:	f012 0f04 	tst.w	r2, #4
 800ac94:	f103 0204 	add.w	r2, r3, #4
 800ac98:	600a      	str	r2, [r1, #0]
 800ac9a:	d1d9      	bne.n	800ac50 <_scanf_float+0x394>
 800ac9c:	eeb4 0b40 	vcmp.f64	d0, d0
 800aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca4:	681e      	ldr	r6, [r3, #0]
 800aca6:	d705      	bvc.n	800acb4 <_scanf_float+0x3f8>
 800aca8:	4806      	ldr	r0, [pc, #24]	; (800acc4 <_scanf_float+0x408>)
 800acaa:	f000 f89b 	bl	800ade4 <nanf>
 800acae:	ed86 0a00 	vstr	s0, [r6]
 800acb2:	e7d0      	b.n	800ac56 <_scanf_float+0x39a>
 800acb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800acb8:	e7f9      	b.n	800acae <_scanf_float+0x3f2>
 800acba:	2500      	movs	r5, #0
 800acbc:	e63f      	b.n	800a93e <_scanf_float+0x82>
 800acbe:	bf00      	nop
 800acc0:	0800f3b0 	.word	0x0800f3b0
 800acc4:	0800f820 	.word	0x0800f820

0800acc8 <iprintf>:
 800acc8:	b40f      	push	{r0, r1, r2, r3}
 800acca:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <iprintf+0x2c>)
 800accc:	b513      	push	{r0, r1, r4, lr}
 800acce:	681c      	ldr	r4, [r3, #0]
 800acd0:	b124      	cbz	r4, 800acdc <iprintf+0x14>
 800acd2:	69a3      	ldr	r3, [r4, #24]
 800acd4:	b913      	cbnz	r3, 800acdc <iprintf+0x14>
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 ff0e 	bl	800caf8 <__sinit>
 800acdc:	ab05      	add	r3, sp, #20
 800acde:	9a04      	ldr	r2, [sp, #16]
 800ace0:	68a1      	ldr	r1, [r4, #8]
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	4620      	mov	r0, r4
 800ace6:	f003 fad3 	bl	800e290 <_vfiprintf_r>
 800acea:	b002      	add	sp, #8
 800acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf0:	b004      	add	sp, #16
 800acf2:	4770      	bx	lr
 800acf4:	24000030 	.word	0x24000030

0800acf8 <_puts_r>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	460e      	mov	r6, r1
 800acfc:	4605      	mov	r5, r0
 800acfe:	b118      	cbz	r0, 800ad08 <_puts_r+0x10>
 800ad00:	6983      	ldr	r3, [r0, #24]
 800ad02:	b90b      	cbnz	r3, 800ad08 <_puts_r+0x10>
 800ad04:	f001 fef8 	bl	800caf8 <__sinit>
 800ad08:	69ab      	ldr	r3, [r5, #24]
 800ad0a:	68ac      	ldr	r4, [r5, #8]
 800ad0c:	b913      	cbnz	r3, 800ad14 <_puts_r+0x1c>
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f001 fef2 	bl	800caf8 <__sinit>
 800ad14:	4b2c      	ldr	r3, [pc, #176]	; (800adc8 <_puts_r+0xd0>)
 800ad16:	429c      	cmp	r4, r3
 800ad18:	d120      	bne.n	800ad5c <_puts_r+0x64>
 800ad1a:	686c      	ldr	r4, [r5, #4]
 800ad1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad1e:	07db      	lsls	r3, r3, #31
 800ad20:	d405      	bmi.n	800ad2e <_puts_r+0x36>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	0598      	lsls	r0, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_puts_r+0x36>
 800ad28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2a:	f002 faf6 	bl	800d31a <__retarget_lock_acquire_recursive>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	0719      	lsls	r1, r3, #28
 800ad32:	d51d      	bpl.n	800ad70 <_puts_r+0x78>
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	b1db      	cbz	r3, 800ad70 <_puts_r+0x78>
 800ad38:	3e01      	subs	r6, #1
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad40:	3b01      	subs	r3, #1
 800ad42:	60a3      	str	r3, [r4, #8]
 800ad44:	bb39      	cbnz	r1, 800ad96 <_puts_r+0x9e>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da38      	bge.n	800adbc <_puts_r+0xc4>
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	210a      	movs	r1, #10
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 fefe 	bl	800bb50 <__swbuf_r>
 800ad54:	3001      	adds	r0, #1
 800ad56:	d011      	beq.n	800ad7c <_puts_r+0x84>
 800ad58:	250a      	movs	r5, #10
 800ad5a:	e011      	b.n	800ad80 <_puts_r+0x88>
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	; (800adcc <_puts_r+0xd4>)
 800ad5e:	429c      	cmp	r4, r3
 800ad60:	d101      	bne.n	800ad66 <_puts_r+0x6e>
 800ad62:	68ac      	ldr	r4, [r5, #8]
 800ad64:	e7da      	b.n	800ad1c <_puts_r+0x24>
 800ad66:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <_puts_r+0xd8>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	bf08      	it	eq
 800ad6c:	68ec      	ldreq	r4, [r5, #12]
 800ad6e:	e7d5      	b.n	800ad1c <_puts_r+0x24>
 800ad70:	4621      	mov	r1, r4
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 ff3e 	bl	800bbf4 <__swsetup_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d0dd      	beq.n	800ad38 <_puts_r+0x40>
 800ad7c:	f04f 35ff 	mov.w	r5, #4294967295
 800ad80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad82:	07da      	lsls	r2, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_puts_r+0x9a>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	059b      	lsls	r3, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_puts_r+0x9a>
 800ad8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8e:	f002 fac5 	bl	800d31c <__retarget_lock_release_recursive>
 800ad92:	4628      	mov	r0, r5
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	da04      	bge.n	800ada4 <_puts_r+0xac>
 800ad9a:	69a2      	ldr	r2, [r4, #24]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	dc06      	bgt.n	800adae <_puts_r+0xb6>
 800ada0:	290a      	cmp	r1, #10
 800ada2:	d004      	beq.n	800adae <_puts_r+0xb6>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	6022      	str	r2, [r4, #0]
 800adaa:	7019      	strb	r1, [r3, #0]
 800adac:	e7c5      	b.n	800ad3a <_puts_r+0x42>
 800adae:	4622      	mov	r2, r4
 800adb0:	4628      	mov	r0, r5
 800adb2:	f000 fecd 	bl	800bb50 <__swbuf_r>
 800adb6:	3001      	adds	r0, #1
 800adb8:	d1bf      	bne.n	800ad3a <_puts_r+0x42>
 800adba:	e7df      	b.n	800ad7c <_puts_r+0x84>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	250a      	movs	r5, #10
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	6022      	str	r2, [r4, #0]
 800adc4:	701d      	strb	r5, [r3, #0]
 800adc6:	e7db      	b.n	800ad80 <_puts_r+0x88>
 800adc8:	0800f5bc 	.word	0x0800f5bc
 800adcc:	0800f5dc 	.word	0x0800f5dc
 800add0:	0800f59c 	.word	0x0800f59c

0800add4 <puts>:
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <puts+0xc>)
 800add6:	4601      	mov	r1, r0
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f7ff bf8d 	b.w	800acf8 <_puts_r>
 800adde:	bf00      	nop
 800ade0:	24000030 	.word	0x24000030

0800ade4 <nanf>:
 800ade4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800adec <nanf+0x8>
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	7fc00000 	.word	0x7fc00000

0800adf0 <sniprintf>:
 800adf0:	b40c      	push	{r2, r3}
 800adf2:	b530      	push	{r4, r5, lr}
 800adf4:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <sniprintf+0x64>)
 800adf6:	1e0c      	subs	r4, r1, #0
 800adf8:	681d      	ldr	r5, [r3, #0]
 800adfa:	b09d      	sub	sp, #116	; 0x74
 800adfc:	da08      	bge.n	800ae10 <sniprintf+0x20>
 800adfe:	238b      	movs	r3, #139	; 0x8b
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295
 800ae06:	b01d      	add	sp, #116	; 0x74
 800ae08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae0c:	b002      	add	sp, #8
 800ae0e:	4770      	bx	lr
 800ae10:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ae14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae18:	bf14      	ite	ne
 800ae1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae1e:	4623      	moveq	r3, r4
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	9307      	str	r3, [sp, #28]
 800ae24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae28:	9002      	str	r0, [sp, #8]
 800ae2a:	9006      	str	r0, [sp, #24]
 800ae2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae32:	ab21      	add	r3, sp, #132	; 0x84
 800ae34:	a902      	add	r1, sp, #8
 800ae36:	4628      	mov	r0, r5
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	f003 f8ff 	bl	800e03c <_svfiprintf_r>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	bfbc      	itt	lt
 800ae42:	238b      	movlt	r3, #139	; 0x8b
 800ae44:	602b      	strlt	r3, [r5, #0]
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	d0dd      	beq.n	800ae06 <sniprintf+0x16>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	e7d9      	b.n	800ae06 <sniprintf+0x16>
 800ae52:	bf00      	nop
 800ae54:	24000030 	.word	0x24000030

0800ae58 <siprintf>:
 800ae58:	b40e      	push	{r1, r2, r3}
 800ae5a:	b500      	push	{lr}
 800ae5c:	b09c      	sub	sp, #112	; 0x70
 800ae5e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae60:	9002      	str	r0, [sp, #8]
 800ae62:	9006      	str	r0, [sp, #24]
 800ae64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae68:	4809      	ldr	r0, [pc, #36]	; (800ae90 <siprintf+0x38>)
 800ae6a:	9107      	str	r1, [sp, #28]
 800ae6c:	9104      	str	r1, [sp, #16]
 800ae6e:	4909      	ldr	r1, [pc, #36]	; (800ae94 <siprintf+0x3c>)
 800ae70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae74:	9105      	str	r1, [sp, #20]
 800ae76:	6800      	ldr	r0, [r0, #0]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	a902      	add	r1, sp, #8
 800ae7c:	f003 f8de 	bl	800e03c <_svfiprintf_r>
 800ae80:	9b02      	ldr	r3, [sp, #8]
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	b01c      	add	sp, #112	; 0x70
 800ae88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae8c:	b003      	add	sp, #12
 800ae8e:	4770      	bx	lr
 800ae90:	24000030 	.word	0x24000030
 800ae94:	ffff0208 	.word	0xffff0208

0800ae98 <sulp>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	4616      	mov	r6, r2
 800aea0:	ec45 4b10 	vmov	d0, r4, r5
 800aea4:	f002 fe2c 	bl	800db00 <__ulp>
 800aea8:	b17e      	cbz	r6, 800aeca <sulp+0x32>
 800aeaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aeae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dd09      	ble.n	800aeca <sulp+0x32>
 800aeb6:	051b      	lsls	r3, r3, #20
 800aeb8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800aebc:	2000      	movs	r0, #0
 800aebe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800aec2:	ec41 0b17 	vmov	d7, r0, r1
 800aec6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	0000      	movs	r0, r0
	...

0800aed0 <_strtod_l>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b0e 	vpush	{d8-d14}
 800aed8:	b097      	sub	sp, #92	; 0x5c
 800aeda:	461f      	mov	r7, r3
 800aedc:	2300      	movs	r3, #0
 800aede:	9312      	str	r3, [sp, #72]	; 0x48
 800aee0:	4ba1      	ldr	r3, [pc, #644]	; (800b168 <_strtod_l+0x298>)
 800aee2:	920d      	str	r2, [sp, #52]	; 0x34
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	9307      	str	r3, [sp, #28]
 800aee8:	4604      	mov	r4, r0
 800aeea:	4618      	mov	r0, r3
 800aeec:	468b      	mov	fp, r1
 800aeee:	f7f5 f9f7 	bl	80002e0 <strlen>
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	4605      	mov	r5, r0
 800aef8:	f04f 0900 	mov.w	r9, #0
 800aefc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800af00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af02:	7813      	ldrb	r3, [r2, #0]
 800af04:	2b2b      	cmp	r3, #43	; 0x2b
 800af06:	d04d      	beq.n	800afa4 <_strtod_l+0xd4>
 800af08:	d83a      	bhi.n	800af80 <_strtod_l+0xb0>
 800af0a:	2b0d      	cmp	r3, #13
 800af0c:	d833      	bhi.n	800af76 <_strtod_l+0xa6>
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d833      	bhi.n	800af7a <_strtod_l+0xaa>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d03d      	beq.n	800af92 <_strtod_l+0xc2>
 800af16:	2300      	movs	r3, #0
 800af18:	9308      	str	r3, [sp, #32]
 800af1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800af1c:	7833      	ldrb	r3, [r6, #0]
 800af1e:	2b30      	cmp	r3, #48	; 0x30
 800af20:	f040 80b0 	bne.w	800b084 <_strtod_l+0x1b4>
 800af24:	7873      	ldrb	r3, [r6, #1]
 800af26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af2a:	2b58      	cmp	r3, #88	; 0x58
 800af2c:	d167      	bne.n	800affe <_strtod_l+0x12e>
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	ab12      	add	r3, sp, #72	; 0x48
 800af34:	9702      	str	r7, [sp, #8]
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	4a8c      	ldr	r2, [pc, #560]	; (800b16c <_strtod_l+0x29c>)
 800af3a:	ab13      	add	r3, sp, #76	; 0x4c
 800af3c:	a911      	add	r1, sp, #68	; 0x44
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 fede 	bl	800cd00 <__gethex>
 800af44:	f010 0507 	ands.w	r5, r0, #7
 800af48:	4607      	mov	r7, r0
 800af4a:	d005      	beq.n	800af58 <_strtod_l+0x88>
 800af4c:	2d06      	cmp	r5, #6
 800af4e:	d12b      	bne.n	800afa8 <_strtod_l+0xd8>
 800af50:	3601      	adds	r6, #1
 800af52:	2300      	movs	r3, #0
 800af54:	9611      	str	r6, [sp, #68]	; 0x44
 800af56:	9308      	str	r3, [sp, #32]
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f040 854e 	bne.w	800b9fc <_strtod_l+0xb2c>
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	b1e3      	cbz	r3, 800af9e <_strtod_l+0xce>
 800af64:	ec49 8b17 	vmov	d7, r8, r9
 800af68:	eeb1 0b47 	vneg.f64	d0, d7
 800af6c:	b017      	add	sp, #92	; 0x5c
 800af6e:	ecbd 8b0e 	vpop	{d8-d14}
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	2b20      	cmp	r3, #32
 800af78:	d1cd      	bne.n	800af16 <_strtod_l+0x46>
 800af7a:	3201      	adds	r2, #1
 800af7c:	9211      	str	r2, [sp, #68]	; 0x44
 800af7e:	e7bf      	b.n	800af00 <_strtod_l+0x30>
 800af80:	2b2d      	cmp	r3, #45	; 0x2d
 800af82:	d1c8      	bne.n	800af16 <_strtod_l+0x46>
 800af84:	2301      	movs	r3, #1
 800af86:	9308      	str	r3, [sp, #32]
 800af88:	1c53      	adds	r3, r2, #1
 800af8a:	9311      	str	r3, [sp, #68]	; 0x44
 800af8c:	7853      	ldrb	r3, [r2, #1]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1c3      	bne.n	800af1a <_strtod_l+0x4a>
 800af92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f040 852d 	bne.w	800b9f8 <_strtod_l+0xb28>
 800af9e:	ec49 8b10 	vmov	d0, r8, r9
 800afa2:	e7e3      	b.n	800af6c <_strtod_l+0x9c>
 800afa4:	2300      	movs	r3, #0
 800afa6:	e7ee      	b.n	800af86 <_strtod_l+0xb6>
 800afa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afaa:	b13a      	cbz	r2, 800afbc <_strtod_l+0xec>
 800afac:	2135      	movs	r1, #53	; 0x35
 800afae:	a814      	add	r0, sp, #80	; 0x50
 800afb0:	f002 feae 	bl	800dd10 <__copybits>
 800afb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800afb6:	4620      	mov	r0, r4
 800afb8:	f002 fa70 	bl	800d49c <_Bfree>
 800afbc:	3d01      	subs	r5, #1
 800afbe:	2d04      	cmp	r5, #4
 800afc0:	d806      	bhi.n	800afd0 <_strtod_l+0x100>
 800afc2:	e8df f005 	tbb	[pc, r5]
 800afc6:	030a      	.short	0x030a
 800afc8:	1714      	.short	0x1714
 800afca:	0a          	.byte	0x0a
 800afcb:	00          	.byte	0x00
 800afcc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800afd0:	073f      	lsls	r7, r7, #28
 800afd2:	d5c1      	bpl.n	800af58 <_strtod_l+0x88>
 800afd4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800afd8:	e7be      	b.n	800af58 <_strtod_l+0x88>
 800afda:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800afde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afe0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afe4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afe8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800afec:	e7f0      	b.n	800afd0 <_strtod_l+0x100>
 800afee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b170 <_strtod_l+0x2a0>
 800aff2:	e7ed      	b.n	800afd0 <_strtod_l+0x100>
 800aff4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aff8:	f04f 38ff 	mov.w	r8, #4294967295
 800affc:	e7e8      	b.n	800afd0 <_strtod_l+0x100>
 800affe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	9211      	str	r2, [sp, #68]	; 0x44
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b30      	cmp	r3, #48	; 0x30
 800b008:	d0f9      	beq.n	800affe <_strtod_l+0x12e>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0a4      	beq.n	800af58 <_strtod_l+0x88>
 800b00e:	2301      	movs	r3, #1
 800b010:	f04f 0a00 	mov.w	sl, #0
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b018:	930a      	str	r3, [sp, #40]	; 0x28
 800b01a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b01e:	f8cd a018 	str.w	sl, [sp, #24]
 800b022:	220a      	movs	r2, #10
 800b024:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b026:	7807      	ldrb	r7, [r0, #0]
 800b028:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b02c:	b2d9      	uxtb	r1, r3
 800b02e:	2909      	cmp	r1, #9
 800b030:	d92a      	bls.n	800b088 <_strtod_l+0x1b8>
 800b032:	9907      	ldr	r1, [sp, #28]
 800b034:	462a      	mov	r2, r5
 800b036:	f003 fab6 	bl	800e5a6 <strncmp>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d033      	beq.n	800b0a6 <_strtod_l+0x1d6>
 800b03e:	2000      	movs	r0, #0
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	463a      	mov	r2, r7
 800b044:	4601      	mov	r1, r0
 800b046:	4607      	mov	r7, r0
 800b048:	2a65      	cmp	r2, #101	; 0x65
 800b04a:	d001      	beq.n	800b050 <_strtod_l+0x180>
 800b04c:	2a45      	cmp	r2, #69	; 0x45
 800b04e:	d117      	bne.n	800b080 <_strtod_l+0x1b0>
 800b050:	b91b      	cbnz	r3, 800b05a <_strtod_l+0x18a>
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	4303      	orrs	r3, r0
 800b056:	d09c      	beq.n	800af92 <_strtod_l+0xc2>
 800b058:	2300      	movs	r3, #0
 800b05a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800b05e:	f10b 0201 	add.w	r2, fp, #1
 800b062:	9211      	str	r2, [sp, #68]	; 0x44
 800b064:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800b068:	2a2b      	cmp	r2, #43	; 0x2b
 800b06a:	d071      	beq.n	800b150 <_strtod_l+0x280>
 800b06c:	2a2d      	cmp	r2, #45	; 0x2d
 800b06e:	d077      	beq.n	800b160 <_strtod_l+0x290>
 800b070:	f04f 0e00 	mov.w	lr, #0
 800b074:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b078:	2d09      	cmp	r5, #9
 800b07a:	d97f      	bls.n	800b17c <_strtod_l+0x2ac>
 800b07c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b080:	2500      	movs	r5, #0
 800b082:	e09b      	b.n	800b1bc <_strtod_l+0x2ec>
 800b084:	2300      	movs	r3, #0
 800b086:	e7c3      	b.n	800b010 <_strtod_l+0x140>
 800b088:	9906      	ldr	r1, [sp, #24]
 800b08a:	2908      	cmp	r1, #8
 800b08c:	bfdd      	ittte	le
 800b08e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b090:	fb02 3301 	mlale	r3, r2, r1, r3
 800b094:	9309      	strle	r3, [sp, #36]	; 0x24
 800b096:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b09a:	9b06      	ldr	r3, [sp, #24]
 800b09c:	3001      	adds	r0, #1
 800b09e:	3301      	adds	r3, #1
 800b0a0:	9306      	str	r3, [sp, #24]
 800b0a2:	9011      	str	r0, [sp, #68]	; 0x44
 800b0a4:	e7be      	b.n	800b024 <_strtod_l+0x154>
 800b0a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0a8:	195a      	adds	r2, r3, r5
 800b0aa:	9211      	str	r2, [sp, #68]	; 0x44
 800b0ac:	5d5a      	ldrb	r2, [r3, r5]
 800b0ae:	9b06      	ldr	r3, [sp, #24]
 800b0b0:	b3a3      	cbz	r3, 800b11c <_strtod_l+0x24c>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b0b8:	2909      	cmp	r1, #9
 800b0ba:	d912      	bls.n	800b0e2 <_strtod_l+0x212>
 800b0bc:	2101      	movs	r1, #1
 800b0be:	e7c3      	b.n	800b048 <_strtod_l+0x178>
 800b0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	9211      	str	r2, [sp, #68]	; 0x44
 800b0c6:	785a      	ldrb	r2, [r3, #1]
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	2a30      	cmp	r2, #48	; 0x30
 800b0cc:	d0f8      	beq.n	800b0c0 <_strtod_l+0x1f0>
 800b0ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0d2:	2b08      	cmp	r3, #8
 800b0d4:	f200 8497 	bhi.w	800ba06 <_strtod_l+0xb36>
 800b0d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0da:	930a      	str	r3, [sp, #40]	; 0x28
 800b0dc:	4607      	mov	r7, r0
 800b0de:	2000      	movs	r0, #0
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	3a30      	subs	r2, #48	; 0x30
 800b0e4:	f100 0101 	add.w	r1, r0, #1
 800b0e8:	d012      	beq.n	800b110 <_strtod_l+0x240>
 800b0ea:	440f      	add	r7, r1
 800b0ec:	eb00 0c03 	add.w	ip, r0, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	250a      	movs	r5, #10
 800b0f4:	4561      	cmp	r1, ip
 800b0f6:	d113      	bne.n	800b120 <_strtod_l+0x250>
 800b0f8:	1819      	adds	r1, r3, r0
 800b0fa:	2908      	cmp	r1, #8
 800b0fc:	f103 0301 	add.w	r3, r3, #1
 800b100:	4403      	add	r3, r0
 800b102:	dc1c      	bgt.n	800b13e <_strtod_l+0x26e>
 800b104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b106:	210a      	movs	r1, #10
 800b108:	fb01 2200 	mla	r2, r1, r0, r2
 800b10c:	9209      	str	r2, [sp, #36]	; 0x24
 800b10e:	2100      	movs	r1, #0
 800b110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b112:	1c50      	adds	r0, r2, #1
 800b114:	9011      	str	r0, [sp, #68]	; 0x44
 800b116:	7852      	ldrb	r2, [r2, #1]
 800b118:	4608      	mov	r0, r1
 800b11a:	e7cb      	b.n	800b0b4 <_strtod_l+0x1e4>
 800b11c:	9806      	ldr	r0, [sp, #24]
 800b11e:	e7d4      	b.n	800b0ca <_strtod_l+0x1fa>
 800b120:	2908      	cmp	r1, #8
 800b122:	dc04      	bgt.n	800b12e <_strtod_l+0x25e>
 800b124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b126:	436e      	muls	r6, r5
 800b128:	9609      	str	r6, [sp, #36]	; 0x24
 800b12a:	3101      	adds	r1, #1
 800b12c:	e7e2      	b.n	800b0f4 <_strtod_l+0x224>
 800b12e:	f101 0e01 	add.w	lr, r1, #1
 800b132:	f1be 0f10 	cmp.w	lr, #16
 800b136:	bfd8      	it	le
 800b138:	fb05 fa0a 	mulle.w	sl, r5, sl
 800b13c:	e7f5      	b.n	800b12a <_strtod_l+0x25a>
 800b13e:	2b10      	cmp	r3, #16
 800b140:	bfdc      	itt	le
 800b142:	210a      	movle	r1, #10
 800b144:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800b148:	e7e1      	b.n	800b10e <_strtod_l+0x23e>
 800b14a:	2700      	movs	r7, #0
 800b14c:	2101      	movs	r1, #1
 800b14e:	e780      	b.n	800b052 <_strtod_l+0x182>
 800b150:	f04f 0e00 	mov.w	lr, #0
 800b154:	f10b 0202 	add.w	r2, fp, #2
 800b158:	9211      	str	r2, [sp, #68]	; 0x44
 800b15a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800b15e:	e789      	b.n	800b074 <_strtod_l+0x1a4>
 800b160:	f04f 0e01 	mov.w	lr, #1
 800b164:	e7f6      	b.n	800b154 <_strtod_l+0x284>
 800b166:	bf00      	nop
 800b168:	0800f664 	.word	0x0800f664
 800b16c:	0800f3b8 	.word	0x0800f3b8
 800b170:	7ff00000 	.word	0x7ff00000
 800b174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b176:	1c55      	adds	r5, r2, #1
 800b178:	9511      	str	r5, [sp, #68]	; 0x44
 800b17a:	7852      	ldrb	r2, [r2, #1]
 800b17c:	2a30      	cmp	r2, #48	; 0x30
 800b17e:	d0f9      	beq.n	800b174 <_strtod_l+0x2a4>
 800b180:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b184:	2d08      	cmp	r5, #8
 800b186:	f63f af7b 	bhi.w	800b080 <_strtod_l+0x1b0>
 800b18a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b18e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b190:	9207      	str	r2, [sp, #28]
 800b192:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b194:	1c55      	adds	r5, r2, #1
 800b196:	9511      	str	r5, [sp, #68]	; 0x44
 800b198:	7852      	ldrb	r2, [r2, #1]
 800b19a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b19e:	2e09      	cmp	r6, #9
 800b1a0:	d937      	bls.n	800b212 <_strtod_l+0x342>
 800b1a2:	9e07      	ldr	r6, [sp, #28]
 800b1a4:	1bad      	subs	r5, r5, r6
 800b1a6:	2d08      	cmp	r5, #8
 800b1a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b1ac:	dc02      	bgt.n	800b1b4 <_strtod_l+0x2e4>
 800b1ae:	4565      	cmp	r5, ip
 800b1b0:	bfa8      	it	ge
 800b1b2:	4665      	movge	r5, ip
 800b1b4:	f1be 0f00 	cmp.w	lr, #0
 800b1b8:	d000      	beq.n	800b1bc <_strtod_l+0x2ec>
 800b1ba:	426d      	negs	r5, r5
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d14d      	bne.n	800b25c <_strtod_l+0x38c>
 800b1c0:	9b04      	ldr	r3, [sp, #16]
 800b1c2:	4303      	orrs	r3, r0
 800b1c4:	f47f aec8 	bne.w	800af58 <_strtod_l+0x88>
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	f47f aee2 	bne.w	800af92 <_strtod_l+0xc2>
 800b1ce:	2a69      	cmp	r2, #105	; 0x69
 800b1d0:	d027      	beq.n	800b222 <_strtod_l+0x352>
 800b1d2:	dc24      	bgt.n	800b21e <_strtod_l+0x34e>
 800b1d4:	2a49      	cmp	r2, #73	; 0x49
 800b1d6:	d024      	beq.n	800b222 <_strtod_l+0x352>
 800b1d8:	2a4e      	cmp	r2, #78	; 0x4e
 800b1da:	f47f aeda 	bne.w	800af92 <_strtod_l+0xc2>
 800b1de:	4996      	ldr	r1, [pc, #600]	; (800b438 <_strtod_l+0x568>)
 800b1e0:	a811      	add	r0, sp, #68	; 0x44
 800b1e2:	f001 ffe5 	bl	800d1b0 <__match>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f aed3 	beq.w	800af92 <_strtod_l+0xc2>
 800b1ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b28      	cmp	r3, #40	; 0x28
 800b1f2:	d12d      	bne.n	800b250 <_strtod_l+0x380>
 800b1f4:	4991      	ldr	r1, [pc, #580]	; (800b43c <_strtod_l+0x56c>)
 800b1f6:	aa14      	add	r2, sp, #80	; 0x50
 800b1f8:	a811      	add	r0, sp, #68	; 0x44
 800b1fa:	f001 ffed 	bl	800d1d8 <__hexnan>
 800b1fe:	2805      	cmp	r0, #5
 800b200:	d126      	bne.n	800b250 <_strtod_l+0x380>
 800b202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b204:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b208:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b20c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b210:	e6a2      	b.n	800af58 <_strtod_l+0x88>
 800b212:	250a      	movs	r5, #10
 800b214:	fb05 250c 	mla	r5, r5, ip, r2
 800b218:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b21c:	e7b9      	b.n	800b192 <_strtod_l+0x2c2>
 800b21e:	2a6e      	cmp	r2, #110	; 0x6e
 800b220:	e7db      	b.n	800b1da <_strtod_l+0x30a>
 800b222:	4987      	ldr	r1, [pc, #540]	; (800b440 <_strtod_l+0x570>)
 800b224:	a811      	add	r0, sp, #68	; 0x44
 800b226:	f001 ffc3 	bl	800d1b0 <__match>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f aeb1 	beq.w	800af92 <_strtod_l+0xc2>
 800b230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b232:	4984      	ldr	r1, [pc, #528]	; (800b444 <_strtod_l+0x574>)
 800b234:	3b01      	subs	r3, #1
 800b236:	a811      	add	r0, sp, #68	; 0x44
 800b238:	9311      	str	r3, [sp, #68]	; 0x44
 800b23a:	f001 ffb9 	bl	800d1b0 <__match>
 800b23e:	b910      	cbnz	r0, 800b246 <_strtod_l+0x376>
 800b240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b242:	3301      	adds	r3, #1
 800b244:	9311      	str	r3, [sp, #68]	; 0x44
 800b246:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b458 <_strtod_l+0x588>
 800b24a:	f04f 0800 	mov.w	r8, #0
 800b24e:	e683      	b.n	800af58 <_strtod_l+0x88>
 800b250:	487d      	ldr	r0, [pc, #500]	; (800b448 <_strtod_l+0x578>)
 800b252:	f003 f94d 	bl	800e4f0 <nan>
 800b256:	ec59 8b10 	vmov	r8, r9, d0
 800b25a:	e67d      	b.n	800af58 <_strtod_l+0x88>
 800b25c:	1bea      	subs	r2, r5, r7
 800b25e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800b262:	9207      	str	r2, [sp, #28]
 800b264:	9a06      	ldr	r2, [sp, #24]
 800b266:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	bf08      	it	eq
 800b26e:	461a      	moveq	r2, r3
 800b270:	2b10      	cmp	r3, #16
 800b272:	9206      	str	r2, [sp, #24]
 800b274:	461a      	mov	r2, r3
 800b276:	bfa8      	it	ge
 800b278:	2210      	movge	r2, #16
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	ec59 8b17 	vmov	r8, r9, d7
 800b280:	dd0c      	ble.n	800b29c <_strtod_l+0x3cc>
 800b282:	4972      	ldr	r1, [pc, #456]	; (800b44c <_strtod_l+0x57c>)
 800b284:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b288:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b28c:	ee06 aa90 	vmov	s13, sl
 800b290:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b294:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b298:	ec59 8b16 	vmov	r8, r9, d6
 800b29c:	2b0f      	cmp	r3, #15
 800b29e:	dc36      	bgt.n	800b30e <_strtod_l+0x43e>
 800b2a0:	9907      	ldr	r1, [sp, #28]
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	f43f ae58 	beq.w	800af58 <_strtod_l+0x88>
 800b2a8:	dd23      	ble.n	800b2f2 <_strtod_l+0x422>
 800b2aa:	2916      	cmp	r1, #22
 800b2ac:	dc0b      	bgt.n	800b2c6 <_strtod_l+0x3f6>
 800b2ae:	4b67      	ldr	r3, [pc, #412]	; (800b44c <_strtod_l+0x57c>)
 800b2b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b2b4:	ed93 7b00 	vldr	d7, [r3]
 800b2b8:	ec49 8b16 	vmov	d6, r8, r9
 800b2bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2c0:	ec59 8b17 	vmov	r8, r9, d7
 800b2c4:	e648      	b.n	800af58 <_strtod_l+0x88>
 800b2c6:	9807      	ldr	r0, [sp, #28]
 800b2c8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b2cc:	4281      	cmp	r1, r0
 800b2ce:	db1e      	blt.n	800b30e <_strtod_l+0x43e>
 800b2d0:	4a5e      	ldr	r2, [pc, #376]	; (800b44c <_strtod_l+0x57c>)
 800b2d2:	f1c3 030f 	rsb	r3, r3, #15
 800b2d6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b2da:	ed91 7b00 	vldr	d7, [r1]
 800b2de:	ec49 8b16 	vmov	d6, r8, r9
 800b2e2:	1ac3      	subs	r3, r0, r3
 800b2e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b2e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2ec:	ed92 6b00 	vldr	d6, [r2]
 800b2f0:	e7e4      	b.n	800b2bc <_strtod_l+0x3ec>
 800b2f2:	9907      	ldr	r1, [sp, #28]
 800b2f4:	3116      	adds	r1, #22
 800b2f6:	db0a      	blt.n	800b30e <_strtod_l+0x43e>
 800b2f8:	4b54      	ldr	r3, [pc, #336]	; (800b44c <_strtod_l+0x57c>)
 800b2fa:	1b7d      	subs	r5, r7, r5
 800b2fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b300:	ed95 7b00 	vldr	d7, [r5]
 800b304:	ec49 8b16 	vmov	d6, r8, r9
 800b308:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b30c:	e7d8      	b.n	800b2c0 <_strtod_l+0x3f0>
 800b30e:	9907      	ldr	r1, [sp, #28]
 800b310:	1a9a      	subs	r2, r3, r2
 800b312:	440a      	add	r2, r1
 800b314:	2a00      	cmp	r2, #0
 800b316:	dd6f      	ble.n	800b3f8 <_strtod_l+0x528>
 800b318:	f012 000f 	ands.w	r0, r2, #15
 800b31c:	d00a      	beq.n	800b334 <_strtod_l+0x464>
 800b31e:	494b      	ldr	r1, [pc, #300]	; (800b44c <_strtod_l+0x57c>)
 800b320:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b324:	ed91 7b00 	vldr	d7, [r1]
 800b328:	ec49 8b16 	vmov	d6, r8, r9
 800b32c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b330:	ec59 8b17 	vmov	r8, r9, d7
 800b334:	f032 020f 	bics.w	r2, r2, #15
 800b338:	d04f      	beq.n	800b3da <_strtod_l+0x50a>
 800b33a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b33e:	dd22      	ble.n	800b386 <_strtod_l+0x4b6>
 800b340:	2500      	movs	r5, #0
 800b342:	462e      	mov	r6, r5
 800b344:	9506      	str	r5, [sp, #24]
 800b346:	462f      	mov	r7, r5
 800b348:	2322      	movs	r3, #34	; 0x22
 800b34a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b458 <_strtod_l+0x588>
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	f04f 0800 	mov.w	r8, #0
 800b354:	9b06      	ldr	r3, [sp, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f43f adfe 	beq.w	800af58 <_strtod_l+0x88>
 800b35c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b35e:	4620      	mov	r0, r4
 800b360:	f002 f89c 	bl	800d49c <_Bfree>
 800b364:	4639      	mov	r1, r7
 800b366:	4620      	mov	r0, r4
 800b368:	f002 f898 	bl	800d49c <_Bfree>
 800b36c:	4631      	mov	r1, r6
 800b36e:	4620      	mov	r0, r4
 800b370:	f002 f894 	bl	800d49c <_Bfree>
 800b374:	9906      	ldr	r1, [sp, #24]
 800b376:	4620      	mov	r0, r4
 800b378:	f002 f890 	bl	800d49c <_Bfree>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4620      	mov	r0, r4
 800b380:	f002 f88c 	bl	800d49c <_Bfree>
 800b384:	e5e8      	b.n	800af58 <_strtod_l+0x88>
 800b386:	2000      	movs	r0, #0
 800b388:	ec49 8b17 	vmov	d7, r8, r9
 800b38c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b450 <_strtod_l+0x580>
 800b390:	1112      	asrs	r2, r2, #4
 800b392:	4601      	mov	r1, r0
 800b394:	2a01      	cmp	r2, #1
 800b396:	dc23      	bgt.n	800b3e0 <_strtod_l+0x510>
 800b398:	b108      	cbz	r0, 800b39e <_strtod_l+0x4ce>
 800b39a:	ec59 8b17 	vmov	r8, r9, d7
 800b39e:	4a2c      	ldr	r2, [pc, #176]	; (800b450 <_strtod_l+0x580>)
 800b3a0:	482c      	ldr	r0, [pc, #176]	; (800b454 <_strtod_l+0x584>)
 800b3a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b3a6:	ed92 7b00 	vldr	d7, [r2]
 800b3aa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b3ae:	ec49 8b16 	vmov	d6, r8, r9
 800b3b2:	4a29      	ldr	r2, [pc, #164]	; (800b458 <_strtod_l+0x588>)
 800b3b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3b8:	ee17 1a90 	vmov	r1, s15
 800b3bc:	400a      	ands	r2, r1
 800b3be:	4282      	cmp	r2, r0
 800b3c0:	ec59 8b17 	vmov	r8, r9, d7
 800b3c4:	d8bc      	bhi.n	800b340 <_strtod_l+0x470>
 800b3c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b3ca:	4282      	cmp	r2, r0
 800b3cc:	bf86      	itte	hi
 800b3ce:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b45c <_strtod_l+0x58c>
 800b3d2:	f04f 38ff 	movhi.w	r8, #4294967295
 800b3d6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b3da:	2200      	movs	r2, #0
 800b3dc:	9204      	str	r2, [sp, #16]
 800b3de:	e078      	b.n	800b4d2 <_strtod_l+0x602>
 800b3e0:	07d6      	lsls	r6, r2, #31
 800b3e2:	d504      	bpl.n	800b3ee <_strtod_l+0x51e>
 800b3e4:	ed9c 6b00 	vldr	d6, [ip]
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3ee:	3101      	adds	r1, #1
 800b3f0:	1052      	asrs	r2, r2, #1
 800b3f2:	f10c 0c08 	add.w	ip, ip, #8
 800b3f6:	e7cd      	b.n	800b394 <_strtod_l+0x4c4>
 800b3f8:	d0ef      	beq.n	800b3da <_strtod_l+0x50a>
 800b3fa:	4252      	negs	r2, r2
 800b3fc:	f012 000f 	ands.w	r0, r2, #15
 800b400:	d00a      	beq.n	800b418 <_strtod_l+0x548>
 800b402:	4912      	ldr	r1, [pc, #72]	; (800b44c <_strtod_l+0x57c>)
 800b404:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b408:	ed91 7b00 	vldr	d7, [r1]
 800b40c:	ec49 8b16 	vmov	d6, r8, r9
 800b410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b414:	ec59 8b17 	vmov	r8, r9, d7
 800b418:	1112      	asrs	r2, r2, #4
 800b41a:	d0de      	beq.n	800b3da <_strtod_l+0x50a>
 800b41c:	2a1f      	cmp	r2, #31
 800b41e:	dd1f      	ble.n	800b460 <_strtod_l+0x590>
 800b420:	2500      	movs	r5, #0
 800b422:	462e      	mov	r6, r5
 800b424:	9506      	str	r5, [sp, #24]
 800b426:	462f      	mov	r7, r5
 800b428:	2322      	movs	r3, #34	; 0x22
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	f04f 0900 	mov.w	r9, #0
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	e78e      	b.n	800b354 <_strtod_l+0x484>
 800b436:	bf00      	nop
 800b438:	0800f389 	.word	0x0800f389
 800b43c:	0800f3cc 	.word	0x0800f3cc
 800b440:	0800f381 	.word	0x0800f381
 800b444:	0800f50c 	.word	0x0800f50c
 800b448:	0800f820 	.word	0x0800f820
 800b44c:	0800f700 	.word	0x0800f700
 800b450:	0800f6d8 	.word	0x0800f6d8
 800b454:	7ca00000 	.word	0x7ca00000
 800b458:	7ff00000 	.word	0x7ff00000
 800b45c:	7fefffff 	.word	0x7fefffff
 800b460:	f012 0110 	ands.w	r1, r2, #16
 800b464:	bf18      	it	ne
 800b466:	216a      	movne	r1, #106	; 0x6a
 800b468:	9104      	str	r1, [sp, #16]
 800b46a:	ec49 8b17 	vmov	d7, r8, r9
 800b46e:	49be      	ldr	r1, [pc, #760]	; (800b768 <_strtod_l+0x898>)
 800b470:	2000      	movs	r0, #0
 800b472:	07d6      	lsls	r6, r2, #31
 800b474:	d504      	bpl.n	800b480 <_strtod_l+0x5b0>
 800b476:	ed91 6b00 	vldr	d6, [r1]
 800b47a:	2001      	movs	r0, #1
 800b47c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b480:	1052      	asrs	r2, r2, #1
 800b482:	f101 0108 	add.w	r1, r1, #8
 800b486:	d1f4      	bne.n	800b472 <_strtod_l+0x5a2>
 800b488:	b108      	cbz	r0, 800b48e <_strtod_l+0x5be>
 800b48a:	ec59 8b17 	vmov	r8, r9, d7
 800b48e:	9a04      	ldr	r2, [sp, #16]
 800b490:	b1c2      	cbz	r2, 800b4c4 <_strtod_l+0x5f4>
 800b492:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b496:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	4648      	mov	r0, r9
 800b49e:	dd11      	ble.n	800b4c4 <_strtod_l+0x5f4>
 800b4a0:	2a1f      	cmp	r2, #31
 800b4a2:	f340 812e 	ble.w	800b702 <_strtod_l+0x832>
 800b4a6:	2a34      	cmp	r2, #52	; 0x34
 800b4a8:	bfde      	ittt	le
 800b4aa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b4ae:	f04f 32ff 	movle.w	r2, #4294967295
 800b4b2:	fa02 f101 	lslle.w	r1, r2, r1
 800b4b6:	f04f 0800 	mov.w	r8, #0
 800b4ba:	bfcc      	ite	gt
 800b4bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b4c0:	ea01 0900 	andle.w	r9, r1, r0
 800b4c4:	ec49 8b17 	vmov	d7, r8, r9
 800b4c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	d0a6      	beq.n	800b420 <_strtod_l+0x550>
 800b4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d4:	9200      	str	r2, [sp, #0]
 800b4d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4d8:	9a06      	ldr	r2, [sp, #24]
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f002 f846 	bl	800d56c <__s2b>
 800b4e0:	9006      	str	r0, [sp, #24]
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f43f af2c 	beq.w	800b340 <_strtod_l+0x470>
 800b4e8:	9b07      	ldr	r3, [sp, #28]
 800b4ea:	1b7d      	subs	r5, r7, r5
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfb4      	ite	lt
 800b4f0:	462b      	movlt	r3, r5
 800b4f2:	2300      	movge	r3, #0
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	9b07      	ldr	r3, [sp, #28]
 800b4f8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b748 <_strtod_l+0x878>
 800b4fc:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b750 <_strtod_l+0x880>
 800b500:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b758 <_strtod_l+0x888>
 800b504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b508:	2500      	movs	r5, #0
 800b50a:	930c      	str	r3, [sp, #48]	; 0x30
 800b50c:	462e      	mov	r6, r5
 800b50e:	9b06      	ldr	r3, [sp, #24]
 800b510:	4620      	mov	r0, r4
 800b512:	6859      	ldr	r1, [r3, #4]
 800b514:	f001 ff82 	bl	800d41c <_Balloc>
 800b518:	4607      	mov	r7, r0
 800b51a:	2800      	cmp	r0, #0
 800b51c:	f43f af14 	beq.w	800b348 <_strtod_l+0x478>
 800b520:	9b06      	ldr	r3, [sp, #24]
 800b522:	691a      	ldr	r2, [r3, #16]
 800b524:	3202      	adds	r2, #2
 800b526:	f103 010c 	add.w	r1, r3, #12
 800b52a:	0092      	lsls	r2, r2, #2
 800b52c:	300c      	adds	r0, #12
 800b52e:	f7fe fd6b 	bl	800a008 <memcpy>
 800b532:	ec49 8b10 	vmov	d0, r8, r9
 800b536:	aa14      	add	r2, sp, #80	; 0x50
 800b538:	a913      	add	r1, sp, #76	; 0x4c
 800b53a:	4620      	mov	r0, r4
 800b53c:	f002 fb5c 	bl	800dbf8 <__d2b>
 800b540:	ec49 8b18 	vmov	d8, r8, r9
 800b544:	9012      	str	r0, [sp, #72]	; 0x48
 800b546:	2800      	cmp	r0, #0
 800b548:	f43f aefe 	beq.w	800b348 <_strtod_l+0x478>
 800b54c:	2101      	movs	r1, #1
 800b54e:	4620      	mov	r0, r4
 800b550:	f002 f8a6 	bl	800d6a0 <__i2b>
 800b554:	4606      	mov	r6, r0
 800b556:	2800      	cmp	r0, #0
 800b558:	f43f aef6 	beq.w	800b348 <_strtod_l+0x478>
 800b55c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b55e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b560:	2b00      	cmp	r3, #0
 800b562:	bfab      	itete	ge
 800b564:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b566:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b568:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b56c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b570:	bfac      	ite	ge
 800b572:	eb03 0b02 	addge.w	fp, r3, r2
 800b576:	eba2 0a03 	sublt.w	sl, r2, r3
 800b57a:	9a04      	ldr	r2, [sp, #16]
 800b57c:	1a9b      	subs	r3, r3, r2
 800b57e:	440b      	add	r3, r1
 800b580:	4a7a      	ldr	r2, [pc, #488]	; (800b76c <_strtod_l+0x89c>)
 800b582:	3b01      	subs	r3, #1
 800b584:	4293      	cmp	r3, r2
 800b586:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b58a:	f280 80cd 	bge.w	800b728 <_strtod_l+0x858>
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	2a1f      	cmp	r2, #31
 800b592:	eba1 0102 	sub.w	r1, r1, r2
 800b596:	f04f 0001 	mov.w	r0, #1
 800b59a:	f300 80b9 	bgt.w	800b710 <_strtod_l+0x840>
 800b59e:	fa00 f302 	lsl.w	r3, r0, r2
 800b5a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5a8:	eb0b 0301 	add.w	r3, fp, r1
 800b5ac:	9a04      	ldr	r2, [sp, #16]
 800b5ae:	459b      	cmp	fp, r3
 800b5b0:	448a      	add	sl, r1
 800b5b2:	4492      	add	sl, r2
 800b5b4:	465a      	mov	r2, fp
 800b5b6:	bfa8      	it	ge
 800b5b8:	461a      	movge	r2, r3
 800b5ba:	4552      	cmp	r2, sl
 800b5bc:	bfa8      	it	ge
 800b5be:	4652      	movge	r2, sl
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	bfc2      	ittt	gt
 800b5c4:	1a9b      	subgt	r3, r3, r2
 800b5c6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b5ca:	ebab 0b02 	subgt.w	fp, fp, r2
 800b5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	dd18      	ble.n	800b606 <_strtod_l+0x736>
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5da:	f002 f921 	bl	800d820 <__pow5mult>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f aeb1 	beq.w	800b348 <_strtod_l+0x478>
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f002 f86e 	bl	800d6cc <__multiply>
 800b5f0:	900e      	str	r0, [sp, #56]	; 0x38
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f aea8 	beq.w	800b348 <_strtod_l+0x478>
 800b5f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f001 ff4e 	bl	800d49c <_Bfree>
 800b600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b604:	9212      	str	r2, [sp, #72]	; 0x48
 800b606:	2b00      	cmp	r3, #0
 800b608:	f300 8093 	bgt.w	800b732 <_strtod_l+0x862>
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	dd08      	ble.n	800b624 <_strtod_l+0x754>
 800b612:	4639      	mov	r1, r7
 800b614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b616:	4620      	mov	r0, r4
 800b618:	f002 f902 	bl	800d820 <__pow5mult>
 800b61c:	4607      	mov	r7, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f ae92 	beq.w	800b348 <_strtod_l+0x478>
 800b624:	f1ba 0f00 	cmp.w	sl, #0
 800b628:	dd08      	ble.n	800b63c <_strtod_l+0x76c>
 800b62a:	4639      	mov	r1, r7
 800b62c:	4652      	mov	r2, sl
 800b62e:	4620      	mov	r0, r4
 800b630:	f002 f950 	bl	800d8d4 <__lshift>
 800b634:	4607      	mov	r7, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	f43f ae86 	beq.w	800b348 <_strtod_l+0x478>
 800b63c:	f1bb 0f00 	cmp.w	fp, #0
 800b640:	dd08      	ble.n	800b654 <_strtod_l+0x784>
 800b642:	4631      	mov	r1, r6
 800b644:	465a      	mov	r2, fp
 800b646:	4620      	mov	r0, r4
 800b648:	f002 f944 	bl	800d8d4 <__lshift>
 800b64c:	4606      	mov	r6, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f ae7a 	beq.w	800b348 <_strtod_l+0x478>
 800b654:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b656:	463a      	mov	r2, r7
 800b658:	4620      	mov	r0, r4
 800b65a:	f002 f9c7 	bl	800d9ec <__mdiff>
 800b65e:	4605      	mov	r5, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	f43f ae71 	beq.w	800b348 <_strtod_l+0x478>
 800b666:	2300      	movs	r3, #0
 800b668:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b66c:	60c3      	str	r3, [r0, #12]
 800b66e:	4631      	mov	r1, r6
 800b670:	f002 f9a0 	bl	800d9b4 <__mcmp>
 800b674:	2800      	cmp	r0, #0
 800b676:	da7d      	bge.n	800b774 <_strtod_l+0x8a4>
 800b678:	ea5a 0308 	orrs.w	r3, sl, r8
 800b67c:	f040 80a3 	bne.w	800b7c6 <_strtod_l+0x8f6>
 800b680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 809e 	bne.w	800b7c6 <_strtod_l+0x8f6>
 800b68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b68e:	0d1b      	lsrs	r3, r3, #20
 800b690:	051b      	lsls	r3, r3, #20
 800b692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b696:	f240 8096 	bls.w	800b7c6 <_strtod_l+0x8f6>
 800b69a:	696b      	ldr	r3, [r5, #20]
 800b69c:	b91b      	cbnz	r3, 800b6a6 <_strtod_l+0x7d6>
 800b69e:	692b      	ldr	r3, [r5, #16]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	f340 8090 	ble.w	800b7c6 <_strtod_l+0x8f6>
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f002 f912 	bl	800d8d4 <__lshift>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	f002 f97e 	bl	800d9b4 <__mcmp>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f340 8084 	ble.w	800b7c6 <_strtod_l+0x8f6>
 800b6be:	9904      	ldr	r1, [sp, #16]
 800b6c0:	4a2b      	ldr	r2, [pc, #172]	; (800b770 <_strtod_l+0x8a0>)
 800b6c2:	464b      	mov	r3, r9
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	f000 809d 	beq.w	800b804 <_strtod_l+0x934>
 800b6ca:	ea02 0109 	and.w	r1, r2, r9
 800b6ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b6d2:	f300 8097 	bgt.w	800b804 <_strtod_l+0x934>
 800b6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6da:	f77f aea5 	ble.w	800b428 <_strtod_l+0x558>
 800b6de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b760 <_strtod_l+0x890>
 800b6e2:	ec49 8b16 	vmov	d6, r8, r9
 800b6e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b6ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	bf08      	it	eq
 800b6f6:	2322      	moveq	r3, #34	; 0x22
 800b6f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b6fc:	bf08      	it	eq
 800b6fe:	6023      	streq	r3, [r4, #0]
 800b700:	e62c      	b.n	800b35c <_strtod_l+0x48c>
 800b702:	f04f 31ff 	mov.w	r1, #4294967295
 800b706:	fa01 f202 	lsl.w	r2, r1, r2
 800b70a:	ea02 0808 	and.w	r8, r2, r8
 800b70e:	e6d9      	b.n	800b4c4 <_strtod_l+0x5f4>
 800b710:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b714:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b718:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b71c:	33e2      	adds	r3, #226	; 0xe2
 800b71e:	fa00 f303 	lsl.w	r3, r0, r3
 800b722:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b726:	e73f      	b.n	800b5a8 <_strtod_l+0x6d8>
 800b728:	2200      	movs	r2, #0
 800b72a:	2301      	movs	r3, #1
 800b72c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b730:	e73a      	b.n	800b5a8 <_strtod_l+0x6d8>
 800b732:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b734:	461a      	mov	r2, r3
 800b736:	4620      	mov	r0, r4
 800b738:	f002 f8cc 	bl	800d8d4 <__lshift>
 800b73c:	9012      	str	r0, [sp, #72]	; 0x48
 800b73e:	2800      	cmp	r0, #0
 800b740:	f47f af64 	bne.w	800b60c <_strtod_l+0x73c>
 800b744:	e600      	b.n	800b348 <_strtod_l+0x478>
 800b746:	bf00      	nop
 800b748:	94a03595 	.word	0x94a03595
 800b74c:	3fcfffff 	.word	0x3fcfffff
 800b750:	94a03595 	.word	0x94a03595
 800b754:	3fdfffff 	.word	0x3fdfffff
 800b758:	35afe535 	.word	0x35afe535
 800b75c:	3fe00000 	.word	0x3fe00000
 800b760:	00000000 	.word	0x00000000
 800b764:	39500000 	.word	0x39500000
 800b768:	0800f3e0 	.word	0x0800f3e0
 800b76c:	fffffc02 	.word	0xfffffc02
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	46cb      	mov	fp, r9
 800b776:	d15f      	bne.n	800b838 <_strtod_l+0x968>
 800b778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b77c:	f1ba 0f00 	cmp.w	sl, #0
 800b780:	d02a      	beq.n	800b7d8 <_strtod_l+0x908>
 800b782:	4aa7      	ldr	r2, [pc, #668]	; (800ba20 <_strtod_l+0xb50>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d12b      	bne.n	800b7e0 <_strtod_l+0x910>
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	4642      	mov	r2, r8
 800b78c:	b1fb      	cbz	r3, 800b7ce <_strtod_l+0x8fe>
 800b78e:	4ba5      	ldr	r3, [pc, #660]	; (800ba24 <_strtod_l+0xb54>)
 800b790:	ea09 0303 	and.w	r3, r9, r3
 800b794:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b798:	f04f 31ff 	mov.w	r1, #4294967295
 800b79c:	d81a      	bhi.n	800b7d4 <_strtod_l+0x904>
 800b79e:	0d1b      	lsrs	r3, r3, #20
 800b7a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d119      	bne.n	800b7e0 <_strtod_l+0x910>
 800b7ac:	4b9e      	ldr	r3, [pc, #632]	; (800ba28 <_strtod_l+0xb58>)
 800b7ae:	459b      	cmp	fp, r3
 800b7b0:	d102      	bne.n	800b7b8 <_strtod_l+0x8e8>
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	f43f adc8 	beq.w	800b348 <_strtod_l+0x478>
 800b7b8:	4b9a      	ldr	r3, [pc, #616]	; (800ba24 <_strtod_l+0xb54>)
 800b7ba:	ea0b 0303 	and.w	r3, fp, r3
 800b7be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b7c2:	f04f 0800 	mov.w	r8, #0
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d188      	bne.n	800b6de <_strtod_l+0x80e>
 800b7cc:	e5c6      	b.n	800b35c <_strtod_l+0x48c>
 800b7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d2:	e7e9      	b.n	800b7a8 <_strtod_l+0x8d8>
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	e7e7      	b.n	800b7a8 <_strtod_l+0x8d8>
 800b7d8:	ea53 0308 	orrs.w	r3, r3, r8
 800b7dc:	f43f af6f 	beq.w	800b6be <_strtod_l+0x7ee>
 800b7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e2:	b1cb      	cbz	r3, 800b818 <_strtod_l+0x948>
 800b7e4:	ea13 0f0b 	tst.w	r3, fp
 800b7e8:	d0ed      	beq.n	800b7c6 <_strtod_l+0x8f6>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	f1ba 0f00 	cmp.w	sl, #0
 800b7f4:	d014      	beq.n	800b820 <_strtod_l+0x950>
 800b7f6:	f7ff fb4f 	bl	800ae98 <sulp>
 800b7fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b7fe:	ec59 8b17 	vmov	r8, r9, d7
 800b802:	e7e0      	b.n	800b7c6 <_strtod_l+0x8f6>
 800b804:	4013      	ands	r3, r2
 800b806:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b80a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b80e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b812:	f04f 38ff 	mov.w	r8, #4294967295
 800b816:	e7d6      	b.n	800b7c6 <_strtod_l+0x8f6>
 800b818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b81a:	ea13 0f08 	tst.w	r3, r8
 800b81e:	e7e3      	b.n	800b7e8 <_strtod_l+0x918>
 800b820:	f7ff fb3a 	bl	800ae98 <sulp>
 800b824:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b828:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b830:	ec59 8b10 	vmov	r8, r9, d0
 800b834:	d1c7      	bne.n	800b7c6 <_strtod_l+0x8f6>
 800b836:	e5f7      	b.n	800b428 <_strtod_l+0x558>
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	f002 fa38 	bl	800dcb0 <__ratio>
 800b840:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b844:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84c:	d865      	bhi.n	800b91a <_strtod_l+0xa4a>
 800b84e:	f1ba 0f00 	cmp.w	sl, #0
 800b852:	d042      	beq.n	800b8da <_strtod_l+0xa0a>
 800b854:	4b75      	ldr	r3, [pc, #468]	; (800ba2c <_strtod_l+0xb5c>)
 800b856:	2200      	movs	r2, #0
 800b858:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b85c:	4871      	ldr	r0, [pc, #452]	; (800ba24 <_strtod_l+0xb54>)
 800b85e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ba38 <_strtod_l+0xb68>
 800b862:	ea0b 0100 	and.w	r1, fp, r0
 800b866:	4561      	cmp	r1, ip
 800b868:	f040 808e 	bne.w	800b988 <_strtod_l+0xab8>
 800b86c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b870:	ec49 8b10 	vmov	d0, r8, r9
 800b874:	ec43 2b1c 	vmov	d12, r2, r3
 800b878:	910a      	str	r1, [sp, #40]	; 0x28
 800b87a:	f002 f941 	bl	800db00 <__ulp>
 800b87e:	ec49 8b1e 	vmov	d14, r8, r9
 800b882:	4868      	ldr	r0, [pc, #416]	; (800ba24 <_strtod_l+0xb54>)
 800b884:	eeac eb00 	vfma.f64	d14, d12, d0
 800b888:	ee1e 3a90 	vmov	r3, s29
 800b88c:	4a68      	ldr	r2, [pc, #416]	; (800ba30 <_strtod_l+0xb60>)
 800b88e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b890:	4018      	ands	r0, r3
 800b892:	4290      	cmp	r0, r2
 800b894:	ec59 8b1e 	vmov	r8, r9, d14
 800b898:	d94e      	bls.n	800b938 <_strtod_l+0xa68>
 800b89a:	ee18 3a90 	vmov	r3, s17
 800b89e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d104      	bne.n	800b8b0 <_strtod_l+0x9e0>
 800b8a6:	ee18 3a10 	vmov	r3, s16
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f43f ad4c 	beq.w	800b348 <_strtod_l+0x478>
 800b8b0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ba28 <_strtod_l+0xb58>
 800b8b4:	f04f 38ff 	mov.w	r8, #4294967295
 800b8b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f001 fdee 	bl	800d49c <_Bfree>
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f001 fdea 	bl	800d49c <_Bfree>
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f001 fde6 	bl	800d49c <_Bfree>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f001 fde2 	bl	800d49c <_Bfree>
 800b8d8:	e619      	b.n	800b50e <_strtod_l+0x63e>
 800b8da:	f1b8 0f00 	cmp.w	r8, #0
 800b8de:	d112      	bne.n	800b906 <_strtod_l+0xa36>
 800b8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8e4:	b9b3      	cbnz	r3, 800b914 <_strtod_l+0xa44>
 800b8e6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b8ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b8f6:	bf58      	it	pl
 800b8f8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b8fc:	eeb1 7b4d 	vneg.f64	d7, d13
 800b900:	ec53 2b17 	vmov	r2, r3, d7
 800b904:	e7aa      	b.n	800b85c <_strtod_l+0x98c>
 800b906:	f1b8 0f01 	cmp.w	r8, #1
 800b90a:	d103      	bne.n	800b914 <_strtod_l+0xa44>
 800b90c:	f1b9 0f00 	cmp.w	r9, #0
 800b910:	f43f ad8a 	beq.w	800b428 <_strtod_l+0x558>
 800b914:	4b47      	ldr	r3, [pc, #284]	; (800ba34 <_strtod_l+0xb64>)
 800b916:	2200      	movs	r2, #0
 800b918:	e79e      	b.n	800b858 <_strtod_l+0x988>
 800b91a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b91e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b922:	f1ba 0f00 	cmp.w	sl, #0
 800b926:	d104      	bne.n	800b932 <_strtod_l+0xa62>
 800b928:	eeb1 7b4d 	vneg.f64	d7, d13
 800b92c:	ec53 2b17 	vmov	r2, r3, d7
 800b930:	e794      	b.n	800b85c <_strtod_l+0x98c>
 800b932:	eeb0 7b4d 	vmov.f64	d7, d13
 800b936:	e7f9      	b.n	800b92c <_strtod_l+0xa5c>
 800b938:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1ba      	bne.n	800b8b8 <_strtod_l+0x9e8>
 800b942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b946:	0d1b      	lsrs	r3, r3, #20
 800b948:	051b      	lsls	r3, r3, #20
 800b94a:	4299      	cmp	r1, r3
 800b94c:	d1b4      	bne.n	800b8b8 <_strtod_l+0x9e8>
 800b94e:	ec51 0b1d 	vmov	r0, r1, d13
 800b952:	f7f4 fef1 	bl	8000738 <__aeabi_d2lz>
 800b956:	f7f4 fea9 	bl	80006ac <__aeabi_l2d>
 800b95a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b95e:	ec41 0b17 	vmov	d7, r0, r1
 800b962:	ea43 0308 	orr.w	r3, r3, r8
 800b966:	ea53 030a 	orrs.w	r3, r3, sl
 800b96a:	ee3d db47 	vsub.f64	d13, d13, d7
 800b96e:	d03c      	beq.n	800b9ea <_strtod_l+0xb1a>
 800b970:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b978:	f53f acf0 	bmi.w	800b35c <_strtod_l+0x48c>
 800b97c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b984:	dd98      	ble.n	800b8b8 <_strtod_l+0x9e8>
 800b986:	e4e9      	b.n	800b35c <_strtod_l+0x48c>
 800b988:	9804      	ldr	r0, [sp, #16]
 800b98a:	b1f0      	cbz	r0, 800b9ca <_strtod_l+0xafa>
 800b98c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b990:	d81b      	bhi.n	800b9ca <_strtod_l+0xafa>
 800b992:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ba18 <_strtod_l+0xb48>
 800b996:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99e:	d811      	bhi.n	800b9c4 <_strtod_l+0xaf4>
 800b9a0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b9a4:	ee1d 3a10 	vmov	r3, s26
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf38      	it	cc
 800b9ac:	2301      	movcc	r3, #1
 800b9ae:	ee0d 3a10 	vmov	s26, r3
 800b9b2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b9b6:	f1ba 0f00 	cmp.w	sl, #0
 800b9ba:	d113      	bne.n	800b9e4 <_strtod_l+0xb14>
 800b9bc:	eeb1 7b4d 	vneg.f64	d7, d13
 800b9c0:	ec53 2b17 	vmov	r2, r3, d7
 800b9c4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b9c8:	1a43      	subs	r3, r0, r1
 800b9ca:	eeb0 0b48 	vmov.f64	d0, d8
 800b9ce:	ec43 2b1c 	vmov	d12, r2, r3
 800b9d2:	910a      	str	r1, [sp, #40]	; 0x28
 800b9d4:	f002 f894 	bl	800db00 <__ulp>
 800b9d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9da:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b9de:	ec59 8b18 	vmov	r8, r9, d8
 800b9e2:	e7ab      	b.n	800b93c <_strtod_l+0xa6c>
 800b9e4:	eeb0 7b4d 	vmov.f64	d7, d13
 800b9e8:	e7ea      	b.n	800b9c0 <_strtod_l+0xaf0>
 800b9ea:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f2:	f57f af61 	bpl.w	800b8b8 <_strtod_l+0x9e8>
 800b9f6:	e4b1      	b.n	800b35c <_strtod_l+0x48c>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	9308      	str	r3, [sp, #32]
 800b9fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	f7ff baad 	b.w	800af60 <_strtod_l+0x90>
 800ba06:	2a65      	cmp	r2, #101	; 0x65
 800ba08:	f43f ab9f 	beq.w	800b14a <_strtod_l+0x27a>
 800ba0c:	2a45      	cmp	r2, #69	; 0x45
 800ba0e:	f43f ab9c 	beq.w	800b14a <_strtod_l+0x27a>
 800ba12:	2101      	movs	r1, #1
 800ba14:	f7ff bbd4 	b.w	800b1c0 <_strtod_l+0x2f0>
 800ba18:	ffc00000 	.word	0xffc00000
 800ba1c:	41dfffff 	.word	0x41dfffff
 800ba20:	000fffff 	.word	0x000fffff
 800ba24:	7ff00000 	.word	0x7ff00000
 800ba28:	7fefffff 	.word	0x7fefffff
 800ba2c:	3ff00000 	.word	0x3ff00000
 800ba30:	7c9fffff 	.word	0x7c9fffff
 800ba34:	bff00000 	.word	0xbff00000
 800ba38:	7fe00000 	.word	0x7fe00000

0800ba3c <_strtod_r>:
 800ba3c:	4b01      	ldr	r3, [pc, #4]	; (800ba44 <_strtod_r+0x8>)
 800ba3e:	f7ff ba47 	b.w	800aed0 <_strtod_l>
 800ba42:	bf00      	nop
 800ba44:	24000098 	.word	0x24000098

0800ba48 <_strtol_l.constprop.0>:
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4e:	d001      	beq.n	800ba54 <_strtol_l.constprop.0+0xc>
 800ba50:	2b24      	cmp	r3, #36	; 0x24
 800ba52:	d906      	bls.n	800ba62 <_strtol_l.constprop.0+0x1a>
 800ba54:	f7fe faae 	bl	8009fb4 <__errno>
 800ba58:	2316      	movs	r3, #22
 800ba5a:	6003      	str	r3, [r0, #0]
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb48 <_strtol_l.constprop.0+0x100>
 800ba66:	460d      	mov	r5, r1
 800ba68:	462e      	mov	r6, r5
 800ba6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ba72:	f017 0708 	ands.w	r7, r7, #8
 800ba76:	d1f7      	bne.n	800ba68 <_strtol_l.constprop.0+0x20>
 800ba78:	2c2d      	cmp	r4, #45	; 0x2d
 800ba7a:	d132      	bne.n	800bae2 <_strtol_l.constprop.0+0x9a>
 800ba7c:	782c      	ldrb	r4, [r5, #0]
 800ba7e:	2701      	movs	r7, #1
 800ba80:	1cb5      	adds	r5, r6, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d05b      	beq.n	800bb3e <_strtol_l.constprop.0+0xf6>
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	d109      	bne.n	800ba9e <_strtol_l.constprop.0+0x56>
 800ba8a:	2c30      	cmp	r4, #48	; 0x30
 800ba8c:	d107      	bne.n	800ba9e <_strtol_l.constprop.0+0x56>
 800ba8e:	782c      	ldrb	r4, [r5, #0]
 800ba90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba94:	2c58      	cmp	r4, #88	; 0x58
 800ba96:	d14d      	bne.n	800bb34 <_strtol_l.constprop.0+0xec>
 800ba98:	786c      	ldrb	r4, [r5, #1]
 800ba9a:	2310      	movs	r3, #16
 800ba9c:	3502      	adds	r5, #2
 800ba9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800baa2:	f108 38ff 	add.w	r8, r8, #4294967295
 800baa6:	f04f 0c00 	mov.w	ip, #0
 800baaa:	fbb8 f9f3 	udiv	r9, r8, r3
 800baae:	4666      	mov	r6, ip
 800bab0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bab4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bab8:	f1be 0f09 	cmp.w	lr, #9
 800babc:	d816      	bhi.n	800baec <_strtol_l.constprop.0+0xa4>
 800babe:	4674      	mov	r4, lr
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	dd24      	ble.n	800bb0e <_strtol_l.constprop.0+0xc6>
 800bac4:	f1bc 0f00 	cmp.w	ip, #0
 800bac8:	db1e      	blt.n	800bb08 <_strtol_l.constprop.0+0xc0>
 800baca:	45b1      	cmp	r9, r6
 800bacc:	d31c      	bcc.n	800bb08 <_strtol_l.constprop.0+0xc0>
 800bace:	d101      	bne.n	800bad4 <_strtol_l.constprop.0+0x8c>
 800bad0:	45a2      	cmp	sl, r4
 800bad2:	db19      	blt.n	800bb08 <_strtol_l.constprop.0+0xc0>
 800bad4:	fb06 4603 	mla	r6, r6, r3, r4
 800bad8:	f04f 0c01 	mov.w	ip, #1
 800badc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bae0:	e7e8      	b.n	800bab4 <_strtol_l.constprop.0+0x6c>
 800bae2:	2c2b      	cmp	r4, #43	; 0x2b
 800bae4:	bf04      	itt	eq
 800bae6:	782c      	ldrbeq	r4, [r5, #0]
 800bae8:	1cb5      	addeq	r5, r6, #2
 800baea:	e7ca      	b.n	800ba82 <_strtol_l.constprop.0+0x3a>
 800baec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800baf0:	f1be 0f19 	cmp.w	lr, #25
 800baf4:	d801      	bhi.n	800bafa <_strtol_l.constprop.0+0xb2>
 800baf6:	3c37      	subs	r4, #55	; 0x37
 800baf8:	e7e2      	b.n	800bac0 <_strtol_l.constprop.0+0x78>
 800bafa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bafe:	f1be 0f19 	cmp.w	lr, #25
 800bb02:	d804      	bhi.n	800bb0e <_strtol_l.constprop.0+0xc6>
 800bb04:	3c57      	subs	r4, #87	; 0x57
 800bb06:	e7db      	b.n	800bac0 <_strtol_l.constprop.0+0x78>
 800bb08:	f04f 3cff 	mov.w	ip, #4294967295
 800bb0c:	e7e6      	b.n	800badc <_strtol_l.constprop.0+0x94>
 800bb0e:	f1bc 0f00 	cmp.w	ip, #0
 800bb12:	da05      	bge.n	800bb20 <_strtol_l.constprop.0+0xd8>
 800bb14:	2322      	movs	r3, #34	; 0x22
 800bb16:	6003      	str	r3, [r0, #0]
 800bb18:	4646      	mov	r6, r8
 800bb1a:	b942      	cbnz	r2, 800bb2e <_strtol_l.constprop.0+0xe6>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	e79e      	b.n	800ba5e <_strtol_l.constprop.0+0x16>
 800bb20:	b107      	cbz	r7, 800bb24 <_strtol_l.constprop.0+0xdc>
 800bb22:	4276      	negs	r6, r6
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	d0f9      	beq.n	800bb1c <_strtol_l.constprop.0+0xd4>
 800bb28:	f1bc 0f00 	cmp.w	ip, #0
 800bb2c:	d000      	beq.n	800bb30 <_strtol_l.constprop.0+0xe8>
 800bb2e:	1e69      	subs	r1, r5, #1
 800bb30:	6011      	str	r1, [r2, #0]
 800bb32:	e7f3      	b.n	800bb1c <_strtol_l.constprop.0+0xd4>
 800bb34:	2430      	movs	r4, #48	; 0x30
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1b1      	bne.n	800ba9e <_strtol_l.constprop.0+0x56>
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	e7af      	b.n	800ba9e <_strtol_l.constprop.0+0x56>
 800bb3e:	2c30      	cmp	r4, #48	; 0x30
 800bb40:	d0a5      	beq.n	800ba8e <_strtol_l.constprop.0+0x46>
 800bb42:	230a      	movs	r3, #10
 800bb44:	e7ab      	b.n	800ba9e <_strtol_l.constprop.0+0x56>
 800bb46:	bf00      	nop
 800bb48:	0800f409 	.word	0x0800f409

0800bb4c <_strtol_r>:
 800bb4c:	f7ff bf7c 	b.w	800ba48 <_strtol_l.constprop.0>

0800bb50 <__swbuf_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	460e      	mov	r6, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	4605      	mov	r5, r0
 800bb58:	b118      	cbz	r0, 800bb62 <__swbuf_r+0x12>
 800bb5a:	6983      	ldr	r3, [r0, #24]
 800bb5c:	b90b      	cbnz	r3, 800bb62 <__swbuf_r+0x12>
 800bb5e:	f000 ffcb 	bl	800caf8 <__sinit>
 800bb62:	4b21      	ldr	r3, [pc, #132]	; (800bbe8 <__swbuf_r+0x98>)
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d12b      	bne.n	800bbc0 <__swbuf_r+0x70>
 800bb68:	686c      	ldr	r4, [r5, #4]
 800bb6a:	69a3      	ldr	r3, [r4, #24]
 800bb6c:	60a3      	str	r3, [r4, #8]
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	071a      	lsls	r2, r3, #28
 800bb72:	d52f      	bpl.n	800bbd4 <__swbuf_r+0x84>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	b36b      	cbz	r3, 800bbd4 <__swbuf_r+0x84>
 800bb78:	6923      	ldr	r3, [r4, #16]
 800bb7a:	6820      	ldr	r0, [r4, #0]
 800bb7c:	1ac0      	subs	r0, r0, r3
 800bb7e:	6963      	ldr	r3, [r4, #20]
 800bb80:	b2f6      	uxtb	r6, r6
 800bb82:	4283      	cmp	r3, r0
 800bb84:	4637      	mov	r7, r6
 800bb86:	dc04      	bgt.n	800bb92 <__swbuf_r+0x42>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 ff20 	bl	800c9d0 <_fflush_r>
 800bb90:	bb30      	cbnz	r0, 800bbe0 <__swbuf_r+0x90>
 800bb92:	68a3      	ldr	r3, [r4, #8]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	60a3      	str	r3, [r4, #8]
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	701e      	strb	r6, [r3, #0]
 800bba0:	6963      	ldr	r3, [r4, #20]
 800bba2:	3001      	adds	r0, #1
 800bba4:	4283      	cmp	r3, r0
 800bba6:	d004      	beq.n	800bbb2 <__swbuf_r+0x62>
 800bba8:	89a3      	ldrh	r3, [r4, #12]
 800bbaa:	07db      	lsls	r3, r3, #31
 800bbac:	d506      	bpl.n	800bbbc <__swbuf_r+0x6c>
 800bbae:	2e0a      	cmp	r6, #10
 800bbb0:	d104      	bne.n	800bbbc <__swbuf_r+0x6c>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 ff0b 	bl	800c9d0 <_fflush_r>
 800bbba:	b988      	cbnz	r0, 800bbe0 <__swbuf_r+0x90>
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc0:	4b0a      	ldr	r3, [pc, #40]	; (800bbec <__swbuf_r+0x9c>)
 800bbc2:	429c      	cmp	r4, r3
 800bbc4:	d101      	bne.n	800bbca <__swbuf_r+0x7a>
 800bbc6:	68ac      	ldr	r4, [r5, #8]
 800bbc8:	e7cf      	b.n	800bb6a <__swbuf_r+0x1a>
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <__swbuf_r+0xa0>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	bf08      	it	eq
 800bbd0:	68ec      	ldreq	r4, [r5, #12]
 800bbd2:	e7ca      	b.n	800bb6a <__swbuf_r+0x1a>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f000 f80c 	bl	800bbf4 <__swsetup_r>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d0cb      	beq.n	800bb78 <__swbuf_r+0x28>
 800bbe0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbe4:	e7ea      	b.n	800bbbc <__swbuf_r+0x6c>
 800bbe6:	bf00      	nop
 800bbe8:	0800f5bc 	.word	0x0800f5bc
 800bbec:	0800f5dc 	.word	0x0800f5dc
 800bbf0:	0800f59c 	.word	0x0800f59c

0800bbf4 <__swsetup_r>:
 800bbf4:	4b32      	ldr	r3, [pc, #200]	; (800bcc0 <__swsetup_r+0xcc>)
 800bbf6:	b570      	push	{r4, r5, r6, lr}
 800bbf8:	681d      	ldr	r5, [r3, #0]
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	b125      	cbz	r5, 800bc0a <__swsetup_r+0x16>
 800bc00:	69ab      	ldr	r3, [r5, #24]
 800bc02:	b913      	cbnz	r3, 800bc0a <__swsetup_r+0x16>
 800bc04:	4628      	mov	r0, r5
 800bc06:	f000 ff77 	bl	800caf8 <__sinit>
 800bc0a:	4b2e      	ldr	r3, [pc, #184]	; (800bcc4 <__swsetup_r+0xd0>)
 800bc0c:	429c      	cmp	r4, r3
 800bc0e:	d10f      	bne.n	800bc30 <__swsetup_r+0x3c>
 800bc10:	686c      	ldr	r4, [r5, #4]
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc18:	0719      	lsls	r1, r3, #28
 800bc1a:	d42c      	bmi.n	800bc76 <__swsetup_r+0x82>
 800bc1c:	06dd      	lsls	r5, r3, #27
 800bc1e:	d411      	bmi.n	800bc44 <__swsetup_r+0x50>
 800bc20:	2309      	movs	r3, #9
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2e:	e03e      	b.n	800bcae <__swsetup_r+0xba>
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <__swsetup_r+0xd4>)
 800bc32:	429c      	cmp	r4, r3
 800bc34:	d101      	bne.n	800bc3a <__swsetup_r+0x46>
 800bc36:	68ac      	ldr	r4, [r5, #8]
 800bc38:	e7eb      	b.n	800bc12 <__swsetup_r+0x1e>
 800bc3a:	4b24      	ldr	r3, [pc, #144]	; (800bccc <__swsetup_r+0xd8>)
 800bc3c:	429c      	cmp	r4, r3
 800bc3e:	bf08      	it	eq
 800bc40:	68ec      	ldreq	r4, [r5, #12]
 800bc42:	e7e6      	b.n	800bc12 <__swsetup_r+0x1e>
 800bc44:	0758      	lsls	r0, r3, #29
 800bc46:	d512      	bpl.n	800bc6e <__swsetup_r+0x7a>
 800bc48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc4a:	b141      	cbz	r1, 800bc5e <__swsetup_r+0x6a>
 800bc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc50:	4299      	cmp	r1, r3
 800bc52:	d002      	beq.n	800bc5a <__swsetup_r+0x66>
 800bc54:	4630      	mov	r0, r6
 800bc56:	f002 f8b5 	bl	800ddc4 <_free_r>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	2300      	movs	r3, #0
 800bc68:	6063      	str	r3, [r4, #4]
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f043 0308 	orr.w	r3, r3, #8
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	b94b      	cbnz	r3, 800bc8e <__swsetup_r+0x9a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc84:	d003      	beq.n	800bc8e <__swsetup_r+0x9a>
 800bc86:	4621      	mov	r1, r4
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f001 fb6d 	bl	800d368 <__smakebuf_r>
 800bc8e:	89a0      	ldrh	r0, [r4, #12]
 800bc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc94:	f010 0301 	ands.w	r3, r0, #1
 800bc98:	d00a      	beq.n	800bcb0 <__swsetup_r+0xbc>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60a3      	str	r3, [r4, #8]
 800bc9e:	6963      	ldr	r3, [r4, #20]
 800bca0:	425b      	negs	r3, r3
 800bca2:	61a3      	str	r3, [r4, #24]
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	b943      	cbnz	r3, 800bcba <__swsetup_r+0xc6>
 800bca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcac:	d1ba      	bne.n	800bc24 <__swsetup_r+0x30>
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 800bcb0:	0781      	lsls	r1, r0, #30
 800bcb2:	bf58      	it	pl
 800bcb4:	6963      	ldrpl	r3, [r4, #20]
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	e7f4      	b.n	800bca4 <__swsetup_r+0xb0>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e7f7      	b.n	800bcae <__swsetup_r+0xba>
 800bcbe:	bf00      	nop
 800bcc0:	24000030 	.word	0x24000030
 800bcc4:	0800f5bc 	.word	0x0800f5bc
 800bcc8:	0800f5dc 	.word	0x0800f5dc
 800bccc:	0800f59c 	.word	0x0800f59c

0800bcd0 <quorem>:
 800bcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	6903      	ldr	r3, [r0, #16]
 800bcd6:	690c      	ldr	r4, [r1, #16]
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	4607      	mov	r7, r0
 800bcdc:	f2c0 8081 	blt.w	800bde2 <quorem+0x112>
 800bce0:	3c01      	subs	r4, #1
 800bce2:	f101 0814 	add.w	r8, r1, #20
 800bce6:	f100 0514 	add.w	r5, r0, #20
 800bcea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcee:	9301      	str	r3, [sp, #4]
 800bcf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd04:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd08:	d331      	bcc.n	800bd6e <quorem+0x9e>
 800bd0a:	f04f 0e00 	mov.w	lr, #0
 800bd0e:	4640      	mov	r0, r8
 800bd10:	46ac      	mov	ip, r5
 800bd12:	46f2      	mov	sl, lr
 800bd14:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd18:	b293      	uxth	r3, r2
 800bd1a:	fb06 e303 	mla	r3, r6, r3, lr
 800bd1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	ebaa 0303 	sub.w	r3, sl, r3
 800bd28:	f8dc a000 	ldr.w	sl, [ip]
 800bd2c:	0c12      	lsrs	r2, r2, #16
 800bd2e:	fa13 f38a 	uxtah	r3, r3, sl
 800bd32:	fb06 e202 	mla	r2, r6, r2, lr
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	9b00      	ldr	r3, [sp, #0]
 800bd3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd3e:	b292      	uxth	r2, r2
 800bd40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd48:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd4c:	4581      	cmp	r9, r0
 800bd4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd52:	f84c 3b04 	str.w	r3, [ip], #4
 800bd56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd5a:	d2db      	bcs.n	800bd14 <quorem+0x44>
 800bd5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd60:	b92b      	cbnz	r3, 800bd6e <quorem+0x9e>
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	3b04      	subs	r3, #4
 800bd66:	429d      	cmp	r5, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	d32e      	bcc.n	800bdca <quorem+0xfa>
 800bd6c:	613c      	str	r4, [r7, #16]
 800bd6e:	4638      	mov	r0, r7
 800bd70:	f001 fe20 	bl	800d9b4 <__mcmp>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	db24      	blt.n	800bdc2 <quorem+0xf2>
 800bd78:	3601      	adds	r6, #1
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f04f 0c00 	mov.w	ip, #0
 800bd80:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd84:	f8d0 e000 	ldr.w	lr, [r0]
 800bd88:	b293      	uxth	r3, r2
 800bd8a:	ebac 0303 	sub.w	r3, ip, r3
 800bd8e:	0c12      	lsrs	r2, r2, #16
 800bd90:	fa13 f38e 	uxtah	r3, r3, lr
 800bd94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bda2:	45c1      	cmp	r9, r8
 800bda4:	f840 3b04 	str.w	r3, [r0], #4
 800bda8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdac:	d2e8      	bcs.n	800bd80 <quorem+0xb0>
 800bdae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdb6:	b922      	cbnz	r2, 800bdc2 <quorem+0xf2>
 800bdb8:	3b04      	subs	r3, #4
 800bdba:	429d      	cmp	r5, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	d30a      	bcc.n	800bdd6 <quorem+0x106>
 800bdc0:	613c      	str	r4, [r7, #16]
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	6812      	ldr	r2, [r2, #0]
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	d1cc      	bne.n	800bd6c <quorem+0x9c>
 800bdd2:	3c01      	subs	r4, #1
 800bdd4:	e7c7      	b.n	800bd66 <quorem+0x96>
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	3b04      	subs	r3, #4
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	d1f0      	bne.n	800bdc0 <quorem+0xf0>
 800bdde:	3c01      	subs	r4, #1
 800bde0:	e7eb      	b.n	800bdba <quorem+0xea>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e7ee      	b.n	800bdc4 <quorem+0xf4>
	...

0800bde8 <_dtoa_r>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	ed2d 8b02 	vpush	{d8}
 800bdf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdf2:	b091      	sub	sp, #68	; 0x44
 800bdf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bdf8:	ec59 8b10 	vmov	r8, r9, d0
 800bdfc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bdfe:	9106      	str	r1, [sp, #24]
 800be00:	4606      	mov	r6, r0
 800be02:	9208      	str	r2, [sp, #32]
 800be04:	930c      	str	r3, [sp, #48]	; 0x30
 800be06:	b975      	cbnz	r5, 800be26 <_dtoa_r+0x3e>
 800be08:	2010      	movs	r0, #16
 800be0a:	f001 faed 	bl	800d3e8 <malloc>
 800be0e:	4602      	mov	r2, r0
 800be10:	6270      	str	r0, [r6, #36]	; 0x24
 800be12:	b920      	cbnz	r0, 800be1e <_dtoa_r+0x36>
 800be14:	4baa      	ldr	r3, [pc, #680]	; (800c0c0 <_dtoa_r+0x2d8>)
 800be16:	21ea      	movs	r1, #234	; 0xea
 800be18:	48aa      	ldr	r0, [pc, #680]	; (800c0c4 <_dtoa_r+0x2dc>)
 800be1a:	f002 fbf7 	bl	800e60c <__assert_func>
 800be1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be22:	6005      	str	r5, [r0, #0]
 800be24:	60c5      	str	r5, [r0, #12]
 800be26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be28:	6819      	ldr	r1, [r3, #0]
 800be2a:	b151      	cbz	r1, 800be42 <_dtoa_r+0x5a>
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	604a      	str	r2, [r1, #4]
 800be30:	2301      	movs	r3, #1
 800be32:	4093      	lsls	r3, r2
 800be34:	608b      	str	r3, [r1, #8]
 800be36:	4630      	mov	r0, r6
 800be38:	f001 fb30 	bl	800d49c <_Bfree>
 800be3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f1b9 0300 	subs.w	r3, r9, #0
 800be46:	bfbb      	ittet	lt
 800be48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800be4c:	9303      	strlt	r3, [sp, #12]
 800be4e:	2300      	movge	r3, #0
 800be50:	2201      	movlt	r2, #1
 800be52:	bfac      	ite	ge
 800be54:	6023      	strge	r3, [r4, #0]
 800be56:	6022      	strlt	r2, [r4, #0]
 800be58:	4b9b      	ldr	r3, [pc, #620]	; (800c0c8 <_dtoa_r+0x2e0>)
 800be5a:	9c03      	ldr	r4, [sp, #12]
 800be5c:	43a3      	bics	r3, r4
 800be5e:	d11c      	bne.n	800be9a <_dtoa_r+0xb2>
 800be60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be62:	f242 730f 	movw	r3, #9999	; 0x270f
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800be6c:	ea53 0308 	orrs.w	r3, r3, r8
 800be70:	f000 84fd 	beq.w	800c86e <_dtoa_r+0xa86>
 800be74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be76:	b963      	cbnz	r3, 800be92 <_dtoa_r+0xaa>
 800be78:	4b94      	ldr	r3, [pc, #592]	; (800c0cc <_dtoa_r+0x2e4>)
 800be7a:	e01f      	b.n	800bebc <_dtoa_r+0xd4>
 800be7c:	4b94      	ldr	r3, [pc, #592]	; (800c0d0 <_dtoa_r+0x2e8>)
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	3308      	adds	r3, #8
 800be82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	9801      	ldr	r0, [sp, #4]
 800be88:	b011      	add	sp, #68	; 0x44
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be92:	4b8e      	ldr	r3, [pc, #568]	; (800c0cc <_dtoa_r+0x2e4>)
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	3303      	adds	r3, #3
 800be98:	e7f3      	b.n	800be82 <_dtoa_r+0x9a>
 800be9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800be9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	d10b      	bne.n	800bec0 <_dtoa_r+0xd8>
 800bea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beaa:	2301      	movs	r3, #1
 800beac:	6013      	str	r3, [r2, #0]
 800beae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 84d9 	beq.w	800c868 <_dtoa_r+0xa80>
 800beb6:	4887      	ldr	r0, [pc, #540]	; (800c0d4 <_dtoa_r+0x2ec>)
 800beb8:	6018      	str	r0, [r3, #0]
 800beba:	1e43      	subs	r3, r0, #1
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	e7e2      	b.n	800be86 <_dtoa_r+0x9e>
 800bec0:	a90f      	add	r1, sp, #60	; 0x3c
 800bec2:	aa0e      	add	r2, sp, #56	; 0x38
 800bec4:	4630      	mov	r0, r6
 800bec6:	eeb0 0b48 	vmov.f64	d0, d8
 800beca:	f001 fe95 	bl	800dbf8 <__d2b>
 800bece:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bed2:	4605      	mov	r5, r0
 800bed4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bed6:	2900      	cmp	r1, #0
 800bed8:	d046      	beq.n	800bf68 <_dtoa_r+0x180>
 800beda:	ee18 4a90 	vmov	r4, s17
 800bede:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bee2:	ec53 2b18 	vmov	r2, r3, d8
 800bee6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800beea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800beee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bef2:	2400      	movs	r4, #0
 800bef4:	ec43 2b16 	vmov	d6, r2, r3
 800bef8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800befc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c0a8 <_dtoa_r+0x2c0>
 800bf00:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf04:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c0b0 <_dtoa_r+0x2c8>
 800bf08:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c0b8 <_dtoa_r+0x2d0>
 800bf10:	ee07 1a90 	vmov	s15, r1
 800bf14:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bf18:	eeb0 7b46 	vmov.f64	d7, d6
 800bf1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bf20:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bf24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	ee16 ba90 	vmov	fp, s13
 800bf30:	940a      	str	r4, [sp, #40]	; 0x28
 800bf32:	d508      	bpl.n	800bf46 <_dtoa_r+0x15e>
 800bf34:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bf38:	eeb4 6b47 	vcmp.f64	d6, d7
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	bf18      	it	ne
 800bf42:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bf46:	f1bb 0f16 	cmp.w	fp, #22
 800bf4a:	d82f      	bhi.n	800bfac <_dtoa_r+0x1c4>
 800bf4c:	4b62      	ldr	r3, [pc, #392]	; (800c0d8 <_dtoa_r+0x2f0>)
 800bf4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf52:	ed93 7b00 	vldr	d7, [r3]
 800bf56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5e:	d501      	bpl.n	800bf64 <_dtoa_r+0x17c>
 800bf60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf64:	2300      	movs	r3, #0
 800bf66:	e022      	b.n	800bfae <_dtoa_r+0x1c6>
 800bf68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf6a:	4401      	add	r1, r0
 800bf6c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bf70:	2b20      	cmp	r3, #32
 800bf72:	bfc1      	itttt	gt
 800bf74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf78:	fa04 f303 	lslgt.w	r3, r4, r3
 800bf7c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bf80:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bf84:	bfd6      	itet	le
 800bf86:	f1c3 0320 	rsble	r3, r3, #32
 800bf8a:	ea43 0808 	orrgt.w	r8, r3, r8
 800bf8e:	fa08 f803 	lslle.w	r8, r8, r3
 800bf92:	ee07 8a90 	vmov	s15, r8
 800bf96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bf9a:	3901      	subs	r1, #1
 800bf9c:	ee17 4a90 	vmov	r4, s15
 800bfa0:	ec53 2b17 	vmov	r2, r3, d7
 800bfa4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bfa8:	2401      	movs	r4, #1
 800bfaa:	e7a3      	b.n	800bef4 <_dtoa_r+0x10c>
 800bfac:	2301      	movs	r3, #1
 800bfae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfb0:	1a43      	subs	r3, r0, r1
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	bf45      	ittet	mi
 800bfb6:	f1c3 0301 	rsbmi	r3, r3, #1
 800bfba:	9304      	strmi	r3, [sp, #16]
 800bfbc:	2300      	movpl	r3, #0
 800bfbe:	2300      	movmi	r3, #0
 800bfc0:	9205      	str	r2, [sp, #20]
 800bfc2:	bf54      	ite	pl
 800bfc4:	9304      	strpl	r3, [sp, #16]
 800bfc6:	9305      	strmi	r3, [sp, #20]
 800bfc8:	f1bb 0f00 	cmp.w	fp, #0
 800bfcc:	db18      	blt.n	800c000 <_dtoa_r+0x218>
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800bfd4:	445b      	add	r3, fp
 800bfd6:	9305      	str	r3, [sp, #20]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	9a06      	ldr	r2, [sp, #24]
 800bfdc:	2a09      	cmp	r2, #9
 800bfde:	d849      	bhi.n	800c074 <_dtoa_r+0x28c>
 800bfe0:	2a05      	cmp	r2, #5
 800bfe2:	bfc4      	itt	gt
 800bfe4:	3a04      	subgt	r2, #4
 800bfe6:	9206      	strgt	r2, [sp, #24]
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	f1a2 0202 	sub.w	r2, r2, #2
 800bfee:	bfcc      	ite	gt
 800bff0:	2400      	movgt	r4, #0
 800bff2:	2401      	movle	r4, #1
 800bff4:	2a03      	cmp	r2, #3
 800bff6:	d848      	bhi.n	800c08a <_dtoa_r+0x2a2>
 800bff8:	e8df f002 	tbb	[pc, r2]
 800bffc:	3a2c2e0b 	.word	0x3a2c2e0b
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	2200      	movs	r2, #0
 800c004:	eba3 030b 	sub.w	r3, r3, fp
 800c008:	9304      	str	r3, [sp, #16]
 800c00a:	9209      	str	r2, [sp, #36]	; 0x24
 800c00c:	f1cb 0300 	rsb	r3, fp, #0
 800c010:	e7e3      	b.n	800bfda <_dtoa_r+0x1f2>
 800c012:	2200      	movs	r2, #0
 800c014:	9207      	str	r2, [sp, #28]
 800c016:	9a08      	ldr	r2, [sp, #32]
 800c018:	2a00      	cmp	r2, #0
 800c01a:	dc39      	bgt.n	800c090 <_dtoa_r+0x2a8>
 800c01c:	f04f 0a01 	mov.w	sl, #1
 800c020:	46d1      	mov	r9, sl
 800c022:	4652      	mov	r2, sl
 800c024:	f8cd a020 	str.w	sl, [sp, #32]
 800c028:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c02a:	2100      	movs	r1, #0
 800c02c:	6079      	str	r1, [r7, #4]
 800c02e:	2004      	movs	r0, #4
 800c030:	f100 0c14 	add.w	ip, r0, #20
 800c034:	4594      	cmp	ip, r2
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	d92f      	bls.n	800c09a <_dtoa_r+0x2b2>
 800c03a:	4630      	mov	r0, r6
 800c03c:	930d      	str	r3, [sp, #52]	; 0x34
 800c03e:	f001 f9ed 	bl	800d41c <_Balloc>
 800c042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c044:	9001      	str	r0, [sp, #4]
 800c046:	4602      	mov	r2, r0
 800c048:	2800      	cmp	r0, #0
 800c04a:	d149      	bne.n	800c0e0 <_dtoa_r+0x2f8>
 800c04c:	4b23      	ldr	r3, [pc, #140]	; (800c0dc <_dtoa_r+0x2f4>)
 800c04e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c052:	e6e1      	b.n	800be18 <_dtoa_r+0x30>
 800c054:	2201      	movs	r2, #1
 800c056:	e7dd      	b.n	800c014 <_dtoa_r+0x22c>
 800c058:	2200      	movs	r2, #0
 800c05a:	9207      	str	r2, [sp, #28]
 800c05c:	9a08      	ldr	r2, [sp, #32]
 800c05e:	eb0b 0a02 	add.w	sl, fp, r2
 800c062:	f10a 0901 	add.w	r9, sl, #1
 800c066:	464a      	mov	r2, r9
 800c068:	2a01      	cmp	r2, #1
 800c06a:	bfb8      	it	lt
 800c06c:	2201      	movlt	r2, #1
 800c06e:	e7db      	b.n	800c028 <_dtoa_r+0x240>
 800c070:	2201      	movs	r2, #1
 800c072:	e7f2      	b.n	800c05a <_dtoa_r+0x272>
 800c074:	2401      	movs	r4, #1
 800c076:	2200      	movs	r2, #0
 800c078:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c07c:	f04f 3aff 	mov.w	sl, #4294967295
 800c080:	2100      	movs	r1, #0
 800c082:	46d1      	mov	r9, sl
 800c084:	2212      	movs	r2, #18
 800c086:	9108      	str	r1, [sp, #32]
 800c088:	e7ce      	b.n	800c028 <_dtoa_r+0x240>
 800c08a:	2201      	movs	r2, #1
 800c08c:	9207      	str	r2, [sp, #28]
 800c08e:	e7f5      	b.n	800c07c <_dtoa_r+0x294>
 800c090:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c094:	46d1      	mov	r9, sl
 800c096:	4652      	mov	r2, sl
 800c098:	e7c6      	b.n	800c028 <_dtoa_r+0x240>
 800c09a:	3101      	adds	r1, #1
 800c09c:	6079      	str	r1, [r7, #4]
 800c09e:	0040      	lsls	r0, r0, #1
 800c0a0:	e7c6      	b.n	800c030 <_dtoa_r+0x248>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	636f4361 	.word	0x636f4361
 800c0ac:	3fd287a7 	.word	0x3fd287a7
 800c0b0:	8b60c8b3 	.word	0x8b60c8b3
 800c0b4:	3fc68a28 	.word	0x3fc68a28
 800c0b8:	509f79fb 	.word	0x509f79fb
 800c0bc:	3fd34413 	.word	0x3fd34413
 800c0c0:	0800f516 	.word	0x0800f516
 800c0c4:	0800f52d 	.word	0x0800f52d
 800c0c8:	7ff00000 	.word	0x7ff00000
 800c0cc:	0800f512 	.word	0x0800f512
 800c0d0:	0800f509 	.word	0x0800f509
 800c0d4:	0800f38d 	.word	0x0800f38d
 800c0d8:	0800f700 	.word	0x0800f700
 800c0dc:	0800f588 	.word	0x0800f588
 800c0e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c0e2:	9901      	ldr	r1, [sp, #4]
 800c0e4:	6011      	str	r1, [r2, #0]
 800c0e6:	f1b9 0f0e 	cmp.w	r9, #14
 800c0ea:	d86c      	bhi.n	800c1c6 <_dtoa_r+0x3de>
 800c0ec:	2c00      	cmp	r4, #0
 800c0ee:	d06a      	beq.n	800c1c6 <_dtoa_r+0x3de>
 800c0f0:	f1bb 0f00 	cmp.w	fp, #0
 800c0f4:	f340 80a0 	ble.w	800c238 <_dtoa_r+0x450>
 800c0f8:	49c1      	ldr	r1, [pc, #772]	; (800c400 <_dtoa_r+0x618>)
 800c0fa:	f00b 020f 	and.w	r2, fp, #15
 800c0fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c102:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c106:	ed92 7b00 	vldr	d7, [r2]
 800c10a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c10e:	f000 8087 	beq.w	800c220 <_dtoa_r+0x438>
 800c112:	4abc      	ldr	r2, [pc, #752]	; (800c404 <_dtoa_r+0x61c>)
 800c114:	ed92 6b08 	vldr	d6, [r2, #32]
 800c118:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c11c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c120:	f001 010f 	and.w	r1, r1, #15
 800c124:	2203      	movs	r2, #3
 800c126:	48b7      	ldr	r0, [pc, #732]	; (800c404 <_dtoa_r+0x61c>)
 800c128:	2900      	cmp	r1, #0
 800c12a:	d17b      	bne.n	800c224 <_dtoa_r+0x43c>
 800c12c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c130:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c134:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c13a:	2900      	cmp	r1, #0
 800c13c:	f000 80a2 	beq.w	800c284 <_dtoa_r+0x49c>
 800c140:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c144:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c148:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	f140 8098 	bpl.w	800c284 <_dtoa_r+0x49c>
 800c154:	f1b9 0f00 	cmp.w	r9, #0
 800c158:	f000 8094 	beq.w	800c284 <_dtoa_r+0x49c>
 800c15c:	f1ba 0f00 	cmp.w	sl, #0
 800c160:	dd2f      	ble.n	800c1c2 <_dtoa_r+0x3da>
 800c162:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c16a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c16e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c172:	3201      	adds	r2, #1
 800c174:	4650      	mov	r0, sl
 800c176:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c17a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c17e:	ee07 2a90 	vmov	s15, r2
 800c182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c186:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c18a:	ee15 4a90 	vmov	r4, s11
 800c18e:	ec52 1b15 	vmov	r1, r2, d5
 800c192:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c196:	2800      	cmp	r0, #0
 800c198:	d177      	bne.n	800c28a <_dtoa_r+0x4a2>
 800c19a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c19e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c1a2:	ec42 1b17 	vmov	d7, r1, r2
 800c1a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ae:	f300 8263 	bgt.w	800c678 <_dtoa_r+0x890>
 800c1b2:	eeb1 7b47 	vneg.f64	d7, d7
 800c1b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	f100 8258 	bmi.w	800c672 <_dtoa_r+0x88a>
 800c1c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	f2c0 811d 	blt.w	800c408 <_dtoa_r+0x620>
 800c1ce:	f1bb 0f0e 	cmp.w	fp, #14
 800c1d2:	f300 8119 	bgt.w	800c408 <_dtoa_r+0x620>
 800c1d6:	4b8a      	ldr	r3, [pc, #552]	; (800c400 <_dtoa_r+0x618>)
 800c1d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1dc:	ed93 6b00 	vldr	d6, [r3]
 800c1e0:	9b08      	ldr	r3, [sp, #32]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f280 80b7 	bge.w	800c356 <_dtoa_r+0x56e>
 800c1e8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ec:	f300 80b3 	bgt.w	800c356 <_dtoa_r+0x56e>
 800c1f0:	f040 823f 	bne.w	800c672 <_dtoa_r+0x88a>
 800c1f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c1f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c1fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c200:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c208:	464c      	mov	r4, r9
 800c20a:	464f      	mov	r7, r9
 800c20c:	f280 8215 	bge.w	800c63a <_dtoa_r+0x852>
 800c210:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c214:	2331      	movs	r3, #49	; 0x31
 800c216:	f808 3b01 	strb.w	r3, [r8], #1
 800c21a:	f10b 0b01 	add.w	fp, fp, #1
 800c21e:	e211      	b.n	800c644 <_dtoa_r+0x85c>
 800c220:	2202      	movs	r2, #2
 800c222:	e780      	b.n	800c126 <_dtoa_r+0x33e>
 800c224:	07cc      	lsls	r4, r1, #31
 800c226:	d504      	bpl.n	800c232 <_dtoa_r+0x44a>
 800c228:	ed90 6b00 	vldr	d6, [r0]
 800c22c:	3201      	adds	r2, #1
 800c22e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c232:	1049      	asrs	r1, r1, #1
 800c234:	3008      	adds	r0, #8
 800c236:	e777      	b.n	800c128 <_dtoa_r+0x340>
 800c238:	d022      	beq.n	800c280 <_dtoa_r+0x498>
 800c23a:	f1cb 0100 	rsb	r1, fp, #0
 800c23e:	4a70      	ldr	r2, [pc, #448]	; (800c400 <_dtoa_r+0x618>)
 800c240:	f001 000f 	and.w	r0, r1, #15
 800c244:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c248:	ed92 7b00 	vldr	d7, [r2]
 800c24c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c250:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c254:	486b      	ldr	r0, [pc, #428]	; (800c404 <_dtoa_r+0x61c>)
 800c256:	1109      	asrs	r1, r1, #4
 800c258:	2400      	movs	r4, #0
 800c25a:	2202      	movs	r2, #2
 800c25c:	b929      	cbnz	r1, 800c26a <_dtoa_r+0x482>
 800c25e:	2c00      	cmp	r4, #0
 800c260:	f43f af6a 	beq.w	800c138 <_dtoa_r+0x350>
 800c264:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c268:	e766      	b.n	800c138 <_dtoa_r+0x350>
 800c26a:	07cf      	lsls	r7, r1, #31
 800c26c:	d505      	bpl.n	800c27a <_dtoa_r+0x492>
 800c26e:	ed90 6b00 	vldr	d6, [r0]
 800c272:	3201      	adds	r2, #1
 800c274:	2401      	movs	r4, #1
 800c276:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c27a:	1049      	asrs	r1, r1, #1
 800c27c:	3008      	adds	r0, #8
 800c27e:	e7ed      	b.n	800c25c <_dtoa_r+0x474>
 800c280:	2202      	movs	r2, #2
 800c282:	e759      	b.n	800c138 <_dtoa_r+0x350>
 800c284:	465f      	mov	r7, fp
 800c286:	4648      	mov	r0, r9
 800c288:	e775      	b.n	800c176 <_dtoa_r+0x38e>
 800c28a:	ec42 1b17 	vmov	d7, r1, r2
 800c28e:	4a5c      	ldr	r2, [pc, #368]	; (800c400 <_dtoa_r+0x618>)
 800c290:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c294:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c298:	9a01      	ldr	r2, [sp, #4]
 800c29a:	1814      	adds	r4, r2, r0
 800c29c:	9a07      	ldr	r2, [sp, #28]
 800c29e:	b352      	cbz	r2, 800c2f6 <_dtoa_r+0x50e>
 800c2a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c2a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c2a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c2b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c2b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c2b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c2bc:	ee14 2a90 	vmov	r2, s9
 800c2c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c2c4:	3230      	adds	r2, #48	; 0x30
 800c2c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c2ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d2:	f808 2b01 	strb.w	r2, [r8], #1
 800c2d6:	d439      	bmi.n	800c34c <_dtoa_r+0x564>
 800c2d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c2dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e4:	d472      	bmi.n	800c3cc <_dtoa_r+0x5e4>
 800c2e6:	45a0      	cmp	r8, r4
 800c2e8:	f43f af6b 	beq.w	800c1c2 <_dtoa_r+0x3da>
 800c2ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c2f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c2f4:	e7e0      	b.n	800c2b8 <_dtoa_r+0x4d0>
 800c2f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c2fe:	4621      	mov	r1, r4
 800c300:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c304:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c308:	ee14 2a90 	vmov	r2, s9
 800c30c:	3230      	adds	r2, #48	; 0x30
 800c30e:	f808 2b01 	strb.w	r2, [r8], #1
 800c312:	45a0      	cmp	r8, r4
 800c314:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c318:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c31c:	d118      	bne.n	800c350 <_dtoa_r+0x568>
 800c31e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c322:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c326:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32e:	dc4d      	bgt.n	800c3cc <_dtoa_r+0x5e4>
 800c330:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33c:	f57f af41 	bpl.w	800c1c2 <_dtoa_r+0x3da>
 800c340:	4688      	mov	r8, r1
 800c342:	3901      	subs	r1, #1
 800c344:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c348:	2b30      	cmp	r3, #48	; 0x30
 800c34a:	d0f9      	beq.n	800c340 <_dtoa_r+0x558>
 800c34c:	46bb      	mov	fp, r7
 800c34e:	e02a      	b.n	800c3a6 <_dtoa_r+0x5be>
 800c350:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c354:	e7d6      	b.n	800c304 <_dtoa_r+0x51c>
 800c356:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c35a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c35e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c362:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c366:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c36a:	ee15 3a10 	vmov	r3, s10
 800c36e:	3330      	adds	r3, #48	; 0x30
 800c370:	f808 3b01 	strb.w	r3, [r8], #1
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	eba8 0303 	sub.w	r3, r8, r3
 800c37a:	4599      	cmp	r9, r3
 800c37c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c380:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c384:	d133      	bne.n	800c3ee <_dtoa_r+0x606>
 800c386:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c38a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c392:	dc1a      	bgt.n	800c3ca <_dtoa_r+0x5e2>
 800c394:	eeb4 7b46 	vcmp.f64	d7, d6
 800c398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39c:	d103      	bne.n	800c3a6 <_dtoa_r+0x5be>
 800c39e:	ee15 3a10 	vmov	r3, s10
 800c3a2:	07d9      	lsls	r1, r3, #31
 800c3a4:	d411      	bmi.n	800c3ca <_dtoa_r+0x5e2>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f001 f877 	bl	800d49c <_Bfree>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3b2:	f888 3000 	strb.w	r3, [r8]
 800c3b6:	f10b 0301 	add.w	r3, fp, #1
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f43f ad61 	beq.w	800be86 <_dtoa_r+0x9e>
 800c3c4:	f8c3 8000 	str.w	r8, [r3]
 800c3c8:	e55d      	b.n	800be86 <_dtoa_r+0x9e>
 800c3ca:	465f      	mov	r7, fp
 800c3cc:	4643      	mov	r3, r8
 800c3ce:	4698      	mov	r8, r3
 800c3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3d4:	2a39      	cmp	r2, #57	; 0x39
 800c3d6:	d106      	bne.n	800c3e6 <_dtoa_r+0x5fe>
 800c3d8:	9a01      	ldr	r2, [sp, #4]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d1f7      	bne.n	800c3ce <_dtoa_r+0x5e6>
 800c3de:	9901      	ldr	r1, [sp, #4]
 800c3e0:	2230      	movs	r2, #48	; 0x30
 800c3e2:	3701      	adds	r7, #1
 800c3e4:	700a      	strb	r2, [r1, #0]
 800c3e6:	781a      	ldrb	r2, [r3, #0]
 800c3e8:	3201      	adds	r2, #1
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	e7ae      	b.n	800c34c <_dtoa_r+0x564>
 800c3ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fa:	d1b2      	bne.n	800c362 <_dtoa_r+0x57a>
 800c3fc:	e7d3      	b.n	800c3a6 <_dtoa_r+0x5be>
 800c3fe:	bf00      	nop
 800c400:	0800f700 	.word	0x0800f700
 800c404:	0800f6d8 	.word	0x0800f6d8
 800c408:	9907      	ldr	r1, [sp, #28]
 800c40a:	2900      	cmp	r1, #0
 800c40c:	f000 80d0 	beq.w	800c5b0 <_dtoa_r+0x7c8>
 800c410:	9906      	ldr	r1, [sp, #24]
 800c412:	2901      	cmp	r1, #1
 800c414:	f300 80b4 	bgt.w	800c580 <_dtoa_r+0x798>
 800c418:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c41a:	2900      	cmp	r1, #0
 800c41c:	f000 80ac 	beq.w	800c578 <_dtoa_r+0x790>
 800c420:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c424:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c428:	461c      	mov	r4, r3
 800c42a:	930a      	str	r3, [sp, #40]	; 0x28
 800c42c:	9b04      	ldr	r3, [sp, #16]
 800c42e:	4413      	add	r3, r2
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	9b05      	ldr	r3, [sp, #20]
 800c434:	2101      	movs	r1, #1
 800c436:	4413      	add	r3, r2
 800c438:	4630      	mov	r0, r6
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	f001 f930 	bl	800d6a0 <__i2b>
 800c440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c442:	4607      	mov	r7, r0
 800c444:	f1b8 0f00 	cmp.w	r8, #0
 800c448:	dd0d      	ble.n	800c466 <_dtoa_r+0x67e>
 800c44a:	9a05      	ldr	r2, [sp, #20]
 800c44c:	2a00      	cmp	r2, #0
 800c44e:	dd0a      	ble.n	800c466 <_dtoa_r+0x67e>
 800c450:	4542      	cmp	r2, r8
 800c452:	9904      	ldr	r1, [sp, #16]
 800c454:	bfa8      	it	ge
 800c456:	4642      	movge	r2, r8
 800c458:	1a89      	subs	r1, r1, r2
 800c45a:	9104      	str	r1, [sp, #16]
 800c45c:	9905      	ldr	r1, [sp, #20]
 800c45e:	eba8 0802 	sub.w	r8, r8, r2
 800c462:	1a8a      	subs	r2, r1, r2
 800c464:	9205      	str	r2, [sp, #20]
 800c466:	b303      	cbz	r3, 800c4aa <_dtoa_r+0x6c2>
 800c468:	9a07      	ldr	r2, [sp, #28]
 800c46a:	2a00      	cmp	r2, #0
 800c46c:	f000 80a5 	beq.w	800c5ba <_dtoa_r+0x7d2>
 800c470:	2c00      	cmp	r4, #0
 800c472:	dd13      	ble.n	800c49c <_dtoa_r+0x6b4>
 800c474:	4639      	mov	r1, r7
 800c476:	4622      	mov	r2, r4
 800c478:	4630      	mov	r0, r6
 800c47a:	930d      	str	r3, [sp, #52]	; 0x34
 800c47c:	f001 f9d0 	bl	800d820 <__pow5mult>
 800c480:	462a      	mov	r2, r5
 800c482:	4601      	mov	r1, r0
 800c484:	4607      	mov	r7, r0
 800c486:	4630      	mov	r0, r6
 800c488:	f001 f920 	bl	800d6cc <__multiply>
 800c48c:	4629      	mov	r1, r5
 800c48e:	900a      	str	r0, [sp, #40]	; 0x28
 800c490:	4630      	mov	r0, r6
 800c492:	f001 f803 	bl	800d49c <_Bfree>
 800c496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c49a:	4615      	mov	r5, r2
 800c49c:	1b1a      	subs	r2, r3, r4
 800c49e:	d004      	beq.n	800c4aa <_dtoa_r+0x6c2>
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f001 f9bc 	bl	800d820 <__pow5mult>
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f001 f8f7 	bl	800d6a0 <__i2b>
 800c4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	f340 8081 	ble.w	800c5be <_dtoa_r+0x7d6>
 800c4bc:	461a      	mov	r2, r3
 800c4be:	4601      	mov	r1, r0
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f001 f9ad 	bl	800d820 <__pow5mult>
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	dd7a      	ble.n	800c5c4 <_dtoa_r+0x7dc>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d2:	6922      	ldr	r2, [r4, #16]
 800c4d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c4d8:	6910      	ldr	r0, [r2, #16]
 800c4da:	f001 f891 	bl	800d600 <__hi0bits>
 800c4de:	f1c0 0020 	rsb	r0, r0, #32
 800c4e2:	9b05      	ldr	r3, [sp, #20]
 800c4e4:	4418      	add	r0, r3
 800c4e6:	f010 001f 	ands.w	r0, r0, #31
 800c4ea:	f000 808c 	beq.w	800c606 <_dtoa_r+0x81e>
 800c4ee:	f1c0 0220 	rsb	r2, r0, #32
 800c4f2:	2a04      	cmp	r2, #4
 800c4f4:	f340 8085 	ble.w	800c602 <_dtoa_r+0x81a>
 800c4f8:	f1c0 001c 	rsb	r0, r0, #28
 800c4fc:	9b04      	ldr	r3, [sp, #16]
 800c4fe:	4403      	add	r3, r0
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	9b05      	ldr	r3, [sp, #20]
 800c504:	4403      	add	r3, r0
 800c506:	4480      	add	r8, r0
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	9b04      	ldr	r3, [sp, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd05      	ble.n	800c51c <_dtoa_r+0x734>
 800c510:	4629      	mov	r1, r5
 800c512:	461a      	mov	r2, r3
 800c514:	4630      	mov	r0, r6
 800c516:	f001 f9dd 	bl	800d8d4 <__lshift>
 800c51a:	4605      	mov	r5, r0
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	dd05      	ble.n	800c52e <_dtoa_r+0x746>
 800c522:	4621      	mov	r1, r4
 800c524:	461a      	mov	r2, r3
 800c526:	4630      	mov	r0, r6
 800c528:	f001 f9d4 	bl	800d8d4 <__lshift>
 800c52c:	4604      	mov	r4, r0
 800c52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d06a      	beq.n	800c60a <_dtoa_r+0x822>
 800c534:	4621      	mov	r1, r4
 800c536:	4628      	mov	r0, r5
 800c538:	f001 fa3c 	bl	800d9b4 <__mcmp>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	da64      	bge.n	800c60a <_dtoa_r+0x822>
 800c540:	2300      	movs	r3, #0
 800c542:	4629      	mov	r1, r5
 800c544:	220a      	movs	r2, #10
 800c546:	4630      	mov	r0, r6
 800c548:	f000 ffca 	bl	800d4e0 <__multadd>
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c552:	4605      	mov	r5, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8191 	beq.w	800c87c <_dtoa_r+0xa94>
 800c55a:	4639      	mov	r1, r7
 800c55c:	2300      	movs	r3, #0
 800c55e:	220a      	movs	r2, #10
 800c560:	4630      	mov	r0, r6
 800c562:	f000 ffbd 	bl	800d4e0 <__multadd>
 800c566:	f1ba 0f00 	cmp.w	sl, #0
 800c56a:	4607      	mov	r7, r0
 800c56c:	f300 808d 	bgt.w	800c68a <_dtoa_r+0x8a2>
 800c570:	9b06      	ldr	r3, [sp, #24]
 800c572:	2b02      	cmp	r3, #2
 800c574:	dc50      	bgt.n	800c618 <_dtoa_r+0x830>
 800c576:	e088      	b.n	800c68a <_dtoa_r+0x8a2>
 800c578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c57a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c57e:	e751      	b.n	800c424 <_dtoa_r+0x63c>
 800c580:	f109 34ff 	add.w	r4, r9, #4294967295
 800c584:	42a3      	cmp	r3, r4
 800c586:	bfbf      	itttt	lt
 800c588:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c58a:	1ae3      	sublt	r3, r4, r3
 800c58c:	18d2      	addlt	r2, r2, r3
 800c58e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c590:	bfb6      	itet	lt
 800c592:	4623      	movlt	r3, r4
 800c594:	1b1c      	subge	r4, r3, r4
 800c596:	2400      	movlt	r4, #0
 800c598:	f1b9 0f00 	cmp.w	r9, #0
 800c59c:	bfb5      	itete	lt
 800c59e:	9a04      	ldrlt	r2, [sp, #16]
 800c5a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c5a4:	eba2 0809 	sublt.w	r8, r2, r9
 800c5a8:	464a      	movge	r2, r9
 800c5aa:	bfb8      	it	lt
 800c5ac:	2200      	movlt	r2, #0
 800c5ae:	e73c      	b.n	800c42a <_dtoa_r+0x642>
 800c5b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c5b4:	9f07      	ldr	r7, [sp, #28]
 800c5b6:	461c      	mov	r4, r3
 800c5b8:	e744      	b.n	800c444 <_dtoa_r+0x65c>
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	e770      	b.n	800c4a0 <_dtoa_r+0x6b8>
 800c5be:	9b06      	ldr	r3, [sp, #24]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	dc18      	bgt.n	800c5f6 <_dtoa_r+0x80e>
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	b9b3      	cbnz	r3, 800c5f6 <_dtoa_r+0x80e>
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c5ce:	b9a2      	cbnz	r2, 800c5fa <_dtoa_r+0x812>
 800c5d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c5d4:	0d12      	lsrs	r2, r2, #20
 800c5d6:	0512      	lsls	r2, r2, #20
 800c5d8:	b18a      	cbz	r2, 800c5fe <_dtoa_r+0x816>
 800c5da:	9b04      	ldr	r3, [sp, #16]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	9305      	str	r3, [sp, #20]
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f af70 	bne.w	800c4d2 <_dtoa_r+0x6ea>
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	e775      	b.n	800c4e2 <_dtoa_r+0x6fa>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e7f6      	b.n	800c5e8 <_dtoa_r+0x800>
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	e7f4      	b.n	800c5e8 <_dtoa_r+0x800>
 800c5fe:	920a      	str	r2, [sp, #40]	; 0x28
 800c600:	e7f3      	b.n	800c5ea <_dtoa_r+0x802>
 800c602:	d082      	beq.n	800c50a <_dtoa_r+0x722>
 800c604:	4610      	mov	r0, r2
 800c606:	301c      	adds	r0, #28
 800c608:	e778      	b.n	800c4fc <_dtoa_r+0x714>
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	dc37      	bgt.n	800c680 <_dtoa_r+0x898>
 800c610:	9b06      	ldr	r3, [sp, #24]
 800c612:	2b02      	cmp	r3, #2
 800c614:	dd34      	ble.n	800c680 <_dtoa_r+0x898>
 800c616:	46ca      	mov	sl, r9
 800c618:	f1ba 0f00 	cmp.w	sl, #0
 800c61c:	d10d      	bne.n	800c63a <_dtoa_r+0x852>
 800c61e:	4621      	mov	r1, r4
 800c620:	4653      	mov	r3, sl
 800c622:	2205      	movs	r2, #5
 800c624:	4630      	mov	r0, r6
 800c626:	f000 ff5b 	bl	800d4e0 <__multadd>
 800c62a:	4601      	mov	r1, r0
 800c62c:	4604      	mov	r4, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f001 f9c0 	bl	800d9b4 <__mcmp>
 800c634:	2800      	cmp	r0, #0
 800c636:	f73f adeb 	bgt.w	800c210 <_dtoa_r+0x428>
 800c63a:	9b08      	ldr	r3, [sp, #32]
 800c63c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c640:	ea6f 0b03 	mvn.w	fp, r3
 800c644:	f04f 0900 	mov.w	r9, #0
 800c648:	4621      	mov	r1, r4
 800c64a:	4630      	mov	r0, r6
 800c64c:	f000 ff26 	bl	800d49c <_Bfree>
 800c650:	2f00      	cmp	r7, #0
 800c652:	f43f aea8 	beq.w	800c3a6 <_dtoa_r+0x5be>
 800c656:	f1b9 0f00 	cmp.w	r9, #0
 800c65a:	d005      	beq.n	800c668 <_dtoa_r+0x880>
 800c65c:	45b9      	cmp	r9, r7
 800c65e:	d003      	beq.n	800c668 <_dtoa_r+0x880>
 800c660:	4649      	mov	r1, r9
 800c662:	4630      	mov	r0, r6
 800c664:	f000 ff1a 	bl	800d49c <_Bfree>
 800c668:	4639      	mov	r1, r7
 800c66a:	4630      	mov	r0, r6
 800c66c:	f000 ff16 	bl	800d49c <_Bfree>
 800c670:	e699      	b.n	800c3a6 <_dtoa_r+0x5be>
 800c672:	2400      	movs	r4, #0
 800c674:	4627      	mov	r7, r4
 800c676:	e7e0      	b.n	800c63a <_dtoa_r+0x852>
 800c678:	46bb      	mov	fp, r7
 800c67a:	4604      	mov	r4, r0
 800c67c:	4607      	mov	r7, r0
 800c67e:	e5c7      	b.n	800c210 <_dtoa_r+0x428>
 800c680:	9b07      	ldr	r3, [sp, #28]
 800c682:	46ca      	mov	sl, r9
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8100 	beq.w	800c88a <_dtoa_r+0xaa2>
 800c68a:	f1b8 0f00 	cmp.w	r8, #0
 800c68e:	dd05      	ble.n	800c69c <_dtoa_r+0x8b4>
 800c690:	4639      	mov	r1, r7
 800c692:	4642      	mov	r2, r8
 800c694:	4630      	mov	r0, r6
 800c696:	f001 f91d 	bl	800d8d4 <__lshift>
 800c69a:	4607      	mov	r7, r0
 800c69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d05d      	beq.n	800c75e <_dtoa_r+0x976>
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f000 feb9 	bl	800d41c <_Balloc>
 800c6aa:	4680      	mov	r8, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <_dtoa_r+0x8d2>
 800c6ae:	4b82      	ldr	r3, [pc, #520]	; (800c8b8 <_dtoa_r+0xad0>)
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6b6:	f7ff bbaf 	b.w	800be18 <_dtoa_r+0x30>
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	3202      	adds	r2, #2
 800c6be:	0092      	lsls	r2, r2, #2
 800c6c0:	f107 010c 	add.w	r1, r7, #12
 800c6c4:	300c      	adds	r0, #12
 800c6c6:	f7fd fc9f 	bl	800a008 <memcpy>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4641      	mov	r1, r8
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f001 f900 	bl	800d8d4 <__lshift>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	9b01      	ldr	r3, [sp, #4]
 800c6dc:	4453      	add	r3, sl
 800c6de:	9308      	str	r3, [sp, #32]
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	46b9      	mov	r9, r7
 800c6e8:	9307      	str	r3, [sp, #28]
 800c6ea:	4607      	mov	r7, r0
 800c6ec:	9b04      	ldr	r3, [sp, #16]
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	f7ff faeb 	bl	800bcd0 <quorem>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	3330      	adds	r3, #48	; 0x30
 800c6fe:	9005      	str	r0, [sp, #20]
 800c700:	4649      	mov	r1, r9
 800c702:	4628      	mov	r0, r5
 800c704:	9309      	str	r3, [sp, #36]	; 0x24
 800c706:	f001 f955 	bl	800d9b4 <__mcmp>
 800c70a:	463a      	mov	r2, r7
 800c70c:	4682      	mov	sl, r0
 800c70e:	4621      	mov	r1, r4
 800c710:	4630      	mov	r0, r6
 800c712:	f001 f96b 	bl	800d9ec <__mdiff>
 800c716:	68c2      	ldr	r2, [r0, #12]
 800c718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71a:	4680      	mov	r8, r0
 800c71c:	bb0a      	cbnz	r2, 800c762 <_dtoa_r+0x97a>
 800c71e:	4601      	mov	r1, r0
 800c720:	4628      	mov	r0, r5
 800c722:	f001 f947 	bl	800d9b4 <__mcmp>
 800c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c728:	4602      	mov	r2, r0
 800c72a:	4641      	mov	r1, r8
 800c72c:	4630      	mov	r0, r6
 800c72e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c732:	f000 feb3 	bl	800d49c <_Bfree>
 800c736:	9b06      	ldr	r3, [sp, #24]
 800c738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c73a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c73e:	ea43 0102 	orr.w	r1, r3, r2
 800c742:	9b07      	ldr	r3, [sp, #28]
 800c744:	430b      	orrs	r3, r1
 800c746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c748:	d10d      	bne.n	800c766 <_dtoa_r+0x97e>
 800c74a:	2b39      	cmp	r3, #57	; 0x39
 800c74c:	d029      	beq.n	800c7a2 <_dtoa_r+0x9ba>
 800c74e:	f1ba 0f00 	cmp.w	sl, #0
 800c752:	dd01      	ble.n	800c758 <_dtoa_r+0x970>
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	3331      	adds	r3, #49	; 0x31
 800c758:	9a02      	ldr	r2, [sp, #8]
 800c75a:	7013      	strb	r3, [r2, #0]
 800c75c:	e774      	b.n	800c648 <_dtoa_r+0x860>
 800c75e:	4638      	mov	r0, r7
 800c760:	e7b8      	b.n	800c6d4 <_dtoa_r+0x8ec>
 800c762:	2201      	movs	r2, #1
 800c764:	e7e1      	b.n	800c72a <_dtoa_r+0x942>
 800c766:	f1ba 0f00 	cmp.w	sl, #0
 800c76a:	db06      	blt.n	800c77a <_dtoa_r+0x992>
 800c76c:	9906      	ldr	r1, [sp, #24]
 800c76e:	ea41 0a0a 	orr.w	sl, r1, sl
 800c772:	9907      	ldr	r1, [sp, #28]
 800c774:	ea5a 0101 	orrs.w	r1, sl, r1
 800c778:	d120      	bne.n	800c7bc <_dtoa_r+0x9d4>
 800c77a:	2a00      	cmp	r2, #0
 800c77c:	ddec      	ble.n	800c758 <_dtoa_r+0x970>
 800c77e:	4629      	mov	r1, r5
 800c780:	2201      	movs	r2, #1
 800c782:	4630      	mov	r0, r6
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f001 f8a5 	bl	800d8d4 <__lshift>
 800c78a:	4621      	mov	r1, r4
 800c78c:	4605      	mov	r5, r0
 800c78e:	f001 f911 	bl	800d9b4 <__mcmp>
 800c792:	2800      	cmp	r0, #0
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	dc02      	bgt.n	800c79e <_dtoa_r+0x9b6>
 800c798:	d1de      	bne.n	800c758 <_dtoa_r+0x970>
 800c79a:	07da      	lsls	r2, r3, #31
 800c79c:	d5dc      	bpl.n	800c758 <_dtoa_r+0x970>
 800c79e:	2b39      	cmp	r3, #57	; 0x39
 800c7a0:	d1d8      	bne.n	800c754 <_dtoa_r+0x96c>
 800c7a2:	9a02      	ldr	r2, [sp, #8]
 800c7a4:	2339      	movs	r3, #57	; 0x39
 800c7a6:	7013      	strb	r3, [r2, #0]
 800c7a8:	4643      	mov	r3, r8
 800c7aa:	4698      	mov	r8, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c7b2:	2a39      	cmp	r2, #57	; 0x39
 800c7b4:	d051      	beq.n	800c85a <_dtoa_r+0xa72>
 800c7b6:	3201      	adds	r2, #1
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	e745      	b.n	800c648 <_dtoa_r+0x860>
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	dd03      	ble.n	800c7c8 <_dtoa_r+0x9e0>
 800c7c0:	2b39      	cmp	r3, #57	; 0x39
 800c7c2:	d0ee      	beq.n	800c7a2 <_dtoa_r+0x9ba>
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	e7c7      	b.n	800c758 <_dtoa_r+0x970>
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	9908      	ldr	r1, [sp, #32]
 800c7cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	d02b      	beq.n	800c82c <_dtoa_r+0xa44>
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	220a      	movs	r2, #10
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f000 fe80 	bl	800d4e0 <__multadd>
 800c7e0:	45b9      	cmp	r9, r7
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	f04f 0300 	mov.w	r3, #0
 800c7e8:	f04f 020a 	mov.w	r2, #10
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	d107      	bne.n	800c802 <_dtoa_r+0xa1a>
 800c7f2:	f000 fe75 	bl	800d4e0 <__multadd>
 800c7f6:	4681      	mov	r9, r0
 800c7f8:	4607      	mov	r7, r0
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	e774      	b.n	800c6ec <_dtoa_r+0x904>
 800c802:	f000 fe6d 	bl	800d4e0 <__multadd>
 800c806:	4639      	mov	r1, r7
 800c808:	4681      	mov	r9, r0
 800c80a:	2300      	movs	r3, #0
 800c80c:	220a      	movs	r2, #10
 800c80e:	4630      	mov	r0, r6
 800c810:	f000 fe66 	bl	800d4e0 <__multadd>
 800c814:	4607      	mov	r7, r0
 800c816:	e7f0      	b.n	800c7fa <_dtoa_r+0xa12>
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	9a01      	ldr	r2, [sp, #4]
 800c81e:	bfcc      	ite	gt
 800c820:	46d0      	movgt	r8, sl
 800c822:	f04f 0801 	movle.w	r8, #1
 800c826:	4490      	add	r8, r2
 800c828:	f04f 0900 	mov.w	r9, #0
 800c82c:	4629      	mov	r1, r5
 800c82e:	2201      	movs	r2, #1
 800c830:	4630      	mov	r0, r6
 800c832:	9302      	str	r3, [sp, #8]
 800c834:	f001 f84e 	bl	800d8d4 <__lshift>
 800c838:	4621      	mov	r1, r4
 800c83a:	4605      	mov	r5, r0
 800c83c:	f001 f8ba 	bl	800d9b4 <__mcmp>
 800c840:	2800      	cmp	r0, #0
 800c842:	dcb1      	bgt.n	800c7a8 <_dtoa_r+0x9c0>
 800c844:	d102      	bne.n	800c84c <_dtoa_r+0xa64>
 800c846:	9b02      	ldr	r3, [sp, #8]
 800c848:	07db      	lsls	r3, r3, #31
 800c84a:	d4ad      	bmi.n	800c7a8 <_dtoa_r+0x9c0>
 800c84c:	4643      	mov	r3, r8
 800c84e:	4698      	mov	r8, r3
 800c850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c854:	2a30      	cmp	r2, #48	; 0x30
 800c856:	d0fa      	beq.n	800c84e <_dtoa_r+0xa66>
 800c858:	e6f6      	b.n	800c648 <_dtoa_r+0x860>
 800c85a:	9a01      	ldr	r2, [sp, #4]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d1a4      	bne.n	800c7aa <_dtoa_r+0x9c2>
 800c860:	f10b 0b01 	add.w	fp, fp, #1
 800c864:	2331      	movs	r3, #49	; 0x31
 800c866:	e778      	b.n	800c75a <_dtoa_r+0x972>
 800c868:	4b14      	ldr	r3, [pc, #80]	; (800c8bc <_dtoa_r+0xad4>)
 800c86a:	f7ff bb27 	b.w	800bebc <_dtoa_r+0xd4>
 800c86e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c870:	2b00      	cmp	r3, #0
 800c872:	f47f ab03 	bne.w	800be7c <_dtoa_r+0x94>
 800c876:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <_dtoa_r+0xad8>)
 800c878:	f7ff bb20 	b.w	800bebc <_dtoa_r+0xd4>
 800c87c:	f1ba 0f00 	cmp.w	sl, #0
 800c880:	dc03      	bgt.n	800c88a <_dtoa_r+0xaa2>
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	2b02      	cmp	r3, #2
 800c886:	f73f aec7 	bgt.w	800c618 <_dtoa_r+0x830>
 800c88a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f7ff fa1d 	bl	800bcd0 <quorem>
 800c896:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c89a:	f808 3b01 	strb.w	r3, [r8], #1
 800c89e:	9a01      	ldr	r2, [sp, #4]
 800c8a0:	eba8 0202 	sub.w	r2, r8, r2
 800c8a4:	4592      	cmp	sl, r2
 800c8a6:	ddb7      	ble.n	800c818 <_dtoa_r+0xa30>
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f000 fe16 	bl	800d4e0 <__multadd>
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	e7ea      	b.n	800c88e <_dtoa_r+0xaa6>
 800c8b8:	0800f588 	.word	0x0800f588
 800c8bc:	0800f38c 	.word	0x0800f38c
 800c8c0:	0800f509 	.word	0x0800f509

0800c8c4 <__sflush_r>:
 800c8c4:	898a      	ldrh	r2, [r1, #12]
 800c8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	0710      	lsls	r0, r2, #28
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	d458      	bmi.n	800c984 <__sflush_r+0xc0>
 800c8d2:	684b      	ldr	r3, [r1, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	dc05      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dc02      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	d0f9      	beq.n	800c8de <__sflush_r+0x1a>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8f0:	682f      	ldr	r7, [r5, #0]
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	d032      	beq.n	800c95c <__sflush_r+0x98>
 800c8f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	075a      	lsls	r2, r3, #29
 800c8fc:	d505      	bpl.n	800c90a <__sflush_r+0x46>
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	1ac0      	subs	r0, r0, r3
 800c902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c904:	b10b      	cbz	r3, 800c90a <__sflush_r+0x46>
 800c906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c908:	1ac0      	subs	r0, r0, r3
 800c90a:	2300      	movs	r3, #0
 800c90c:	4602      	mov	r2, r0
 800c90e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c910:	6a21      	ldr	r1, [r4, #32]
 800c912:	4628      	mov	r0, r5
 800c914:	47b0      	blx	r6
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	d106      	bne.n	800c92a <__sflush_r+0x66>
 800c91c:	6829      	ldr	r1, [r5, #0]
 800c91e:	291d      	cmp	r1, #29
 800c920:	d82c      	bhi.n	800c97c <__sflush_r+0xb8>
 800c922:	4a2a      	ldr	r2, [pc, #168]	; (800c9cc <__sflush_r+0x108>)
 800c924:	40ca      	lsrs	r2, r1
 800c926:	07d6      	lsls	r6, r2, #31
 800c928:	d528      	bpl.n	800c97c <__sflush_r+0xb8>
 800c92a:	2200      	movs	r2, #0
 800c92c:	6062      	str	r2, [r4, #4]
 800c92e:	04d9      	lsls	r1, r3, #19
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	6022      	str	r2, [r4, #0]
 800c934:	d504      	bpl.n	800c940 <__sflush_r+0x7c>
 800c936:	1c42      	adds	r2, r0, #1
 800c938:	d101      	bne.n	800c93e <__sflush_r+0x7a>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	b903      	cbnz	r3, 800c940 <__sflush_r+0x7c>
 800c93e:	6560      	str	r0, [r4, #84]	; 0x54
 800c940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c942:	602f      	str	r7, [r5, #0]
 800c944:	2900      	cmp	r1, #0
 800c946:	d0ca      	beq.n	800c8de <__sflush_r+0x1a>
 800c948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d002      	beq.n	800c956 <__sflush_r+0x92>
 800c950:	4628      	mov	r0, r5
 800c952:	f001 fa37 	bl	800ddc4 <_free_r>
 800c956:	2000      	movs	r0, #0
 800c958:	6360      	str	r0, [r4, #52]	; 0x34
 800c95a:	e7c1      	b.n	800c8e0 <__sflush_r+0x1c>
 800c95c:	6a21      	ldr	r1, [r4, #32]
 800c95e:	2301      	movs	r3, #1
 800c960:	4628      	mov	r0, r5
 800c962:	47b0      	blx	r6
 800c964:	1c41      	adds	r1, r0, #1
 800c966:	d1c7      	bne.n	800c8f8 <__sflush_r+0x34>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0c4      	beq.n	800c8f8 <__sflush_r+0x34>
 800c96e:	2b1d      	cmp	r3, #29
 800c970:	d001      	beq.n	800c976 <__sflush_r+0xb2>
 800c972:	2b16      	cmp	r3, #22
 800c974:	d101      	bne.n	800c97a <__sflush_r+0xb6>
 800c976:	602f      	str	r7, [r5, #0]
 800c978:	e7b1      	b.n	800c8de <__sflush_r+0x1a>
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	e7ad      	b.n	800c8e0 <__sflush_r+0x1c>
 800c984:	690f      	ldr	r7, [r1, #16]
 800c986:	2f00      	cmp	r7, #0
 800c988:	d0a9      	beq.n	800c8de <__sflush_r+0x1a>
 800c98a:	0793      	lsls	r3, r2, #30
 800c98c:	680e      	ldr	r6, [r1, #0]
 800c98e:	bf08      	it	eq
 800c990:	694b      	ldreq	r3, [r1, #20]
 800c992:	600f      	str	r7, [r1, #0]
 800c994:	bf18      	it	ne
 800c996:	2300      	movne	r3, #0
 800c998:	eba6 0807 	sub.w	r8, r6, r7
 800c99c:	608b      	str	r3, [r1, #8]
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	dd9c      	ble.n	800c8de <__sflush_r+0x1a>
 800c9a4:	6a21      	ldr	r1, [r4, #32]
 800c9a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9a8:	4643      	mov	r3, r8
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b0      	blx	r6
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	dc06      	bgt.n	800c9c2 <__sflush_r+0xfe>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	e78e      	b.n	800c8e0 <__sflush_r+0x1c>
 800c9c2:	4407      	add	r7, r0
 800c9c4:	eba8 0800 	sub.w	r8, r8, r0
 800c9c8:	e7e9      	b.n	800c99e <__sflush_r+0xda>
 800c9ca:	bf00      	nop
 800c9cc:	20400001 	.word	0x20400001

0800c9d0 <_fflush_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	690b      	ldr	r3, [r1, #16]
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	b913      	cbnz	r3, 800c9e0 <_fflush_r+0x10>
 800c9da:	2500      	movs	r5, #0
 800c9dc:	4628      	mov	r0, r5
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	b118      	cbz	r0, 800c9ea <_fflush_r+0x1a>
 800c9e2:	6983      	ldr	r3, [r0, #24]
 800c9e4:	b90b      	cbnz	r3, 800c9ea <_fflush_r+0x1a>
 800c9e6:	f000 f887 	bl	800caf8 <__sinit>
 800c9ea:	4b14      	ldr	r3, [pc, #80]	; (800ca3c <_fflush_r+0x6c>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	d11b      	bne.n	800ca28 <_fflush_r+0x58>
 800c9f0:	686c      	ldr	r4, [r5, #4]
 800c9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0ef      	beq.n	800c9da <_fflush_r+0xa>
 800c9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9fc:	07d0      	lsls	r0, r2, #31
 800c9fe:	d404      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca00:	0599      	lsls	r1, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca06:	f000 fc88 	bl	800d31a <__retarget_lock_acquire_recursive>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7ff ff59 	bl	800c8c4 <__sflush_r>
 800ca12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca14:	07da      	lsls	r2, r3, #31
 800ca16:	4605      	mov	r5, r0
 800ca18:	d4e0      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	059b      	lsls	r3, r3, #22
 800ca1e:	d4dd      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca22:	f000 fc7b 	bl	800d31c <__retarget_lock_release_recursive>
 800ca26:	e7d9      	b.n	800c9dc <_fflush_r+0xc>
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <_fflush_r+0x70>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d101      	bne.n	800ca32 <_fflush_r+0x62>
 800ca2e:	68ac      	ldr	r4, [r5, #8]
 800ca30:	e7df      	b.n	800c9f2 <_fflush_r+0x22>
 800ca32:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <_fflush_r+0x74>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	bf08      	it	eq
 800ca38:	68ec      	ldreq	r4, [r5, #12]
 800ca3a:	e7da      	b.n	800c9f2 <_fflush_r+0x22>
 800ca3c:	0800f5bc 	.word	0x0800f5bc
 800ca40:	0800f5dc 	.word	0x0800f5dc
 800ca44:	0800f59c 	.word	0x0800f59c

0800ca48 <std>:
 800ca48:	2300      	movs	r3, #0
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca56:	6083      	str	r3, [r0, #8]
 800ca58:	8181      	strh	r1, [r0, #12]
 800ca5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca5c:	81c2      	strh	r2, [r0, #14]
 800ca5e:	6183      	str	r3, [r0, #24]
 800ca60:	4619      	mov	r1, r3
 800ca62:	2208      	movs	r2, #8
 800ca64:	305c      	adds	r0, #92	; 0x5c
 800ca66:	f7fd fadd 	bl	800a024 <memset>
 800ca6a:	4b05      	ldr	r3, [pc, #20]	; (800ca80 <std+0x38>)
 800ca6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <std+0x3c>)
 800ca70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <std+0x40>)
 800ca74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca76:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <std+0x44>)
 800ca78:	6224      	str	r4, [r4, #32]
 800ca7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800e521 	.word	0x0800e521
 800ca84:	0800e543 	.word	0x0800e543
 800ca88:	0800e57b 	.word	0x0800e57b
 800ca8c:	0800e59f 	.word	0x0800e59f

0800ca90 <_cleanup_r>:
 800ca90:	4901      	ldr	r1, [pc, #4]	; (800ca98 <_cleanup_r+0x8>)
 800ca92:	f000 b8af 	b.w	800cbf4 <_fwalk_reent>
 800ca96:	bf00      	nop
 800ca98:	0800c9d1 	.word	0x0800c9d1

0800ca9c <__sfmoreglue>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	2268      	movs	r2, #104	; 0x68
 800caa0:	1e4d      	subs	r5, r1, #1
 800caa2:	4355      	muls	r5, r2
 800caa4:	460e      	mov	r6, r1
 800caa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caaa:	f001 f9f7 	bl	800de9c <_malloc_r>
 800caae:	4604      	mov	r4, r0
 800cab0:	b140      	cbz	r0, 800cac4 <__sfmoreglue+0x28>
 800cab2:	2100      	movs	r1, #0
 800cab4:	e9c0 1600 	strd	r1, r6, [r0]
 800cab8:	300c      	adds	r0, #12
 800caba:	60a0      	str	r0, [r4, #8]
 800cabc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cac0:	f7fd fab0 	bl	800a024 <memset>
 800cac4:	4620      	mov	r0, r4
 800cac6:	bd70      	pop	{r4, r5, r6, pc}

0800cac8 <__sfp_lock_acquire>:
 800cac8:	4801      	ldr	r0, [pc, #4]	; (800cad0 <__sfp_lock_acquire+0x8>)
 800caca:	f000 bc26 	b.w	800d31a <__retarget_lock_acquire_recursive>
 800cace:	bf00      	nop
 800cad0:	24000685 	.word	0x24000685

0800cad4 <__sfp_lock_release>:
 800cad4:	4801      	ldr	r0, [pc, #4]	; (800cadc <__sfp_lock_release+0x8>)
 800cad6:	f000 bc21 	b.w	800d31c <__retarget_lock_release_recursive>
 800cada:	bf00      	nop
 800cadc:	24000685 	.word	0x24000685

0800cae0 <__sinit_lock_acquire>:
 800cae0:	4801      	ldr	r0, [pc, #4]	; (800cae8 <__sinit_lock_acquire+0x8>)
 800cae2:	f000 bc1a 	b.w	800d31a <__retarget_lock_acquire_recursive>
 800cae6:	bf00      	nop
 800cae8:	24000686 	.word	0x24000686

0800caec <__sinit_lock_release>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__sinit_lock_release+0x8>)
 800caee:	f000 bc15 	b.w	800d31c <__retarget_lock_release_recursive>
 800caf2:	bf00      	nop
 800caf4:	24000686 	.word	0x24000686

0800caf8 <__sinit>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4604      	mov	r4, r0
 800cafc:	f7ff fff0 	bl	800cae0 <__sinit_lock_acquire>
 800cb00:	69a3      	ldr	r3, [r4, #24]
 800cb02:	b11b      	cbz	r3, 800cb0c <__sinit+0x14>
 800cb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb08:	f7ff bff0 	b.w	800caec <__sinit_lock_release>
 800cb0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb10:	6523      	str	r3, [r4, #80]	; 0x50
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <__sinit+0x68>)
 800cb14:	4a13      	ldr	r2, [pc, #76]	; (800cb64 <__sinit+0x6c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	bf04      	itt	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	61a3      	streq	r3, [r4, #24]
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f820 	bl	800cb68 <__sfp>
 800cb28:	6060      	str	r0, [r4, #4]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 f81c 	bl	800cb68 <__sfp>
 800cb30:	60a0      	str	r0, [r4, #8]
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f818 	bl	800cb68 <__sfp>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	60e0      	str	r0, [r4, #12]
 800cb3c:	2104      	movs	r1, #4
 800cb3e:	6860      	ldr	r0, [r4, #4]
 800cb40:	f7ff ff82 	bl	800ca48 <std>
 800cb44:	68a0      	ldr	r0, [r4, #8]
 800cb46:	2201      	movs	r2, #1
 800cb48:	2109      	movs	r1, #9
 800cb4a:	f7ff ff7d 	bl	800ca48 <std>
 800cb4e:	68e0      	ldr	r0, [r4, #12]
 800cb50:	2202      	movs	r2, #2
 800cb52:	2112      	movs	r1, #18
 800cb54:	f7ff ff78 	bl	800ca48 <std>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61a3      	str	r3, [r4, #24]
 800cb5c:	e7d2      	b.n	800cb04 <__sinit+0xc>
 800cb5e:	bf00      	nop
 800cb60:	0800f378 	.word	0x0800f378
 800cb64:	0800ca91 	.word	0x0800ca91

0800cb68 <__sfp>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	f7ff ffac 	bl	800cac8 <__sfp_lock_acquire>
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <__sfp+0x84>)
 800cb72:	681e      	ldr	r6, [r3, #0]
 800cb74:	69b3      	ldr	r3, [r6, #24]
 800cb76:	b913      	cbnz	r3, 800cb7e <__sfp+0x16>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff ffbd 	bl	800caf8 <__sinit>
 800cb7e:	3648      	adds	r6, #72	; 0x48
 800cb80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	d503      	bpl.n	800cb90 <__sfp+0x28>
 800cb88:	6833      	ldr	r3, [r6, #0]
 800cb8a:	b30b      	cbz	r3, 800cbd0 <__sfp+0x68>
 800cb8c:	6836      	ldr	r6, [r6, #0]
 800cb8e:	e7f7      	b.n	800cb80 <__sfp+0x18>
 800cb90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb94:	b9d5      	cbnz	r5, 800cbcc <__sfp+0x64>
 800cb96:	4b16      	ldr	r3, [pc, #88]	; (800cbf0 <__sfp+0x88>)
 800cb98:	60e3      	str	r3, [r4, #12]
 800cb9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cba0:	f000 fbba 	bl	800d318 <__retarget_lock_init_recursive>
 800cba4:	f7ff ff96 	bl	800cad4 <__sfp_lock_release>
 800cba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbb0:	6025      	str	r5, [r4, #0]
 800cbb2:	61a5      	str	r5, [r4, #24]
 800cbb4:	2208      	movs	r2, #8
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbbc:	f7fd fa32 	bl	800a024 <memset>
 800cbc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbc8:	4620      	mov	r0, r4
 800cbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbcc:	3468      	adds	r4, #104	; 0x68
 800cbce:	e7d9      	b.n	800cb84 <__sfp+0x1c>
 800cbd0:	2104      	movs	r1, #4
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7ff ff62 	bl	800ca9c <__sfmoreglue>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	6030      	str	r0, [r6, #0]
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1d5      	bne.n	800cb8c <__sfp+0x24>
 800cbe0:	f7ff ff78 	bl	800cad4 <__sfp_lock_release>
 800cbe4:	230c      	movs	r3, #12
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	e7ee      	b.n	800cbc8 <__sfp+0x60>
 800cbea:	bf00      	nop
 800cbec:	0800f378 	.word	0x0800f378
 800cbf0:	ffff0001 	.word	0xffff0001

0800cbf4 <_fwalk_reent>:
 800cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	4688      	mov	r8, r1
 800cbfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc00:	2700      	movs	r7, #0
 800cc02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc06:	f1b9 0901 	subs.w	r9, r9, #1
 800cc0a:	d505      	bpl.n	800cc18 <_fwalk_reent+0x24>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	d1f7      	bne.n	800cc02 <_fwalk_reent+0xe>
 800cc12:	4638      	mov	r0, r7
 800cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc18:	89ab      	ldrh	r3, [r5, #12]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d907      	bls.n	800cc2e <_fwalk_reent+0x3a>
 800cc1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc22:	3301      	adds	r3, #1
 800cc24:	d003      	beq.n	800cc2e <_fwalk_reent+0x3a>
 800cc26:	4629      	mov	r1, r5
 800cc28:	4630      	mov	r0, r6
 800cc2a:	47c0      	blx	r8
 800cc2c:	4307      	orrs	r7, r0
 800cc2e:	3568      	adds	r5, #104	; 0x68
 800cc30:	e7e9      	b.n	800cc06 <_fwalk_reent+0x12>

0800cc32 <rshift>:
 800cc32:	6903      	ldr	r3, [r0, #16]
 800cc34:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc40:	f100 0414 	add.w	r4, r0, #20
 800cc44:	dd45      	ble.n	800ccd2 <rshift+0xa0>
 800cc46:	f011 011f 	ands.w	r1, r1, #31
 800cc4a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc4e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc52:	d10c      	bne.n	800cc6e <rshift+0x3c>
 800cc54:	f100 0710 	add.w	r7, r0, #16
 800cc58:	4629      	mov	r1, r5
 800cc5a:	42b1      	cmp	r1, r6
 800cc5c:	d334      	bcc.n	800ccc8 <rshift+0x96>
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	1eea      	subs	r2, r5, #3
 800cc64:	4296      	cmp	r6, r2
 800cc66:	bf38      	it	cc
 800cc68:	2300      	movcc	r3, #0
 800cc6a:	4423      	add	r3, r4
 800cc6c:	e015      	b.n	800cc9a <rshift+0x68>
 800cc6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc72:	f1c1 0820 	rsb	r8, r1, #32
 800cc76:	40cf      	lsrs	r7, r1
 800cc78:	f105 0e04 	add.w	lr, r5, #4
 800cc7c:	46a1      	mov	r9, r4
 800cc7e:	4576      	cmp	r6, lr
 800cc80:	46f4      	mov	ip, lr
 800cc82:	d815      	bhi.n	800ccb0 <rshift+0x7e>
 800cc84:	1a9a      	subs	r2, r3, r2
 800cc86:	0092      	lsls	r2, r2, #2
 800cc88:	3a04      	subs	r2, #4
 800cc8a:	3501      	adds	r5, #1
 800cc8c:	42ae      	cmp	r6, r5
 800cc8e:	bf38      	it	cc
 800cc90:	2200      	movcc	r2, #0
 800cc92:	18a3      	adds	r3, r4, r2
 800cc94:	50a7      	str	r7, [r4, r2]
 800cc96:	b107      	cbz	r7, 800cc9a <rshift+0x68>
 800cc98:	3304      	adds	r3, #4
 800cc9a:	1b1a      	subs	r2, r3, r4
 800cc9c:	42a3      	cmp	r3, r4
 800cc9e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cca2:	bf08      	it	eq
 800cca4:	2300      	moveq	r3, #0
 800cca6:	6102      	str	r2, [r0, #16]
 800cca8:	bf08      	it	eq
 800ccaa:	6143      	streq	r3, [r0, #20]
 800ccac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb0:	f8dc c000 	ldr.w	ip, [ip]
 800ccb4:	fa0c fc08 	lsl.w	ip, ip, r8
 800ccb8:	ea4c 0707 	orr.w	r7, ip, r7
 800ccbc:	f849 7b04 	str.w	r7, [r9], #4
 800ccc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccc4:	40cf      	lsrs	r7, r1
 800ccc6:	e7da      	b.n	800cc7e <rshift+0x4c>
 800ccc8:	f851 cb04 	ldr.w	ip, [r1], #4
 800cccc:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccd0:	e7c3      	b.n	800cc5a <rshift+0x28>
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	e7e1      	b.n	800cc9a <rshift+0x68>

0800ccd6 <__hexdig_fun>:
 800ccd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ccda:	2b09      	cmp	r3, #9
 800ccdc:	d802      	bhi.n	800cce4 <__hexdig_fun+0xe>
 800ccde:	3820      	subs	r0, #32
 800cce0:	b2c0      	uxtb	r0, r0
 800cce2:	4770      	bx	lr
 800cce4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cce8:	2b05      	cmp	r3, #5
 800ccea:	d801      	bhi.n	800ccf0 <__hexdig_fun+0x1a>
 800ccec:	3847      	subs	r0, #71	; 0x47
 800ccee:	e7f7      	b.n	800cce0 <__hexdig_fun+0xa>
 800ccf0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ccf4:	2b05      	cmp	r3, #5
 800ccf6:	d801      	bhi.n	800ccfc <__hexdig_fun+0x26>
 800ccf8:	3827      	subs	r0, #39	; 0x27
 800ccfa:	e7f1      	b.n	800cce0 <__hexdig_fun+0xa>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	4770      	bx	lr

0800cd00 <__gethex>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	ed2d 8b02 	vpush	{d8}
 800cd08:	b089      	sub	sp, #36	; 0x24
 800cd0a:	ee08 0a10 	vmov	s16, r0
 800cd0e:	9304      	str	r3, [sp, #16]
 800cd10:	4bb4      	ldr	r3, [pc, #720]	; (800cfe4 <__gethex+0x2e4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	4618      	mov	r0, r3
 800cd18:	468b      	mov	fp, r1
 800cd1a:	4690      	mov	r8, r2
 800cd1c:	f7f3 fae0 	bl	80002e0 <strlen>
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	f8db 2000 	ldr.w	r2, [fp]
 800cd26:	4403      	add	r3, r0
 800cd28:	4682      	mov	sl, r0
 800cd2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	1c93      	adds	r3, r2, #2
 800cd32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd3a:	32fe      	adds	r2, #254	; 0xfe
 800cd3c:	18d1      	adds	r1, r2, r3
 800cd3e:	461f      	mov	r7, r3
 800cd40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd44:	9100      	str	r1, [sp, #0]
 800cd46:	2830      	cmp	r0, #48	; 0x30
 800cd48:	d0f8      	beq.n	800cd3c <__gethex+0x3c>
 800cd4a:	f7ff ffc4 	bl	800ccd6 <__hexdig_fun>
 800cd4e:	4604      	mov	r4, r0
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d13a      	bne.n	800cdca <__gethex+0xca>
 800cd54:	9901      	ldr	r1, [sp, #4]
 800cd56:	4652      	mov	r2, sl
 800cd58:	4638      	mov	r0, r7
 800cd5a:	f001 fc24 	bl	800e5a6 <strncmp>
 800cd5e:	4605      	mov	r5, r0
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d168      	bne.n	800ce36 <__gethex+0x136>
 800cd64:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cd68:	eb07 060a 	add.w	r6, r7, sl
 800cd6c:	f7ff ffb3 	bl	800ccd6 <__hexdig_fun>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d062      	beq.n	800ce3a <__gethex+0x13a>
 800cd74:	4633      	mov	r3, r6
 800cd76:	7818      	ldrb	r0, [r3, #0]
 800cd78:	2830      	cmp	r0, #48	; 0x30
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	f103 0301 	add.w	r3, r3, #1
 800cd80:	d0f9      	beq.n	800cd76 <__gethex+0x76>
 800cd82:	f7ff ffa8 	bl	800ccd6 <__hexdig_fun>
 800cd86:	2301      	movs	r3, #1
 800cd88:	fab0 f480 	clz	r4, r0
 800cd8c:	0964      	lsrs	r4, r4, #5
 800cd8e:	4635      	mov	r5, r6
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	463a      	mov	r2, r7
 800cd94:	4616      	mov	r6, r2
 800cd96:	3201      	adds	r2, #1
 800cd98:	7830      	ldrb	r0, [r6, #0]
 800cd9a:	f7ff ff9c 	bl	800ccd6 <__hexdig_fun>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d1f8      	bne.n	800cd94 <__gethex+0x94>
 800cda2:	9901      	ldr	r1, [sp, #4]
 800cda4:	4652      	mov	r2, sl
 800cda6:	4630      	mov	r0, r6
 800cda8:	f001 fbfd 	bl	800e5a6 <strncmp>
 800cdac:	b980      	cbnz	r0, 800cdd0 <__gethex+0xd0>
 800cdae:	b94d      	cbnz	r5, 800cdc4 <__gethex+0xc4>
 800cdb0:	eb06 050a 	add.w	r5, r6, sl
 800cdb4:	462a      	mov	r2, r5
 800cdb6:	4616      	mov	r6, r2
 800cdb8:	3201      	adds	r2, #1
 800cdba:	7830      	ldrb	r0, [r6, #0]
 800cdbc:	f7ff ff8b 	bl	800ccd6 <__hexdig_fun>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d1f8      	bne.n	800cdb6 <__gethex+0xb6>
 800cdc4:	1bad      	subs	r5, r5, r6
 800cdc6:	00ad      	lsls	r5, r5, #2
 800cdc8:	e004      	b.n	800cdd4 <__gethex+0xd4>
 800cdca:	2400      	movs	r4, #0
 800cdcc:	4625      	mov	r5, r4
 800cdce:	e7e0      	b.n	800cd92 <__gethex+0x92>
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	d1f7      	bne.n	800cdc4 <__gethex+0xc4>
 800cdd4:	7833      	ldrb	r3, [r6, #0]
 800cdd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cdda:	2b50      	cmp	r3, #80	; 0x50
 800cddc:	d13b      	bne.n	800ce56 <__gethex+0x156>
 800cdde:	7873      	ldrb	r3, [r6, #1]
 800cde0:	2b2b      	cmp	r3, #43	; 0x2b
 800cde2:	d02c      	beq.n	800ce3e <__gethex+0x13e>
 800cde4:	2b2d      	cmp	r3, #45	; 0x2d
 800cde6:	d02e      	beq.n	800ce46 <__gethex+0x146>
 800cde8:	1c71      	adds	r1, r6, #1
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	7808      	ldrb	r0, [r1, #0]
 800cdf0:	f7ff ff71 	bl	800ccd6 <__hexdig_fun>
 800cdf4:	1e43      	subs	r3, r0, #1
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b18      	cmp	r3, #24
 800cdfa:	d82c      	bhi.n	800ce56 <__gethex+0x156>
 800cdfc:	f1a0 0210 	sub.w	r2, r0, #16
 800ce00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce04:	f7ff ff67 	bl	800ccd6 <__hexdig_fun>
 800ce08:	1e43      	subs	r3, r0, #1
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b18      	cmp	r3, #24
 800ce0e:	d91d      	bls.n	800ce4c <__gethex+0x14c>
 800ce10:	f1b9 0f00 	cmp.w	r9, #0
 800ce14:	d000      	beq.n	800ce18 <__gethex+0x118>
 800ce16:	4252      	negs	r2, r2
 800ce18:	4415      	add	r5, r2
 800ce1a:	f8cb 1000 	str.w	r1, [fp]
 800ce1e:	b1e4      	cbz	r4, 800ce5a <__gethex+0x15a>
 800ce20:	9b00      	ldr	r3, [sp, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bf14      	ite	ne
 800ce26:	2700      	movne	r7, #0
 800ce28:	2706      	moveq	r7, #6
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	b009      	add	sp, #36	; 0x24
 800ce2e:	ecbd 8b02 	vpop	{d8}
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	463e      	mov	r6, r7
 800ce38:	4625      	mov	r5, r4
 800ce3a:	2401      	movs	r4, #1
 800ce3c:	e7ca      	b.n	800cdd4 <__gethex+0xd4>
 800ce3e:	f04f 0900 	mov.w	r9, #0
 800ce42:	1cb1      	adds	r1, r6, #2
 800ce44:	e7d3      	b.n	800cdee <__gethex+0xee>
 800ce46:	f04f 0901 	mov.w	r9, #1
 800ce4a:	e7fa      	b.n	800ce42 <__gethex+0x142>
 800ce4c:	230a      	movs	r3, #10
 800ce4e:	fb03 0202 	mla	r2, r3, r2, r0
 800ce52:	3a10      	subs	r2, #16
 800ce54:	e7d4      	b.n	800ce00 <__gethex+0x100>
 800ce56:	4631      	mov	r1, r6
 800ce58:	e7df      	b.n	800ce1a <__gethex+0x11a>
 800ce5a:	1bf3      	subs	r3, r6, r7
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	4621      	mov	r1, r4
 800ce60:	2b07      	cmp	r3, #7
 800ce62:	dc0b      	bgt.n	800ce7c <__gethex+0x17c>
 800ce64:	ee18 0a10 	vmov	r0, s16
 800ce68:	f000 fad8 	bl	800d41c <_Balloc>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	b940      	cbnz	r0, 800ce82 <__gethex+0x182>
 800ce70:	4b5d      	ldr	r3, [pc, #372]	; (800cfe8 <__gethex+0x2e8>)
 800ce72:	4602      	mov	r2, r0
 800ce74:	21de      	movs	r1, #222	; 0xde
 800ce76:	485d      	ldr	r0, [pc, #372]	; (800cfec <__gethex+0x2ec>)
 800ce78:	f001 fbc8 	bl	800e60c <__assert_func>
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	105b      	asrs	r3, r3, #1
 800ce80:	e7ee      	b.n	800ce60 <__gethex+0x160>
 800ce82:	f100 0914 	add.w	r9, r0, #20
 800ce86:	f04f 0b00 	mov.w	fp, #0
 800ce8a:	f1ca 0301 	rsb	r3, sl, #1
 800ce8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce92:	f8cd b000 	str.w	fp, [sp]
 800ce96:	9306      	str	r3, [sp, #24]
 800ce98:	42b7      	cmp	r7, r6
 800ce9a:	d340      	bcc.n	800cf1e <__gethex+0x21e>
 800ce9c:	9802      	ldr	r0, [sp, #8]
 800ce9e:	9b00      	ldr	r3, [sp, #0]
 800cea0:	f840 3b04 	str.w	r3, [r0], #4
 800cea4:	eba0 0009 	sub.w	r0, r0, r9
 800cea8:	1080      	asrs	r0, r0, #2
 800ceaa:	0146      	lsls	r6, r0, #5
 800ceac:	6120      	str	r0, [r4, #16]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fba6 	bl	800d600 <__hi0bits>
 800ceb4:	1a30      	subs	r0, r6, r0
 800ceb6:	f8d8 6000 	ldr.w	r6, [r8]
 800ceba:	42b0      	cmp	r0, r6
 800cebc:	dd63      	ble.n	800cf86 <__gethex+0x286>
 800cebe:	1b87      	subs	r7, r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 ff47 	bl	800dd56 <__any_on>
 800cec8:	4682      	mov	sl, r0
 800ceca:	b1a8      	cbz	r0, 800cef8 <__gethex+0x1f8>
 800cecc:	1e7b      	subs	r3, r7, #1
 800cece:	1159      	asrs	r1, r3, #5
 800ced0:	f003 021f 	and.w	r2, r3, #31
 800ced4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ced8:	f04f 0a01 	mov.w	sl, #1
 800cedc:	fa0a f202 	lsl.w	r2, sl, r2
 800cee0:	420a      	tst	r2, r1
 800cee2:	d009      	beq.n	800cef8 <__gethex+0x1f8>
 800cee4:	4553      	cmp	r3, sl
 800cee6:	dd05      	ble.n	800cef4 <__gethex+0x1f4>
 800cee8:	1eb9      	subs	r1, r7, #2
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 ff33 	bl	800dd56 <__any_on>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d145      	bne.n	800cf80 <__gethex+0x280>
 800cef4:	f04f 0a02 	mov.w	sl, #2
 800cef8:	4639      	mov	r1, r7
 800cefa:	4620      	mov	r0, r4
 800cefc:	f7ff fe99 	bl	800cc32 <rshift>
 800cf00:	443d      	add	r5, r7
 800cf02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf06:	42ab      	cmp	r3, r5
 800cf08:	da4c      	bge.n	800cfa4 <__gethex+0x2a4>
 800cf0a:	ee18 0a10 	vmov	r0, s16
 800cf0e:	4621      	mov	r1, r4
 800cf10:	f000 fac4 	bl	800d49c <_Bfree>
 800cf14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf16:	2300      	movs	r3, #0
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	27a3      	movs	r7, #163	; 0xa3
 800cf1c:	e785      	b.n	800ce2a <__gethex+0x12a>
 800cf1e:	1e73      	subs	r3, r6, #1
 800cf20:	9a05      	ldr	r2, [sp, #20]
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d019      	beq.n	800cf60 <__gethex+0x260>
 800cf2c:	f1bb 0f20 	cmp.w	fp, #32
 800cf30:	d107      	bne.n	800cf42 <__gethex+0x242>
 800cf32:	9b02      	ldr	r3, [sp, #8]
 800cf34:	9a00      	ldr	r2, [sp, #0]
 800cf36:	f843 2b04 	str.w	r2, [r3], #4
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	469b      	mov	fp, r3
 800cf42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf46:	f7ff fec6 	bl	800ccd6 <__hexdig_fun>
 800cf4a:	9b00      	ldr	r3, [sp, #0]
 800cf4c:	f000 000f 	and.w	r0, r0, #15
 800cf50:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf54:	4303      	orrs	r3, r0
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	f10b 0b04 	add.w	fp, fp, #4
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	e00d      	b.n	800cf7c <__gethex+0x27c>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	9a06      	ldr	r2, [sp, #24]
 800cf64:	4413      	add	r3, r2
 800cf66:	42bb      	cmp	r3, r7
 800cf68:	d3e0      	bcc.n	800cf2c <__gethex+0x22c>
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	9901      	ldr	r1, [sp, #4]
 800cf6e:	9307      	str	r3, [sp, #28]
 800cf70:	4652      	mov	r2, sl
 800cf72:	f001 fb18 	bl	800e5a6 <strncmp>
 800cf76:	9b07      	ldr	r3, [sp, #28]
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1d7      	bne.n	800cf2c <__gethex+0x22c>
 800cf7c:	461e      	mov	r6, r3
 800cf7e:	e78b      	b.n	800ce98 <__gethex+0x198>
 800cf80:	f04f 0a03 	mov.w	sl, #3
 800cf84:	e7b8      	b.n	800cef8 <__gethex+0x1f8>
 800cf86:	da0a      	bge.n	800cf9e <__gethex+0x29e>
 800cf88:	1a37      	subs	r7, r6, r0
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	ee18 0a10 	vmov	r0, s16
 800cf90:	463a      	mov	r2, r7
 800cf92:	f000 fc9f 	bl	800d8d4 <__lshift>
 800cf96:	1bed      	subs	r5, r5, r7
 800cf98:	4604      	mov	r4, r0
 800cf9a:	f100 0914 	add.w	r9, r0, #20
 800cf9e:	f04f 0a00 	mov.w	sl, #0
 800cfa2:	e7ae      	b.n	800cf02 <__gethex+0x202>
 800cfa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cfa8:	42a8      	cmp	r0, r5
 800cfaa:	dd72      	ble.n	800d092 <__gethex+0x392>
 800cfac:	1b45      	subs	r5, r0, r5
 800cfae:	42ae      	cmp	r6, r5
 800cfb0:	dc36      	bgt.n	800d020 <__gethex+0x320>
 800cfb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d02a      	beq.n	800d010 <__gethex+0x310>
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d02c      	beq.n	800d018 <__gethex+0x318>
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d11c      	bne.n	800cffc <__gethex+0x2fc>
 800cfc2:	42ae      	cmp	r6, r5
 800cfc4:	d11a      	bne.n	800cffc <__gethex+0x2fc>
 800cfc6:	2e01      	cmp	r6, #1
 800cfc8:	d112      	bne.n	800cff0 <__gethex+0x2f0>
 800cfca:	9a04      	ldr	r2, [sp, #16]
 800cfcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	f8c9 3000 	str.w	r3, [r9]
 800cfda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfdc:	2762      	movs	r7, #98	; 0x62
 800cfde:	601c      	str	r4, [r3, #0]
 800cfe0:	e723      	b.n	800ce2a <__gethex+0x12a>
 800cfe2:	bf00      	nop
 800cfe4:	0800f664 	.word	0x0800f664
 800cfe8:	0800f588 	.word	0x0800f588
 800cfec:	0800f5fc 	.word	0x0800f5fc
 800cff0:	1e71      	subs	r1, r6, #1
 800cff2:	4620      	mov	r0, r4
 800cff4:	f000 feaf 	bl	800dd56 <__any_on>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d1e6      	bne.n	800cfca <__gethex+0x2ca>
 800cffc:	ee18 0a10 	vmov	r0, s16
 800d000:	4621      	mov	r1, r4
 800d002:	f000 fa4b 	bl	800d49c <_Bfree>
 800d006:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d008:	2300      	movs	r3, #0
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	2750      	movs	r7, #80	; 0x50
 800d00e:	e70c      	b.n	800ce2a <__gethex+0x12a>
 800d010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1f2      	bne.n	800cffc <__gethex+0x2fc>
 800d016:	e7d8      	b.n	800cfca <__gethex+0x2ca>
 800d018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1d5      	bne.n	800cfca <__gethex+0x2ca>
 800d01e:	e7ed      	b.n	800cffc <__gethex+0x2fc>
 800d020:	1e6f      	subs	r7, r5, #1
 800d022:	f1ba 0f00 	cmp.w	sl, #0
 800d026:	d131      	bne.n	800d08c <__gethex+0x38c>
 800d028:	b127      	cbz	r7, 800d034 <__gethex+0x334>
 800d02a:	4639      	mov	r1, r7
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 fe92 	bl	800dd56 <__any_on>
 800d032:	4682      	mov	sl, r0
 800d034:	117b      	asrs	r3, r7, #5
 800d036:	2101      	movs	r1, #1
 800d038:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d03c:	f007 071f 	and.w	r7, r7, #31
 800d040:	fa01 f707 	lsl.w	r7, r1, r7
 800d044:	421f      	tst	r7, r3
 800d046:	4629      	mov	r1, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	bf18      	it	ne
 800d04c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d050:	1b76      	subs	r6, r6, r5
 800d052:	f7ff fdee 	bl	800cc32 <rshift>
 800d056:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d05a:	2702      	movs	r7, #2
 800d05c:	f1ba 0f00 	cmp.w	sl, #0
 800d060:	d048      	beq.n	800d0f4 <__gethex+0x3f4>
 800d062:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d015      	beq.n	800d096 <__gethex+0x396>
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d017      	beq.n	800d09e <__gethex+0x39e>
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d109      	bne.n	800d086 <__gethex+0x386>
 800d072:	f01a 0f02 	tst.w	sl, #2
 800d076:	d006      	beq.n	800d086 <__gethex+0x386>
 800d078:	f8d9 0000 	ldr.w	r0, [r9]
 800d07c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d080:	f01a 0f01 	tst.w	sl, #1
 800d084:	d10e      	bne.n	800d0a4 <__gethex+0x3a4>
 800d086:	f047 0710 	orr.w	r7, r7, #16
 800d08a:	e033      	b.n	800d0f4 <__gethex+0x3f4>
 800d08c:	f04f 0a01 	mov.w	sl, #1
 800d090:	e7d0      	b.n	800d034 <__gethex+0x334>
 800d092:	2701      	movs	r7, #1
 800d094:	e7e2      	b.n	800d05c <__gethex+0x35c>
 800d096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d098:	f1c3 0301 	rsb	r3, r3, #1
 800d09c:	9315      	str	r3, [sp, #84]	; 0x54
 800d09e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0f0      	beq.n	800d086 <__gethex+0x386>
 800d0a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0a8:	f104 0314 	add.w	r3, r4, #20
 800d0ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d0b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0b4:	f04f 0c00 	mov.w	ip, #0
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0c2:	d01c      	beq.n	800d0fe <__gethex+0x3fe>
 800d0c4:	3201      	adds	r2, #1
 800d0c6:	6002      	str	r2, [r0, #0]
 800d0c8:	2f02      	cmp	r7, #2
 800d0ca:	f104 0314 	add.w	r3, r4, #20
 800d0ce:	d13f      	bne.n	800d150 <__gethex+0x450>
 800d0d0:	f8d8 2000 	ldr.w	r2, [r8]
 800d0d4:	3a01      	subs	r2, #1
 800d0d6:	42b2      	cmp	r2, r6
 800d0d8:	d10a      	bne.n	800d0f0 <__gethex+0x3f0>
 800d0da:	1171      	asrs	r1, r6, #5
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0e2:	f006 061f 	and.w	r6, r6, #31
 800d0e6:	fa02 f606 	lsl.w	r6, r2, r6
 800d0ea:	421e      	tst	r6, r3
 800d0ec:	bf18      	it	ne
 800d0ee:	4617      	movne	r7, r2
 800d0f0:	f047 0720 	orr.w	r7, r7, #32
 800d0f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0f6:	601c      	str	r4, [r3, #0]
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	601d      	str	r5, [r3, #0]
 800d0fc:	e695      	b.n	800ce2a <__gethex+0x12a>
 800d0fe:	4299      	cmp	r1, r3
 800d100:	f843 cc04 	str.w	ip, [r3, #-4]
 800d104:	d8d8      	bhi.n	800d0b8 <__gethex+0x3b8>
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	459b      	cmp	fp, r3
 800d10a:	db19      	blt.n	800d140 <__gethex+0x440>
 800d10c:	6861      	ldr	r1, [r4, #4]
 800d10e:	ee18 0a10 	vmov	r0, s16
 800d112:	3101      	adds	r1, #1
 800d114:	f000 f982 	bl	800d41c <_Balloc>
 800d118:	4681      	mov	r9, r0
 800d11a:	b918      	cbnz	r0, 800d124 <__gethex+0x424>
 800d11c:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <__gethex+0x488>)
 800d11e:	4602      	mov	r2, r0
 800d120:	2184      	movs	r1, #132	; 0x84
 800d122:	e6a8      	b.n	800ce76 <__gethex+0x176>
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	3202      	adds	r2, #2
 800d128:	f104 010c 	add.w	r1, r4, #12
 800d12c:	0092      	lsls	r2, r2, #2
 800d12e:	300c      	adds	r0, #12
 800d130:	f7fc ff6a 	bl	800a008 <memcpy>
 800d134:	4621      	mov	r1, r4
 800d136:	ee18 0a10 	vmov	r0, s16
 800d13a:	f000 f9af 	bl	800d49c <_Bfree>
 800d13e:	464c      	mov	r4, r9
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d148:	6122      	str	r2, [r4, #16]
 800d14a:	2201      	movs	r2, #1
 800d14c:	615a      	str	r2, [r3, #20]
 800d14e:	e7bb      	b.n	800d0c8 <__gethex+0x3c8>
 800d150:	6922      	ldr	r2, [r4, #16]
 800d152:	455a      	cmp	r2, fp
 800d154:	dd0b      	ble.n	800d16e <__gethex+0x46e>
 800d156:	2101      	movs	r1, #1
 800d158:	4620      	mov	r0, r4
 800d15a:	f7ff fd6a 	bl	800cc32 <rshift>
 800d15e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d162:	3501      	adds	r5, #1
 800d164:	42ab      	cmp	r3, r5
 800d166:	f6ff aed0 	blt.w	800cf0a <__gethex+0x20a>
 800d16a:	2701      	movs	r7, #1
 800d16c:	e7c0      	b.n	800d0f0 <__gethex+0x3f0>
 800d16e:	f016 061f 	ands.w	r6, r6, #31
 800d172:	d0fa      	beq.n	800d16a <__gethex+0x46a>
 800d174:	4453      	add	r3, sl
 800d176:	f1c6 0620 	rsb	r6, r6, #32
 800d17a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d17e:	f000 fa3f 	bl	800d600 <__hi0bits>
 800d182:	42b0      	cmp	r0, r6
 800d184:	dbe7      	blt.n	800d156 <__gethex+0x456>
 800d186:	e7f0      	b.n	800d16a <__gethex+0x46a>
 800d188:	0800f588 	.word	0x0800f588

0800d18c <L_shift>:
 800d18c:	f1c2 0208 	rsb	r2, r2, #8
 800d190:	0092      	lsls	r2, r2, #2
 800d192:	b570      	push	{r4, r5, r6, lr}
 800d194:	f1c2 0620 	rsb	r6, r2, #32
 800d198:	6843      	ldr	r3, [r0, #4]
 800d19a:	6804      	ldr	r4, [r0, #0]
 800d19c:	fa03 f506 	lsl.w	r5, r3, r6
 800d1a0:	432c      	orrs	r4, r5
 800d1a2:	40d3      	lsrs	r3, r2
 800d1a4:	6004      	str	r4, [r0, #0]
 800d1a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1aa:	4288      	cmp	r0, r1
 800d1ac:	d3f4      	bcc.n	800d198 <L_shift+0xc>
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}

0800d1b0 <__match>:
 800d1b0:	b530      	push	{r4, r5, lr}
 800d1b2:	6803      	ldr	r3, [r0, #0]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ba:	b914      	cbnz	r4, 800d1c2 <__match+0x12>
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	2001      	movs	r0, #1
 800d1c0:	bd30      	pop	{r4, r5, pc}
 800d1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d1ca:	2d19      	cmp	r5, #25
 800d1cc:	bf98      	it	ls
 800d1ce:	3220      	addls	r2, #32
 800d1d0:	42a2      	cmp	r2, r4
 800d1d2:	d0f0      	beq.n	800d1b6 <__match+0x6>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e7f3      	b.n	800d1c0 <__match+0x10>

0800d1d8 <__hexnan>:
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	680b      	ldr	r3, [r1, #0]
 800d1de:	115e      	asrs	r6, r3, #5
 800d1e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1e4:	f013 031f 	ands.w	r3, r3, #31
 800d1e8:	b087      	sub	sp, #28
 800d1ea:	bf18      	it	ne
 800d1ec:	3604      	addne	r6, #4
 800d1ee:	2500      	movs	r5, #0
 800d1f0:	1f37      	subs	r7, r6, #4
 800d1f2:	4690      	mov	r8, r2
 800d1f4:	6802      	ldr	r2, [r0, #0]
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1fe:	46b9      	mov	r9, r7
 800d200:	463c      	mov	r4, r7
 800d202:	9502      	str	r5, [sp, #8]
 800d204:	46ab      	mov	fp, r5
 800d206:	7851      	ldrb	r1, [r2, #1]
 800d208:	1c53      	adds	r3, r2, #1
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	b341      	cbz	r1, 800d260 <__hexnan+0x88>
 800d20e:	4608      	mov	r0, r1
 800d210:	9205      	str	r2, [sp, #20]
 800d212:	9104      	str	r1, [sp, #16]
 800d214:	f7ff fd5f 	bl	800ccd6 <__hexdig_fun>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d14f      	bne.n	800d2bc <__hexnan+0xe4>
 800d21c:	9904      	ldr	r1, [sp, #16]
 800d21e:	9a05      	ldr	r2, [sp, #20]
 800d220:	2920      	cmp	r1, #32
 800d222:	d818      	bhi.n	800d256 <__hexnan+0x7e>
 800d224:	9b02      	ldr	r3, [sp, #8]
 800d226:	459b      	cmp	fp, r3
 800d228:	dd13      	ble.n	800d252 <__hexnan+0x7a>
 800d22a:	454c      	cmp	r4, r9
 800d22c:	d206      	bcs.n	800d23c <__hexnan+0x64>
 800d22e:	2d07      	cmp	r5, #7
 800d230:	dc04      	bgt.n	800d23c <__hexnan+0x64>
 800d232:	462a      	mov	r2, r5
 800d234:	4649      	mov	r1, r9
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff ffa8 	bl	800d18c <L_shift>
 800d23c:	4544      	cmp	r4, r8
 800d23e:	d950      	bls.n	800d2e2 <__hexnan+0x10a>
 800d240:	2300      	movs	r3, #0
 800d242:	f1a4 0904 	sub.w	r9, r4, #4
 800d246:	f844 3c04 	str.w	r3, [r4, #-4]
 800d24a:	f8cd b008 	str.w	fp, [sp, #8]
 800d24e:	464c      	mov	r4, r9
 800d250:	461d      	mov	r5, r3
 800d252:	9a03      	ldr	r2, [sp, #12]
 800d254:	e7d7      	b.n	800d206 <__hexnan+0x2e>
 800d256:	2929      	cmp	r1, #41	; 0x29
 800d258:	d156      	bne.n	800d308 <__hexnan+0x130>
 800d25a:	3202      	adds	r2, #2
 800d25c:	f8ca 2000 	str.w	r2, [sl]
 800d260:	f1bb 0f00 	cmp.w	fp, #0
 800d264:	d050      	beq.n	800d308 <__hexnan+0x130>
 800d266:	454c      	cmp	r4, r9
 800d268:	d206      	bcs.n	800d278 <__hexnan+0xa0>
 800d26a:	2d07      	cmp	r5, #7
 800d26c:	dc04      	bgt.n	800d278 <__hexnan+0xa0>
 800d26e:	462a      	mov	r2, r5
 800d270:	4649      	mov	r1, r9
 800d272:	4620      	mov	r0, r4
 800d274:	f7ff ff8a 	bl	800d18c <L_shift>
 800d278:	4544      	cmp	r4, r8
 800d27a:	d934      	bls.n	800d2e6 <__hexnan+0x10e>
 800d27c:	f1a8 0204 	sub.w	r2, r8, #4
 800d280:	4623      	mov	r3, r4
 800d282:	f853 1b04 	ldr.w	r1, [r3], #4
 800d286:	f842 1f04 	str.w	r1, [r2, #4]!
 800d28a:	429f      	cmp	r7, r3
 800d28c:	d2f9      	bcs.n	800d282 <__hexnan+0xaa>
 800d28e:	1b3b      	subs	r3, r7, r4
 800d290:	f023 0303 	bic.w	r3, r3, #3
 800d294:	3304      	adds	r3, #4
 800d296:	3401      	adds	r4, #1
 800d298:	3e03      	subs	r6, #3
 800d29a:	42b4      	cmp	r4, r6
 800d29c:	bf88      	it	hi
 800d29e:	2304      	movhi	r3, #4
 800d2a0:	4443      	add	r3, r8
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f843 2b04 	str.w	r2, [r3], #4
 800d2a8:	429f      	cmp	r7, r3
 800d2aa:	d2fb      	bcs.n	800d2a4 <__hexnan+0xcc>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	b91b      	cbnz	r3, 800d2b8 <__hexnan+0xe0>
 800d2b0:	4547      	cmp	r7, r8
 800d2b2:	d127      	bne.n	800d304 <__hexnan+0x12c>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	2005      	movs	r0, #5
 800d2ba:	e026      	b.n	800d30a <__hexnan+0x132>
 800d2bc:	3501      	adds	r5, #1
 800d2be:	2d08      	cmp	r5, #8
 800d2c0:	f10b 0b01 	add.w	fp, fp, #1
 800d2c4:	dd06      	ble.n	800d2d4 <__hexnan+0xfc>
 800d2c6:	4544      	cmp	r4, r8
 800d2c8:	d9c3      	bls.n	800d252 <__hexnan+0x7a>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2d0:	2501      	movs	r5, #1
 800d2d2:	3c04      	subs	r4, #4
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	f000 000f 	and.w	r0, r0, #15
 800d2da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d2de:	6022      	str	r2, [r4, #0]
 800d2e0:	e7b7      	b.n	800d252 <__hexnan+0x7a>
 800d2e2:	2508      	movs	r5, #8
 800d2e4:	e7b5      	b.n	800d252 <__hexnan+0x7a>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d0df      	beq.n	800d2ac <__hexnan+0xd4>
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f0:	f1c3 0320 	rsb	r3, r3, #32
 800d2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2fc:	401a      	ands	r2, r3
 800d2fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800d302:	e7d3      	b.n	800d2ac <__hexnan+0xd4>
 800d304:	3f04      	subs	r7, #4
 800d306:	e7d1      	b.n	800d2ac <__hexnan+0xd4>
 800d308:	2004      	movs	r0, #4
 800d30a:	b007      	add	sp, #28
 800d30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d310 <_localeconv_r>:
 800d310:	4800      	ldr	r0, [pc, #0]	; (800d314 <_localeconv_r+0x4>)
 800d312:	4770      	bx	lr
 800d314:	24000188 	.word	0x24000188

0800d318 <__retarget_lock_init_recursive>:
 800d318:	4770      	bx	lr

0800d31a <__retarget_lock_acquire_recursive>:
 800d31a:	4770      	bx	lr

0800d31c <__retarget_lock_release_recursive>:
 800d31c:	4770      	bx	lr

0800d31e <__swhatbuf_r>:
 800d31e:	b570      	push	{r4, r5, r6, lr}
 800d320:	460e      	mov	r6, r1
 800d322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d326:	2900      	cmp	r1, #0
 800d328:	b096      	sub	sp, #88	; 0x58
 800d32a:	4614      	mov	r4, r2
 800d32c:	461d      	mov	r5, r3
 800d32e:	da08      	bge.n	800d342 <__swhatbuf_r+0x24>
 800d330:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	602a      	str	r2, [r5, #0]
 800d338:	061a      	lsls	r2, r3, #24
 800d33a:	d410      	bmi.n	800d35e <__swhatbuf_r+0x40>
 800d33c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d340:	e00e      	b.n	800d360 <__swhatbuf_r+0x42>
 800d342:	466a      	mov	r2, sp
 800d344:	f001 f9a2 	bl	800e68c <_fstat_r>
 800d348:	2800      	cmp	r0, #0
 800d34a:	dbf1      	blt.n	800d330 <__swhatbuf_r+0x12>
 800d34c:	9a01      	ldr	r2, [sp, #4]
 800d34e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d352:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d356:	425a      	negs	r2, r3
 800d358:	415a      	adcs	r2, r3
 800d35a:	602a      	str	r2, [r5, #0]
 800d35c:	e7ee      	b.n	800d33c <__swhatbuf_r+0x1e>
 800d35e:	2340      	movs	r3, #64	; 0x40
 800d360:	2000      	movs	r0, #0
 800d362:	6023      	str	r3, [r4, #0]
 800d364:	b016      	add	sp, #88	; 0x58
 800d366:	bd70      	pop	{r4, r5, r6, pc}

0800d368 <__smakebuf_r>:
 800d368:	898b      	ldrh	r3, [r1, #12]
 800d36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d36c:	079d      	lsls	r5, r3, #30
 800d36e:	4606      	mov	r6, r0
 800d370:	460c      	mov	r4, r1
 800d372:	d507      	bpl.n	800d384 <__smakebuf_r+0x1c>
 800d374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	6123      	str	r3, [r4, #16]
 800d37c:	2301      	movs	r3, #1
 800d37e:	6163      	str	r3, [r4, #20]
 800d380:	b002      	add	sp, #8
 800d382:	bd70      	pop	{r4, r5, r6, pc}
 800d384:	ab01      	add	r3, sp, #4
 800d386:	466a      	mov	r2, sp
 800d388:	f7ff ffc9 	bl	800d31e <__swhatbuf_r>
 800d38c:	9900      	ldr	r1, [sp, #0]
 800d38e:	4605      	mov	r5, r0
 800d390:	4630      	mov	r0, r6
 800d392:	f000 fd83 	bl	800de9c <_malloc_r>
 800d396:	b948      	cbnz	r0, 800d3ac <__smakebuf_r+0x44>
 800d398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d39c:	059a      	lsls	r2, r3, #22
 800d39e:	d4ef      	bmi.n	800d380 <__smakebuf_r+0x18>
 800d3a0:	f023 0303 	bic.w	r3, r3, #3
 800d3a4:	f043 0302 	orr.w	r3, r3, #2
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	e7e3      	b.n	800d374 <__smakebuf_r+0xc>
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <__smakebuf_r+0x7c>)
 800d3ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	6020      	str	r0, [r4, #0]
 800d3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	9b00      	ldr	r3, [sp, #0]
 800d3bc:	6163      	str	r3, [r4, #20]
 800d3be:	9b01      	ldr	r3, [sp, #4]
 800d3c0:	6120      	str	r0, [r4, #16]
 800d3c2:	b15b      	cbz	r3, 800d3dc <__smakebuf_r+0x74>
 800d3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f001 f971 	bl	800e6b0 <_isatty_r>
 800d3ce:	b128      	cbz	r0, 800d3dc <__smakebuf_r+0x74>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	89a0      	ldrh	r0, [r4, #12]
 800d3de:	4305      	orrs	r5, r0
 800d3e0:	81a5      	strh	r5, [r4, #12]
 800d3e2:	e7cd      	b.n	800d380 <__smakebuf_r+0x18>
 800d3e4:	0800ca91 	.word	0x0800ca91

0800d3e8 <malloc>:
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <malloc+0xc>)
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	f000 bd55 	b.w	800de9c <_malloc_r>
 800d3f2:	bf00      	nop
 800d3f4:	24000030 	.word	0x24000030

0800d3f8 <__ascii_mbtowc>:
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	b901      	cbnz	r1, 800d3fe <__ascii_mbtowc+0x6>
 800d3fc:	a901      	add	r1, sp, #4
 800d3fe:	b142      	cbz	r2, 800d412 <__ascii_mbtowc+0x1a>
 800d400:	b14b      	cbz	r3, 800d416 <__ascii_mbtowc+0x1e>
 800d402:	7813      	ldrb	r3, [r2, #0]
 800d404:	600b      	str	r3, [r1, #0]
 800d406:	7812      	ldrb	r2, [r2, #0]
 800d408:	1e10      	subs	r0, r2, #0
 800d40a:	bf18      	it	ne
 800d40c:	2001      	movne	r0, #1
 800d40e:	b002      	add	sp, #8
 800d410:	4770      	bx	lr
 800d412:	4610      	mov	r0, r2
 800d414:	e7fb      	b.n	800d40e <__ascii_mbtowc+0x16>
 800d416:	f06f 0001 	mvn.w	r0, #1
 800d41a:	e7f8      	b.n	800d40e <__ascii_mbtowc+0x16>

0800d41c <_Balloc>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d420:	4604      	mov	r4, r0
 800d422:	460d      	mov	r5, r1
 800d424:	b976      	cbnz	r6, 800d444 <_Balloc+0x28>
 800d426:	2010      	movs	r0, #16
 800d428:	f7ff ffde 	bl	800d3e8 <malloc>
 800d42c:	4602      	mov	r2, r0
 800d42e:	6260      	str	r0, [r4, #36]	; 0x24
 800d430:	b920      	cbnz	r0, 800d43c <_Balloc+0x20>
 800d432:	4b18      	ldr	r3, [pc, #96]	; (800d494 <_Balloc+0x78>)
 800d434:	4818      	ldr	r0, [pc, #96]	; (800d498 <_Balloc+0x7c>)
 800d436:	2166      	movs	r1, #102	; 0x66
 800d438:	f001 f8e8 	bl	800e60c <__assert_func>
 800d43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d440:	6006      	str	r6, [r0, #0]
 800d442:	60c6      	str	r6, [r0, #12]
 800d444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d446:	68f3      	ldr	r3, [r6, #12]
 800d448:	b183      	cbz	r3, 800d46c <_Balloc+0x50>
 800d44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d452:	b9b8      	cbnz	r0, 800d484 <_Balloc+0x68>
 800d454:	2101      	movs	r1, #1
 800d456:	fa01 f605 	lsl.w	r6, r1, r5
 800d45a:	1d72      	adds	r2, r6, #5
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fc9a 	bl	800dd98 <_calloc_r>
 800d464:	b160      	cbz	r0, 800d480 <_Balloc+0x64>
 800d466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d46a:	e00e      	b.n	800d48a <_Balloc+0x6e>
 800d46c:	2221      	movs	r2, #33	; 0x21
 800d46e:	2104      	movs	r1, #4
 800d470:	4620      	mov	r0, r4
 800d472:	f000 fc91 	bl	800dd98 <_calloc_r>
 800d476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d478:	60f0      	str	r0, [r6, #12]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e4      	bne.n	800d44a <_Balloc+0x2e>
 800d480:	2000      	movs	r0, #0
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	6802      	ldr	r2, [r0, #0]
 800d486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d48a:	2300      	movs	r3, #0
 800d48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d490:	e7f7      	b.n	800d482 <_Balloc+0x66>
 800d492:	bf00      	nop
 800d494:	0800f516 	.word	0x0800f516
 800d498:	0800f678 	.word	0x0800f678

0800d49c <_Bfree>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b976      	cbnz	r6, 800d4c4 <_Bfree+0x28>
 800d4a6:	2010      	movs	r0, #16
 800d4a8:	f7ff ff9e 	bl	800d3e8 <malloc>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	6268      	str	r0, [r5, #36]	; 0x24
 800d4b0:	b920      	cbnz	r0, 800d4bc <_Bfree+0x20>
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <_Bfree+0x3c>)
 800d4b4:	4809      	ldr	r0, [pc, #36]	; (800d4dc <_Bfree+0x40>)
 800d4b6:	218a      	movs	r1, #138	; 0x8a
 800d4b8:	f001 f8a8 	bl	800e60c <__assert_func>
 800d4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4c0:	6006      	str	r6, [r0, #0]
 800d4c2:	60c6      	str	r6, [r0, #12]
 800d4c4:	b13c      	cbz	r4, 800d4d6 <_Bfree+0x3a>
 800d4c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4c8:	6862      	ldr	r2, [r4, #4]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4d0:	6021      	str	r1, [r4, #0]
 800d4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}
 800d4d8:	0800f516 	.word	0x0800f516
 800d4dc:	0800f678 	.word	0x0800f678

0800d4e0 <__multadd>:
 800d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e4:	690d      	ldr	r5, [r1, #16]
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	460c      	mov	r4, r1
 800d4ea:	461e      	mov	r6, r3
 800d4ec:	f101 0c14 	add.w	ip, r1, #20
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d4f6:	b299      	uxth	r1, r3
 800d4f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d4fc:	0c1e      	lsrs	r6, r3, #16
 800d4fe:	0c0b      	lsrs	r3, r1, #16
 800d500:	fb02 3306 	mla	r3, r2, r6, r3
 800d504:	b289      	uxth	r1, r1
 800d506:	3001      	adds	r0, #1
 800d508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d50c:	4285      	cmp	r5, r0
 800d50e:	f84c 1b04 	str.w	r1, [ip], #4
 800d512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d516:	dcec      	bgt.n	800d4f2 <__multadd+0x12>
 800d518:	b30e      	cbz	r6, 800d55e <__multadd+0x7e>
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	dc19      	bgt.n	800d554 <__multadd+0x74>
 800d520:	6861      	ldr	r1, [r4, #4]
 800d522:	4638      	mov	r0, r7
 800d524:	3101      	adds	r1, #1
 800d526:	f7ff ff79 	bl	800d41c <_Balloc>
 800d52a:	4680      	mov	r8, r0
 800d52c:	b928      	cbnz	r0, 800d53a <__multadd+0x5a>
 800d52e:	4602      	mov	r2, r0
 800d530:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <__multadd+0x84>)
 800d532:	480d      	ldr	r0, [pc, #52]	; (800d568 <__multadd+0x88>)
 800d534:	21b5      	movs	r1, #181	; 0xb5
 800d536:	f001 f869 	bl	800e60c <__assert_func>
 800d53a:	6922      	ldr	r2, [r4, #16]
 800d53c:	3202      	adds	r2, #2
 800d53e:	f104 010c 	add.w	r1, r4, #12
 800d542:	0092      	lsls	r2, r2, #2
 800d544:	300c      	adds	r0, #12
 800d546:	f7fc fd5f 	bl	800a008 <memcpy>
 800d54a:	4621      	mov	r1, r4
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7ff ffa5 	bl	800d49c <_Bfree>
 800d552:	4644      	mov	r4, r8
 800d554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d558:	3501      	adds	r5, #1
 800d55a:	615e      	str	r6, [r3, #20]
 800d55c:	6125      	str	r5, [r4, #16]
 800d55e:	4620      	mov	r0, r4
 800d560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d564:	0800f588 	.word	0x0800f588
 800d568:	0800f678 	.word	0x0800f678

0800d56c <__s2b>:
 800d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d570:	460c      	mov	r4, r1
 800d572:	4615      	mov	r5, r2
 800d574:	461f      	mov	r7, r3
 800d576:	2209      	movs	r2, #9
 800d578:	3308      	adds	r3, #8
 800d57a:	4606      	mov	r6, r0
 800d57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d580:	2100      	movs	r1, #0
 800d582:	2201      	movs	r2, #1
 800d584:	429a      	cmp	r2, r3
 800d586:	db09      	blt.n	800d59c <__s2b+0x30>
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ff47 	bl	800d41c <_Balloc>
 800d58e:	b940      	cbnz	r0, 800d5a2 <__s2b+0x36>
 800d590:	4602      	mov	r2, r0
 800d592:	4b19      	ldr	r3, [pc, #100]	; (800d5f8 <__s2b+0x8c>)
 800d594:	4819      	ldr	r0, [pc, #100]	; (800d5fc <__s2b+0x90>)
 800d596:	21ce      	movs	r1, #206	; 0xce
 800d598:	f001 f838 	bl	800e60c <__assert_func>
 800d59c:	0052      	lsls	r2, r2, #1
 800d59e:	3101      	adds	r1, #1
 800d5a0:	e7f0      	b.n	800d584 <__s2b+0x18>
 800d5a2:	9b08      	ldr	r3, [sp, #32]
 800d5a4:	6143      	str	r3, [r0, #20]
 800d5a6:	2d09      	cmp	r5, #9
 800d5a8:	f04f 0301 	mov.w	r3, #1
 800d5ac:	6103      	str	r3, [r0, #16]
 800d5ae:	dd16      	ble.n	800d5de <__s2b+0x72>
 800d5b0:	f104 0909 	add.w	r9, r4, #9
 800d5b4:	46c8      	mov	r8, r9
 800d5b6:	442c      	add	r4, r5
 800d5b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d5bc:	4601      	mov	r1, r0
 800d5be:	3b30      	subs	r3, #48	; 0x30
 800d5c0:	220a      	movs	r2, #10
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f7ff ff8c 	bl	800d4e0 <__multadd>
 800d5c8:	45a0      	cmp	r8, r4
 800d5ca:	d1f5      	bne.n	800d5b8 <__s2b+0x4c>
 800d5cc:	f1a5 0408 	sub.w	r4, r5, #8
 800d5d0:	444c      	add	r4, r9
 800d5d2:	1b2d      	subs	r5, r5, r4
 800d5d4:	1963      	adds	r3, r4, r5
 800d5d6:	42bb      	cmp	r3, r7
 800d5d8:	db04      	blt.n	800d5e4 <__s2b+0x78>
 800d5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5de:	340a      	adds	r4, #10
 800d5e0:	2509      	movs	r5, #9
 800d5e2:	e7f6      	b.n	800d5d2 <__s2b+0x66>
 800d5e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	3b30      	subs	r3, #48	; 0x30
 800d5ec:	220a      	movs	r2, #10
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f7ff ff76 	bl	800d4e0 <__multadd>
 800d5f4:	e7ee      	b.n	800d5d4 <__s2b+0x68>
 800d5f6:	bf00      	nop
 800d5f8:	0800f588 	.word	0x0800f588
 800d5fc:	0800f678 	.word	0x0800f678

0800d600 <__hi0bits>:
 800d600:	0c03      	lsrs	r3, r0, #16
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	b9d3      	cbnz	r3, 800d63c <__hi0bits+0x3c>
 800d606:	0400      	lsls	r0, r0, #16
 800d608:	2310      	movs	r3, #16
 800d60a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d60e:	bf04      	itt	eq
 800d610:	0200      	lsleq	r0, r0, #8
 800d612:	3308      	addeq	r3, #8
 800d614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d618:	bf04      	itt	eq
 800d61a:	0100      	lsleq	r0, r0, #4
 800d61c:	3304      	addeq	r3, #4
 800d61e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d622:	bf04      	itt	eq
 800d624:	0080      	lsleq	r0, r0, #2
 800d626:	3302      	addeq	r3, #2
 800d628:	2800      	cmp	r0, #0
 800d62a:	db05      	blt.n	800d638 <__hi0bits+0x38>
 800d62c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d630:	f103 0301 	add.w	r3, r3, #1
 800d634:	bf08      	it	eq
 800d636:	2320      	moveq	r3, #32
 800d638:	4618      	mov	r0, r3
 800d63a:	4770      	bx	lr
 800d63c:	2300      	movs	r3, #0
 800d63e:	e7e4      	b.n	800d60a <__hi0bits+0xa>

0800d640 <__lo0bits>:
 800d640:	6803      	ldr	r3, [r0, #0]
 800d642:	f013 0207 	ands.w	r2, r3, #7
 800d646:	4601      	mov	r1, r0
 800d648:	d00b      	beq.n	800d662 <__lo0bits+0x22>
 800d64a:	07da      	lsls	r2, r3, #31
 800d64c:	d423      	bmi.n	800d696 <__lo0bits+0x56>
 800d64e:	0798      	lsls	r0, r3, #30
 800d650:	bf49      	itett	mi
 800d652:	085b      	lsrmi	r3, r3, #1
 800d654:	089b      	lsrpl	r3, r3, #2
 800d656:	2001      	movmi	r0, #1
 800d658:	600b      	strmi	r3, [r1, #0]
 800d65a:	bf5c      	itt	pl
 800d65c:	600b      	strpl	r3, [r1, #0]
 800d65e:	2002      	movpl	r0, #2
 800d660:	4770      	bx	lr
 800d662:	b298      	uxth	r0, r3
 800d664:	b9a8      	cbnz	r0, 800d692 <__lo0bits+0x52>
 800d666:	0c1b      	lsrs	r3, r3, #16
 800d668:	2010      	movs	r0, #16
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	b90a      	cbnz	r2, 800d672 <__lo0bits+0x32>
 800d66e:	3008      	adds	r0, #8
 800d670:	0a1b      	lsrs	r3, r3, #8
 800d672:	071a      	lsls	r2, r3, #28
 800d674:	bf04      	itt	eq
 800d676:	091b      	lsreq	r3, r3, #4
 800d678:	3004      	addeq	r0, #4
 800d67a:	079a      	lsls	r2, r3, #30
 800d67c:	bf04      	itt	eq
 800d67e:	089b      	lsreq	r3, r3, #2
 800d680:	3002      	addeq	r0, #2
 800d682:	07da      	lsls	r2, r3, #31
 800d684:	d403      	bmi.n	800d68e <__lo0bits+0x4e>
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	f100 0001 	add.w	r0, r0, #1
 800d68c:	d005      	beq.n	800d69a <__lo0bits+0x5a>
 800d68e:	600b      	str	r3, [r1, #0]
 800d690:	4770      	bx	lr
 800d692:	4610      	mov	r0, r2
 800d694:	e7e9      	b.n	800d66a <__lo0bits+0x2a>
 800d696:	2000      	movs	r0, #0
 800d698:	4770      	bx	lr
 800d69a:	2020      	movs	r0, #32
 800d69c:	4770      	bx	lr
	...

0800d6a0 <__i2b>:
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	f7ff feb9 	bl	800d41c <_Balloc>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	b928      	cbnz	r0, 800d6ba <__i2b+0x1a>
 800d6ae:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <__i2b+0x24>)
 800d6b0:	4805      	ldr	r0, [pc, #20]	; (800d6c8 <__i2b+0x28>)
 800d6b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6b6:	f000 ffa9 	bl	800e60c <__assert_func>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	6144      	str	r4, [r0, #20]
 800d6be:	6103      	str	r3, [r0, #16]
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	bf00      	nop
 800d6c4:	0800f588 	.word	0x0800f588
 800d6c8:	0800f678 	.word	0x0800f678

0800d6cc <__multiply>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	4691      	mov	r9, r2
 800d6d2:	690a      	ldr	r2, [r1, #16]
 800d6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	bfb8      	it	lt
 800d6dc:	460b      	movlt	r3, r1
 800d6de:	460c      	mov	r4, r1
 800d6e0:	bfbc      	itt	lt
 800d6e2:	464c      	movlt	r4, r9
 800d6e4:	4699      	movlt	r9, r3
 800d6e6:	6927      	ldr	r7, [r4, #16]
 800d6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6ec:	68a3      	ldr	r3, [r4, #8]
 800d6ee:	6861      	ldr	r1, [r4, #4]
 800d6f0:	eb07 060a 	add.w	r6, r7, sl
 800d6f4:	42b3      	cmp	r3, r6
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	bfb8      	it	lt
 800d6fa:	3101      	addlt	r1, #1
 800d6fc:	f7ff fe8e 	bl	800d41c <_Balloc>
 800d700:	b930      	cbnz	r0, 800d710 <__multiply+0x44>
 800d702:	4602      	mov	r2, r0
 800d704:	4b44      	ldr	r3, [pc, #272]	; (800d818 <__multiply+0x14c>)
 800d706:	4845      	ldr	r0, [pc, #276]	; (800d81c <__multiply+0x150>)
 800d708:	f240 115d 	movw	r1, #349	; 0x15d
 800d70c:	f000 ff7e 	bl	800e60c <__assert_func>
 800d710:	f100 0514 	add.w	r5, r0, #20
 800d714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d718:	462b      	mov	r3, r5
 800d71a:	2200      	movs	r2, #0
 800d71c:	4543      	cmp	r3, r8
 800d71e:	d321      	bcc.n	800d764 <__multiply+0x98>
 800d720:	f104 0314 	add.w	r3, r4, #20
 800d724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d728:	f109 0314 	add.w	r3, r9, #20
 800d72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d730:	9202      	str	r2, [sp, #8]
 800d732:	1b3a      	subs	r2, r7, r4
 800d734:	3a15      	subs	r2, #21
 800d736:	f022 0203 	bic.w	r2, r2, #3
 800d73a:	3204      	adds	r2, #4
 800d73c:	f104 0115 	add.w	r1, r4, #21
 800d740:	428f      	cmp	r7, r1
 800d742:	bf38      	it	cc
 800d744:	2204      	movcc	r2, #4
 800d746:	9201      	str	r2, [sp, #4]
 800d748:	9a02      	ldr	r2, [sp, #8]
 800d74a:	9303      	str	r3, [sp, #12]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d80c      	bhi.n	800d76a <__multiply+0x9e>
 800d750:	2e00      	cmp	r6, #0
 800d752:	dd03      	ble.n	800d75c <__multiply+0x90>
 800d754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d05a      	beq.n	800d812 <__multiply+0x146>
 800d75c:	6106      	str	r6, [r0, #16]
 800d75e:	b005      	add	sp, #20
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	f843 2b04 	str.w	r2, [r3], #4
 800d768:	e7d8      	b.n	800d71c <__multiply+0x50>
 800d76a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d76e:	f1ba 0f00 	cmp.w	sl, #0
 800d772:	d024      	beq.n	800d7be <__multiply+0xf2>
 800d774:	f104 0e14 	add.w	lr, r4, #20
 800d778:	46a9      	mov	r9, r5
 800d77a:	f04f 0c00 	mov.w	ip, #0
 800d77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d782:	f8d9 1000 	ldr.w	r1, [r9]
 800d786:	fa1f fb82 	uxth.w	fp, r2
 800d78a:	b289      	uxth	r1, r1
 800d78c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d794:	f8d9 2000 	ldr.w	r2, [r9]
 800d798:	4461      	add	r1, ip
 800d79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d79e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7a6:	b289      	uxth	r1, r1
 800d7a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d7ac:	4577      	cmp	r7, lr
 800d7ae:	f849 1b04 	str.w	r1, [r9], #4
 800d7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7b6:	d8e2      	bhi.n	800d77e <__multiply+0xb2>
 800d7b8:	9a01      	ldr	r2, [sp, #4]
 800d7ba:	f845 c002 	str.w	ip, [r5, r2]
 800d7be:	9a03      	ldr	r2, [sp, #12]
 800d7c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ca:	d020      	beq.n	800d80e <__multiply+0x142>
 800d7cc:	6829      	ldr	r1, [r5, #0]
 800d7ce:	f104 0c14 	add.w	ip, r4, #20
 800d7d2:	46ae      	mov	lr, r5
 800d7d4:	f04f 0a00 	mov.w	sl, #0
 800d7d8:	f8bc b000 	ldrh.w	fp, [ip]
 800d7dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7e0:	fb09 220b 	mla	r2, r9, fp, r2
 800d7e4:	4492      	add	sl, r2
 800d7e6:	b289      	uxth	r1, r1
 800d7e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7ec:	f84e 1b04 	str.w	r1, [lr], #4
 800d7f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7f4:	f8be 1000 	ldrh.w	r1, [lr]
 800d7f8:	0c12      	lsrs	r2, r2, #16
 800d7fa:	fb09 1102 	mla	r1, r9, r2, r1
 800d7fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d802:	4567      	cmp	r7, ip
 800d804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d808:	d8e6      	bhi.n	800d7d8 <__multiply+0x10c>
 800d80a:	9a01      	ldr	r2, [sp, #4]
 800d80c:	50a9      	str	r1, [r5, r2]
 800d80e:	3504      	adds	r5, #4
 800d810:	e79a      	b.n	800d748 <__multiply+0x7c>
 800d812:	3e01      	subs	r6, #1
 800d814:	e79c      	b.n	800d750 <__multiply+0x84>
 800d816:	bf00      	nop
 800d818:	0800f588 	.word	0x0800f588
 800d81c:	0800f678 	.word	0x0800f678

0800d820 <__pow5mult>:
 800d820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d824:	4615      	mov	r5, r2
 800d826:	f012 0203 	ands.w	r2, r2, #3
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	d007      	beq.n	800d840 <__pow5mult+0x20>
 800d830:	4c25      	ldr	r4, [pc, #148]	; (800d8c8 <__pow5mult+0xa8>)
 800d832:	3a01      	subs	r2, #1
 800d834:	2300      	movs	r3, #0
 800d836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d83a:	f7ff fe51 	bl	800d4e0 <__multadd>
 800d83e:	4607      	mov	r7, r0
 800d840:	10ad      	asrs	r5, r5, #2
 800d842:	d03d      	beq.n	800d8c0 <__pow5mult+0xa0>
 800d844:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d846:	b97c      	cbnz	r4, 800d868 <__pow5mult+0x48>
 800d848:	2010      	movs	r0, #16
 800d84a:	f7ff fdcd 	bl	800d3e8 <malloc>
 800d84e:	4602      	mov	r2, r0
 800d850:	6270      	str	r0, [r6, #36]	; 0x24
 800d852:	b928      	cbnz	r0, 800d860 <__pow5mult+0x40>
 800d854:	4b1d      	ldr	r3, [pc, #116]	; (800d8cc <__pow5mult+0xac>)
 800d856:	481e      	ldr	r0, [pc, #120]	; (800d8d0 <__pow5mult+0xb0>)
 800d858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d85c:	f000 fed6 	bl	800e60c <__assert_func>
 800d860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d864:	6004      	str	r4, [r0, #0]
 800d866:	60c4      	str	r4, [r0, #12]
 800d868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d870:	b94c      	cbnz	r4, 800d886 <__pow5mult+0x66>
 800d872:	f240 2171 	movw	r1, #625	; 0x271
 800d876:	4630      	mov	r0, r6
 800d878:	f7ff ff12 	bl	800d6a0 <__i2b>
 800d87c:	2300      	movs	r3, #0
 800d87e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d882:	4604      	mov	r4, r0
 800d884:	6003      	str	r3, [r0, #0]
 800d886:	f04f 0900 	mov.w	r9, #0
 800d88a:	07eb      	lsls	r3, r5, #31
 800d88c:	d50a      	bpl.n	800d8a4 <__pow5mult+0x84>
 800d88e:	4639      	mov	r1, r7
 800d890:	4622      	mov	r2, r4
 800d892:	4630      	mov	r0, r6
 800d894:	f7ff ff1a 	bl	800d6cc <__multiply>
 800d898:	4639      	mov	r1, r7
 800d89a:	4680      	mov	r8, r0
 800d89c:	4630      	mov	r0, r6
 800d89e:	f7ff fdfd 	bl	800d49c <_Bfree>
 800d8a2:	4647      	mov	r7, r8
 800d8a4:	106d      	asrs	r5, r5, #1
 800d8a6:	d00b      	beq.n	800d8c0 <__pow5mult+0xa0>
 800d8a8:	6820      	ldr	r0, [r4, #0]
 800d8aa:	b938      	cbnz	r0, 800d8bc <__pow5mult+0x9c>
 800d8ac:	4622      	mov	r2, r4
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7ff ff0b 	bl	800d6cc <__multiply>
 800d8b6:	6020      	str	r0, [r4, #0]
 800d8b8:	f8c0 9000 	str.w	r9, [r0]
 800d8bc:	4604      	mov	r4, r0
 800d8be:	e7e4      	b.n	800d88a <__pow5mult+0x6a>
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	bf00      	nop
 800d8c8:	0800f7c8 	.word	0x0800f7c8
 800d8cc:	0800f516 	.word	0x0800f516
 800d8d0:	0800f678 	.word	0x0800f678

0800d8d4 <__lshift>:
 800d8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d8:	460c      	mov	r4, r1
 800d8da:	6849      	ldr	r1, [r1, #4]
 800d8dc:	6923      	ldr	r3, [r4, #16]
 800d8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8e2:	68a3      	ldr	r3, [r4, #8]
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	4691      	mov	r9, r2
 800d8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8ec:	f108 0601 	add.w	r6, r8, #1
 800d8f0:	42b3      	cmp	r3, r6
 800d8f2:	db0b      	blt.n	800d90c <__lshift+0x38>
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	f7ff fd91 	bl	800d41c <_Balloc>
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	b948      	cbnz	r0, 800d912 <__lshift+0x3e>
 800d8fe:	4602      	mov	r2, r0
 800d900:	4b2a      	ldr	r3, [pc, #168]	; (800d9ac <__lshift+0xd8>)
 800d902:	482b      	ldr	r0, [pc, #172]	; (800d9b0 <__lshift+0xdc>)
 800d904:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d908:	f000 fe80 	bl	800e60c <__assert_func>
 800d90c:	3101      	adds	r1, #1
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	e7ee      	b.n	800d8f0 <__lshift+0x1c>
 800d912:	2300      	movs	r3, #0
 800d914:	f100 0114 	add.w	r1, r0, #20
 800d918:	f100 0210 	add.w	r2, r0, #16
 800d91c:	4618      	mov	r0, r3
 800d91e:	4553      	cmp	r3, sl
 800d920:	db37      	blt.n	800d992 <__lshift+0xbe>
 800d922:	6920      	ldr	r0, [r4, #16]
 800d924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d928:	f104 0314 	add.w	r3, r4, #20
 800d92c:	f019 091f 	ands.w	r9, r9, #31
 800d930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d938:	d02f      	beq.n	800d99a <__lshift+0xc6>
 800d93a:	f1c9 0e20 	rsb	lr, r9, #32
 800d93e:	468a      	mov	sl, r1
 800d940:	f04f 0c00 	mov.w	ip, #0
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	fa02 f209 	lsl.w	r2, r2, r9
 800d94a:	ea42 020c 	orr.w	r2, r2, ip
 800d94e:	f84a 2b04 	str.w	r2, [sl], #4
 800d952:	f853 2b04 	ldr.w	r2, [r3], #4
 800d956:	4298      	cmp	r0, r3
 800d958:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d95c:	d8f2      	bhi.n	800d944 <__lshift+0x70>
 800d95e:	1b03      	subs	r3, r0, r4
 800d960:	3b15      	subs	r3, #21
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	3304      	adds	r3, #4
 800d968:	f104 0215 	add.w	r2, r4, #21
 800d96c:	4290      	cmp	r0, r2
 800d96e:	bf38      	it	cc
 800d970:	2304      	movcc	r3, #4
 800d972:	f841 c003 	str.w	ip, [r1, r3]
 800d976:	f1bc 0f00 	cmp.w	ip, #0
 800d97a:	d001      	beq.n	800d980 <__lshift+0xac>
 800d97c:	f108 0602 	add.w	r6, r8, #2
 800d980:	3e01      	subs	r6, #1
 800d982:	4638      	mov	r0, r7
 800d984:	612e      	str	r6, [r5, #16]
 800d986:	4621      	mov	r1, r4
 800d988:	f7ff fd88 	bl	800d49c <_Bfree>
 800d98c:	4628      	mov	r0, r5
 800d98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d992:	f842 0f04 	str.w	r0, [r2, #4]!
 800d996:	3301      	adds	r3, #1
 800d998:	e7c1      	b.n	800d91e <__lshift+0x4a>
 800d99a:	3904      	subs	r1, #4
 800d99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9a4:	4298      	cmp	r0, r3
 800d9a6:	d8f9      	bhi.n	800d99c <__lshift+0xc8>
 800d9a8:	e7ea      	b.n	800d980 <__lshift+0xac>
 800d9aa:	bf00      	nop
 800d9ac:	0800f588 	.word	0x0800f588
 800d9b0:	0800f678 	.word	0x0800f678

0800d9b4 <__mcmp>:
 800d9b4:	b530      	push	{r4, r5, lr}
 800d9b6:	6902      	ldr	r2, [r0, #16]
 800d9b8:	690c      	ldr	r4, [r1, #16]
 800d9ba:	1b12      	subs	r2, r2, r4
 800d9bc:	d10e      	bne.n	800d9dc <__mcmp+0x28>
 800d9be:	f100 0314 	add.w	r3, r0, #20
 800d9c2:	3114      	adds	r1, #20
 800d9c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9d4:	42a5      	cmp	r5, r4
 800d9d6:	d003      	beq.n	800d9e0 <__mcmp+0x2c>
 800d9d8:	d305      	bcc.n	800d9e6 <__mcmp+0x32>
 800d9da:	2201      	movs	r2, #1
 800d9dc:	4610      	mov	r0, r2
 800d9de:	bd30      	pop	{r4, r5, pc}
 800d9e0:	4283      	cmp	r3, r0
 800d9e2:	d3f3      	bcc.n	800d9cc <__mcmp+0x18>
 800d9e4:	e7fa      	b.n	800d9dc <__mcmp+0x28>
 800d9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ea:	e7f7      	b.n	800d9dc <__mcmp+0x28>

0800d9ec <__mdiff>:
 800d9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	4690      	mov	r8, r2
 800d9fa:	f7ff ffdb 	bl	800d9b4 <__mcmp>
 800d9fe:	1e05      	subs	r5, r0, #0
 800da00:	d110      	bne.n	800da24 <__mdiff+0x38>
 800da02:	4629      	mov	r1, r5
 800da04:	4630      	mov	r0, r6
 800da06:	f7ff fd09 	bl	800d41c <_Balloc>
 800da0a:	b930      	cbnz	r0, 800da1a <__mdiff+0x2e>
 800da0c:	4b3a      	ldr	r3, [pc, #232]	; (800daf8 <__mdiff+0x10c>)
 800da0e:	4602      	mov	r2, r0
 800da10:	f240 2132 	movw	r1, #562	; 0x232
 800da14:	4839      	ldr	r0, [pc, #228]	; (800dafc <__mdiff+0x110>)
 800da16:	f000 fdf9 	bl	800e60c <__assert_func>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da24:	bfa4      	itt	ge
 800da26:	4643      	movge	r3, r8
 800da28:	46a0      	movge	r8, r4
 800da2a:	4630      	mov	r0, r6
 800da2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da30:	bfa6      	itte	ge
 800da32:	461c      	movge	r4, r3
 800da34:	2500      	movge	r5, #0
 800da36:	2501      	movlt	r5, #1
 800da38:	f7ff fcf0 	bl	800d41c <_Balloc>
 800da3c:	b920      	cbnz	r0, 800da48 <__mdiff+0x5c>
 800da3e:	4b2e      	ldr	r3, [pc, #184]	; (800daf8 <__mdiff+0x10c>)
 800da40:	4602      	mov	r2, r0
 800da42:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da46:	e7e5      	b.n	800da14 <__mdiff+0x28>
 800da48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da4c:	6926      	ldr	r6, [r4, #16]
 800da4e:	60c5      	str	r5, [r0, #12]
 800da50:	f104 0914 	add.w	r9, r4, #20
 800da54:	f108 0514 	add.w	r5, r8, #20
 800da58:	f100 0e14 	add.w	lr, r0, #20
 800da5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da64:	f108 0210 	add.w	r2, r8, #16
 800da68:	46f2      	mov	sl, lr
 800da6a:	2100      	movs	r1, #0
 800da6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800da70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da74:	fa1f f883 	uxth.w	r8, r3
 800da78:	fa11 f18b 	uxtah	r1, r1, fp
 800da7c:	0c1b      	lsrs	r3, r3, #16
 800da7e:	eba1 0808 	sub.w	r8, r1, r8
 800da82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da8a:	fa1f f888 	uxth.w	r8, r8
 800da8e:	1419      	asrs	r1, r3, #16
 800da90:	454e      	cmp	r6, r9
 800da92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da96:	f84a 3b04 	str.w	r3, [sl], #4
 800da9a:	d8e7      	bhi.n	800da6c <__mdiff+0x80>
 800da9c:	1b33      	subs	r3, r6, r4
 800da9e:	3b15      	subs	r3, #21
 800daa0:	f023 0303 	bic.w	r3, r3, #3
 800daa4:	3304      	adds	r3, #4
 800daa6:	3415      	adds	r4, #21
 800daa8:	42a6      	cmp	r6, r4
 800daaa:	bf38      	it	cc
 800daac:	2304      	movcc	r3, #4
 800daae:	441d      	add	r5, r3
 800dab0:	4473      	add	r3, lr
 800dab2:	469e      	mov	lr, r3
 800dab4:	462e      	mov	r6, r5
 800dab6:	4566      	cmp	r6, ip
 800dab8:	d30e      	bcc.n	800dad8 <__mdiff+0xec>
 800daba:	f10c 0203 	add.w	r2, ip, #3
 800dabe:	1b52      	subs	r2, r2, r5
 800dac0:	f022 0203 	bic.w	r2, r2, #3
 800dac4:	3d03      	subs	r5, #3
 800dac6:	45ac      	cmp	ip, r5
 800dac8:	bf38      	it	cc
 800daca:	2200      	movcc	r2, #0
 800dacc:	441a      	add	r2, r3
 800dace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dad2:	b17b      	cbz	r3, 800daf4 <__mdiff+0x108>
 800dad4:	6107      	str	r7, [r0, #16]
 800dad6:	e7a3      	b.n	800da20 <__mdiff+0x34>
 800dad8:	f856 8b04 	ldr.w	r8, [r6], #4
 800dadc:	fa11 f288 	uxtah	r2, r1, r8
 800dae0:	1414      	asrs	r4, r2, #16
 800dae2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dae6:	b292      	uxth	r2, r2
 800dae8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800daec:	f84e 2b04 	str.w	r2, [lr], #4
 800daf0:	1421      	asrs	r1, r4, #16
 800daf2:	e7e0      	b.n	800dab6 <__mdiff+0xca>
 800daf4:	3f01      	subs	r7, #1
 800daf6:	e7ea      	b.n	800dace <__mdiff+0xe2>
 800daf8:	0800f588 	.word	0x0800f588
 800dafc:	0800f678 	.word	0x0800f678

0800db00 <__ulp>:
 800db00:	b082      	sub	sp, #8
 800db02:	ed8d 0b00 	vstr	d0, [sp]
 800db06:	9b01      	ldr	r3, [sp, #4]
 800db08:	4912      	ldr	r1, [pc, #72]	; (800db54 <__ulp+0x54>)
 800db0a:	4019      	ands	r1, r3
 800db0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db10:	2900      	cmp	r1, #0
 800db12:	dd05      	ble.n	800db20 <__ulp+0x20>
 800db14:	2200      	movs	r2, #0
 800db16:	460b      	mov	r3, r1
 800db18:	ec43 2b10 	vmov	d0, r2, r3
 800db1c:	b002      	add	sp, #8
 800db1e:	4770      	bx	lr
 800db20:	4249      	negs	r1, r1
 800db22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db2a:	f04f 0200 	mov.w	r2, #0
 800db2e:	f04f 0300 	mov.w	r3, #0
 800db32:	da04      	bge.n	800db3e <__ulp+0x3e>
 800db34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800db38:	fa41 f300 	asr.w	r3, r1, r0
 800db3c:	e7ec      	b.n	800db18 <__ulp+0x18>
 800db3e:	f1a0 0114 	sub.w	r1, r0, #20
 800db42:	291e      	cmp	r1, #30
 800db44:	bfda      	itte	le
 800db46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800db4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800db4e:	2101      	movgt	r1, #1
 800db50:	460a      	mov	r2, r1
 800db52:	e7e1      	b.n	800db18 <__ulp+0x18>
 800db54:	7ff00000 	.word	0x7ff00000

0800db58 <__b2d>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	6905      	ldr	r5, [r0, #16]
 800db5c:	f100 0714 	add.w	r7, r0, #20
 800db60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800db64:	1f2e      	subs	r6, r5, #4
 800db66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800db6a:	4620      	mov	r0, r4
 800db6c:	f7ff fd48 	bl	800d600 <__hi0bits>
 800db70:	f1c0 0320 	rsb	r3, r0, #32
 800db74:	280a      	cmp	r0, #10
 800db76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dbf4 <__b2d+0x9c>
 800db7a:	600b      	str	r3, [r1, #0]
 800db7c:	dc14      	bgt.n	800dba8 <__b2d+0x50>
 800db7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800db82:	fa24 f10e 	lsr.w	r1, r4, lr
 800db86:	42b7      	cmp	r7, r6
 800db88:	ea41 030c 	orr.w	r3, r1, ip
 800db8c:	bf34      	ite	cc
 800db8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db92:	2100      	movcs	r1, #0
 800db94:	3015      	adds	r0, #21
 800db96:	fa04 f000 	lsl.w	r0, r4, r0
 800db9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800db9e:	ea40 0201 	orr.w	r2, r0, r1
 800dba2:	ec43 2b10 	vmov	d0, r2, r3
 800dba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba8:	42b7      	cmp	r7, r6
 800dbaa:	bf3a      	itte	cc
 800dbac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dbb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800dbb4:	2100      	movcs	r1, #0
 800dbb6:	380b      	subs	r0, #11
 800dbb8:	d017      	beq.n	800dbea <__b2d+0x92>
 800dbba:	f1c0 0c20 	rsb	ip, r0, #32
 800dbbe:	fa04 f500 	lsl.w	r5, r4, r0
 800dbc2:	42be      	cmp	r6, r7
 800dbc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800dbc8:	ea45 0504 	orr.w	r5, r5, r4
 800dbcc:	bf8c      	ite	hi
 800dbce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dbd2:	2400      	movls	r4, #0
 800dbd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dbd8:	fa01 f000 	lsl.w	r0, r1, r0
 800dbdc:	fa24 f40c 	lsr.w	r4, r4, ip
 800dbe0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dbe4:	ea40 0204 	orr.w	r2, r0, r4
 800dbe8:	e7db      	b.n	800dba2 <__b2d+0x4a>
 800dbea:	ea44 030c 	orr.w	r3, r4, ip
 800dbee:	460a      	mov	r2, r1
 800dbf0:	e7d7      	b.n	800dba2 <__b2d+0x4a>
 800dbf2:	bf00      	nop
 800dbf4:	3ff00000 	.word	0x3ff00000

0800dbf8 <__d2b>:
 800dbf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	4689      	mov	r9, r1
 800dbfe:	2101      	movs	r1, #1
 800dc00:	ec57 6b10 	vmov	r6, r7, d0
 800dc04:	4690      	mov	r8, r2
 800dc06:	f7ff fc09 	bl	800d41c <_Balloc>
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	b930      	cbnz	r0, 800dc1c <__d2b+0x24>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	4b25      	ldr	r3, [pc, #148]	; (800dca8 <__d2b+0xb0>)
 800dc12:	4826      	ldr	r0, [pc, #152]	; (800dcac <__d2b+0xb4>)
 800dc14:	f240 310a 	movw	r1, #778	; 0x30a
 800dc18:	f000 fcf8 	bl	800e60c <__assert_func>
 800dc1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc24:	bb35      	cbnz	r5, 800dc74 <__d2b+0x7c>
 800dc26:	2e00      	cmp	r6, #0
 800dc28:	9301      	str	r3, [sp, #4]
 800dc2a:	d028      	beq.n	800dc7e <__d2b+0x86>
 800dc2c:	4668      	mov	r0, sp
 800dc2e:	9600      	str	r6, [sp, #0]
 800dc30:	f7ff fd06 	bl	800d640 <__lo0bits>
 800dc34:	9900      	ldr	r1, [sp, #0]
 800dc36:	b300      	cbz	r0, 800dc7a <__d2b+0x82>
 800dc38:	9a01      	ldr	r2, [sp, #4]
 800dc3a:	f1c0 0320 	rsb	r3, r0, #32
 800dc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc42:	430b      	orrs	r3, r1
 800dc44:	40c2      	lsrs	r2, r0
 800dc46:	6163      	str	r3, [r4, #20]
 800dc48:	9201      	str	r2, [sp, #4]
 800dc4a:	9b01      	ldr	r3, [sp, #4]
 800dc4c:	61a3      	str	r3, [r4, #24]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bf14      	ite	ne
 800dc52:	2202      	movne	r2, #2
 800dc54:	2201      	moveq	r2, #1
 800dc56:	6122      	str	r2, [r4, #16]
 800dc58:	b1d5      	cbz	r5, 800dc90 <__d2b+0x98>
 800dc5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc5e:	4405      	add	r5, r0
 800dc60:	f8c9 5000 	str.w	r5, [r9]
 800dc64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc68:	f8c8 0000 	str.w	r0, [r8]
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	b003      	add	sp, #12
 800dc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc78:	e7d5      	b.n	800dc26 <__d2b+0x2e>
 800dc7a:	6161      	str	r1, [r4, #20]
 800dc7c:	e7e5      	b.n	800dc4a <__d2b+0x52>
 800dc7e:	a801      	add	r0, sp, #4
 800dc80:	f7ff fcde 	bl	800d640 <__lo0bits>
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	6163      	str	r3, [r4, #20]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	6122      	str	r2, [r4, #16]
 800dc8c:	3020      	adds	r0, #32
 800dc8e:	e7e3      	b.n	800dc58 <__d2b+0x60>
 800dc90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc98:	f8c9 0000 	str.w	r0, [r9]
 800dc9c:	6918      	ldr	r0, [r3, #16]
 800dc9e:	f7ff fcaf 	bl	800d600 <__hi0bits>
 800dca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dca6:	e7df      	b.n	800dc68 <__d2b+0x70>
 800dca8:	0800f588 	.word	0x0800f588
 800dcac:	0800f678 	.word	0x0800f678

0800dcb0 <__ratio>:
 800dcb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	4688      	mov	r8, r1
 800dcb6:	4669      	mov	r1, sp
 800dcb8:	4681      	mov	r9, r0
 800dcba:	f7ff ff4d 	bl	800db58 <__b2d>
 800dcbe:	a901      	add	r1, sp, #4
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	ec55 4b10 	vmov	r4, r5, d0
 800dcc6:	ee10 aa10 	vmov	sl, s0
 800dcca:	f7ff ff45 	bl	800db58 <__b2d>
 800dcce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcd6:	1a59      	subs	r1, r3, r1
 800dcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dce2:	ec57 6b10 	vmov	r6, r7, d0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bfd6      	itet	le
 800dcea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dcee:	462a      	movgt	r2, r5
 800dcf0:	463a      	movle	r2, r7
 800dcf2:	46ab      	mov	fp, r5
 800dcf4:	bfd6      	itet	le
 800dcf6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800dcfa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dcfe:	ee00 3a90 	vmovle	s1, r3
 800dd02:	ec4b ab17 	vmov	d7, sl, fp
 800dd06:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800dd0a:	b003      	add	sp, #12
 800dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd10 <__copybits>:
 800dd10:	3901      	subs	r1, #1
 800dd12:	b570      	push	{r4, r5, r6, lr}
 800dd14:	1149      	asrs	r1, r1, #5
 800dd16:	6914      	ldr	r4, [r2, #16]
 800dd18:	3101      	adds	r1, #1
 800dd1a:	f102 0314 	add.w	r3, r2, #20
 800dd1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd26:	1f05      	subs	r5, r0, #4
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	d30c      	bcc.n	800dd46 <__copybits+0x36>
 800dd2c:	1aa3      	subs	r3, r4, r2
 800dd2e:	3b11      	subs	r3, #17
 800dd30:	f023 0303 	bic.w	r3, r3, #3
 800dd34:	3211      	adds	r2, #17
 800dd36:	42a2      	cmp	r2, r4
 800dd38:	bf88      	it	hi
 800dd3a:	2300      	movhi	r3, #0
 800dd3c:	4418      	add	r0, r3
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4288      	cmp	r0, r1
 800dd42:	d305      	bcc.n	800dd50 <__copybits+0x40>
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd4a:	f845 6f04 	str.w	r6, [r5, #4]!
 800dd4e:	e7eb      	b.n	800dd28 <__copybits+0x18>
 800dd50:	f840 3b04 	str.w	r3, [r0], #4
 800dd54:	e7f4      	b.n	800dd40 <__copybits+0x30>

0800dd56 <__any_on>:
 800dd56:	f100 0214 	add.w	r2, r0, #20
 800dd5a:	6900      	ldr	r0, [r0, #16]
 800dd5c:	114b      	asrs	r3, r1, #5
 800dd5e:	4298      	cmp	r0, r3
 800dd60:	b510      	push	{r4, lr}
 800dd62:	db11      	blt.n	800dd88 <__any_on+0x32>
 800dd64:	dd0a      	ble.n	800dd7c <__any_on+0x26>
 800dd66:	f011 011f 	ands.w	r1, r1, #31
 800dd6a:	d007      	beq.n	800dd7c <__any_on+0x26>
 800dd6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dd70:	fa24 f001 	lsr.w	r0, r4, r1
 800dd74:	fa00 f101 	lsl.w	r1, r0, r1
 800dd78:	428c      	cmp	r4, r1
 800dd7a:	d10b      	bne.n	800dd94 <__any_on+0x3e>
 800dd7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d803      	bhi.n	800dd8c <__any_on+0x36>
 800dd84:	2000      	movs	r0, #0
 800dd86:	bd10      	pop	{r4, pc}
 800dd88:	4603      	mov	r3, r0
 800dd8a:	e7f7      	b.n	800dd7c <__any_on+0x26>
 800dd8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd90:	2900      	cmp	r1, #0
 800dd92:	d0f5      	beq.n	800dd80 <__any_on+0x2a>
 800dd94:	2001      	movs	r0, #1
 800dd96:	e7f6      	b.n	800dd86 <__any_on+0x30>

0800dd98 <_calloc_r>:
 800dd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd9a:	fba1 2402 	umull	r2, r4, r1, r2
 800dd9e:	b94c      	cbnz	r4, 800ddb4 <_calloc_r+0x1c>
 800dda0:	4611      	mov	r1, r2
 800dda2:	9201      	str	r2, [sp, #4]
 800dda4:	f000 f87a 	bl	800de9c <_malloc_r>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	4605      	mov	r5, r0
 800ddac:	b930      	cbnz	r0, 800ddbc <_calloc_r+0x24>
 800ddae:	4628      	mov	r0, r5
 800ddb0:	b003      	add	sp, #12
 800ddb2:	bd30      	pop	{r4, r5, pc}
 800ddb4:	220c      	movs	r2, #12
 800ddb6:	6002      	str	r2, [r0, #0]
 800ddb8:	2500      	movs	r5, #0
 800ddba:	e7f8      	b.n	800ddae <_calloc_r+0x16>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f7fc f931 	bl	800a024 <memset>
 800ddc2:	e7f4      	b.n	800ddae <_calloc_r+0x16>

0800ddc4 <_free_r>:
 800ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d044      	beq.n	800de54 <_free_r+0x90>
 800ddca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddce:	9001      	str	r0, [sp, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f1a1 0404 	sub.w	r4, r1, #4
 800ddd6:	bfb8      	it	lt
 800ddd8:	18e4      	addlt	r4, r4, r3
 800ddda:	f000 fca5 	bl	800e728 <__malloc_lock>
 800ddde:	4a1e      	ldr	r2, [pc, #120]	; (800de58 <_free_r+0x94>)
 800dde0:	9801      	ldr	r0, [sp, #4]
 800dde2:	6813      	ldr	r3, [r2, #0]
 800dde4:	b933      	cbnz	r3, 800ddf4 <_free_r+0x30>
 800dde6:	6063      	str	r3, [r4, #4]
 800dde8:	6014      	str	r4, [r2, #0]
 800ddea:	b003      	add	sp, #12
 800ddec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddf0:	f000 bca0 	b.w	800e734 <__malloc_unlock>
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	d908      	bls.n	800de0a <_free_r+0x46>
 800ddf8:	6825      	ldr	r5, [r4, #0]
 800ddfa:	1961      	adds	r1, r4, r5
 800ddfc:	428b      	cmp	r3, r1
 800ddfe:	bf01      	itttt	eq
 800de00:	6819      	ldreq	r1, [r3, #0]
 800de02:	685b      	ldreq	r3, [r3, #4]
 800de04:	1949      	addeq	r1, r1, r5
 800de06:	6021      	streq	r1, [r4, #0]
 800de08:	e7ed      	b.n	800dde6 <_free_r+0x22>
 800de0a:	461a      	mov	r2, r3
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	b10b      	cbz	r3, 800de14 <_free_r+0x50>
 800de10:	42a3      	cmp	r3, r4
 800de12:	d9fa      	bls.n	800de0a <_free_r+0x46>
 800de14:	6811      	ldr	r1, [r2, #0]
 800de16:	1855      	adds	r5, r2, r1
 800de18:	42a5      	cmp	r5, r4
 800de1a:	d10b      	bne.n	800de34 <_free_r+0x70>
 800de1c:	6824      	ldr	r4, [r4, #0]
 800de1e:	4421      	add	r1, r4
 800de20:	1854      	adds	r4, r2, r1
 800de22:	42a3      	cmp	r3, r4
 800de24:	6011      	str	r1, [r2, #0]
 800de26:	d1e0      	bne.n	800ddea <_free_r+0x26>
 800de28:	681c      	ldr	r4, [r3, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	6053      	str	r3, [r2, #4]
 800de2e:	4421      	add	r1, r4
 800de30:	6011      	str	r1, [r2, #0]
 800de32:	e7da      	b.n	800ddea <_free_r+0x26>
 800de34:	d902      	bls.n	800de3c <_free_r+0x78>
 800de36:	230c      	movs	r3, #12
 800de38:	6003      	str	r3, [r0, #0]
 800de3a:	e7d6      	b.n	800ddea <_free_r+0x26>
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1961      	adds	r1, r4, r5
 800de40:	428b      	cmp	r3, r1
 800de42:	bf04      	itt	eq
 800de44:	6819      	ldreq	r1, [r3, #0]
 800de46:	685b      	ldreq	r3, [r3, #4]
 800de48:	6063      	str	r3, [r4, #4]
 800de4a:	bf04      	itt	eq
 800de4c:	1949      	addeq	r1, r1, r5
 800de4e:	6021      	streq	r1, [r4, #0]
 800de50:	6054      	str	r4, [r2, #4]
 800de52:	e7ca      	b.n	800ddea <_free_r+0x26>
 800de54:	b003      	add	sp, #12
 800de56:	bd30      	pop	{r4, r5, pc}
 800de58:	24000688 	.word	0x24000688

0800de5c <sbrk_aligned>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4e0e      	ldr	r6, [pc, #56]	; (800de98 <sbrk_aligned+0x3c>)
 800de60:	460c      	mov	r4, r1
 800de62:	6831      	ldr	r1, [r6, #0]
 800de64:	4605      	mov	r5, r0
 800de66:	b911      	cbnz	r1, 800de6e <sbrk_aligned+0x12>
 800de68:	f000 fb4a 	bl	800e500 <_sbrk_r>
 800de6c:	6030      	str	r0, [r6, #0]
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	f000 fb45 	bl	800e500 <_sbrk_r>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d00a      	beq.n	800de90 <sbrk_aligned+0x34>
 800de7a:	1cc4      	adds	r4, r0, #3
 800de7c:	f024 0403 	bic.w	r4, r4, #3
 800de80:	42a0      	cmp	r0, r4
 800de82:	d007      	beq.n	800de94 <sbrk_aligned+0x38>
 800de84:	1a21      	subs	r1, r4, r0
 800de86:	4628      	mov	r0, r5
 800de88:	f000 fb3a 	bl	800e500 <_sbrk_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	d101      	bne.n	800de94 <sbrk_aligned+0x38>
 800de90:	f04f 34ff 	mov.w	r4, #4294967295
 800de94:	4620      	mov	r0, r4
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	2400068c 	.word	0x2400068c

0800de9c <_malloc_r>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	1ccd      	adds	r5, r1, #3
 800dea2:	f025 0503 	bic.w	r5, r5, #3
 800dea6:	3508      	adds	r5, #8
 800dea8:	2d0c      	cmp	r5, #12
 800deaa:	bf38      	it	cc
 800deac:	250c      	movcc	r5, #12
 800deae:	2d00      	cmp	r5, #0
 800deb0:	4607      	mov	r7, r0
 800deb2:	db01      	blt.n	800deb8 <_malloc_r+0x1c>
 800deb4:	42a9      	cmp	r1, r5
 800deb6:	d905      	bls.n	800dec4 <_malloc_r+0x28>
 800deb8:	230c      	movs	r3, #12
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	2600      	movs	r6, #0
 800debe:	4630      	mov	r0, r6
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	4e2e      	ldr	r6, [pc, #184]	; (800df80 <_malloc_r+0xe4>)
 800dec6:	f000 fc2f 	bl	800e728 <__malloc_lock>
 800deca:	6833      	ldr	r3, [r6, #0]
 800decc:	461c      	mov	r4, r3
 800dece:	bb34      	cbnz	r4, 800df1e <_malloc_r+0x82>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7ff ffc2 	bl	800de5c <sbrk_aligned>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	4604      	mov	r4, r0
 800dedc:	d14d      	bne.n	800df7a <_malloc_r+0xde>
 800dede:	6834      	ldr	r4, [r6, #0]
 800dee0:	4626      	mov	r6, r4
 800dee2:	2e00      	cmp	r6, #0
 800dee4:	d140      	bne.n	800df68 <_malloc_r+0xcc>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	4631      	mov	r1, r6
 800deea:	4638      	mov	r0, r7
 800deec:	eb04 0803 	add.w	r8, r4, r3
 800def0:	f000 fb06 	bl	800e500 <_sbrk_r>
 800def4:	4580      	cmp	r8, r0
 800def6:	d13a      	bne.n	800df6e <_malloc_r+0xd2>
 800def8:	6821      	ldr	r1, [r4, #0]
 800defa:	3503      	adds	r5, #3
 800defc:	1a6d      	subs	r5, r5, r1
 800defe:	f025 0503 	bic.w	r5, r5, #3
 800df02:	3508      	adds	r5, #8
 800df04:	2d0c      	cmp	r5, #12
 800df06:	bf38      	it	cc
 800df08:	250c      	movcc	r5, #12
 800df0a:	4629      	mov	r1, r5
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff ffa5 	bl	800de5c <sbrk_aligned>
 800df12:	3001      	adds	r0, #1
 800df14:	d02b      	beq.n	800df6e <_malloc_r+0xd2>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	442b      	add	r3, r5
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	e00e      	b.n	800df3c <_malloc_r+0xa0>
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	1b52      	subs	r2, r2, r5
 800df22:	d41e      	bmi.n	800df62 <_malloc_r+0xc6>
 800df24:	2a0b      	cmp	r2, #11
 800df26:	d916      	bls.n	800df56 <_malloc_r+0xba>
 800df28:	1961      	adds	r1, r4, r5
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	6025      	str	r5, [r4, #0]
 800df2e:	bf18      	it	ne
 800df30:	6059      	strne	r1, [r3, #4]
 800df32:	6863      	ldr	r3, [r4, #4]
 800df34:	bf08      	it	eq
 800df36:	6031      	streq	r1, [r6, #0]
 800df38:	5162      	str	r2, [r4, r5]
 800df3a:	604b      	str	r3, [r1, #4]
 800df3c:	4638      	mov	r0, r7
 800df3e:	f104 060b 	add.w	r6, r4, #11
 800df42:	f000 fbf7 	bl	800e734 <__malloc_unlock>
 800df46:	f026 0607 	bic.w	r6, r6, #7
 800df4a:	1d23      	adds	r3, r4, #4
 800df4c:	1af2      	subs	r2, r6, r3
 800df4e:	d0b6      	beq.n	800debe <_malloc_r+0x22>
 800df50:	1b9b      	subs	r3, r3, r6
 800df52:	50a3      	str	r3, [r4, r2]
 800df54:	e7b3      	b.n	800debe <_malloc_r+0x22>
 800df56:	6862      	ldr	r2, [r4, #4]
 800df58:	42a3      	cmp	r3, r4
 800df5a:	bf0c      	ite	eq
 800df5c:	6032      	streq	r2, [r6, #0]
 800df5e:	605a      	strne	r2, [r3, #4]
 800df60:	e7ec      	b.n	800df3c <_malloc_r+0xa0>
 800df62:	4623      	mov	r3, r4
 800df64:	6864      	ldr	r4, [r4, #4]
 800df66:	e7b2      	b.n	800dece <_malloc_r+0x32>
 800df68:	4634      	mov	r4, r6
 800df6a:	6876      	ldr	r6, [r6, #4]
 800df6c:	e7b9      	b.n	800dee2 <_malloc_r+0x46>
 800df6e:	230c      	movs	r3, #12
 800df70:	603b      	str	r3, [r7, #0]
 800df72:	4638      	mov	r0, r7
 800df74:	f000 fbde 	bl	800e734 <__malloc_unlock>
 800df78:	e7a1      	b.n	800debe <_malloc_r+0x22>
 800df7a:	6025      	str	r5, [r4, #0]
 800df7c:	e7de      	b.n	800df3c <_malloc_r+0xa0>
 800df7e:	bf00      	nop
 800df80:	24000688 	.word	0x24000688

0800df84 <__ssputs_r>:
 800df84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	688e      	ldr	r6, [r1, #8]
 800df8a:	429e      	cmp	r6, r3
 800df8c:	4682      	mov	sl, r0
 800df8e:	460c      	mov	r4, r1
 800df90:	4690      	mov	r8, r2
 800df92:	461f      	mov	r7, r3
 800df94:	d838      	bhi.n	800e008 <__ssputs_r+0x84>
 800df96:	898a      	ldrh	r2, [r1, #12]
 800df98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df9c:	d032      	beq.n	800e004 <__ssputs_r+0x80>
 800df9e:	6825      	ldr	r5, [r4, #0]
 800dfa0:	6909      	ldr	r1, [r1, #16]
 800dfa2:	eba5 0901 	sub.w	r9, r5, r1
 800dfa6:	6965      	ldr	r5, [r4, #20]
 800dfa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	444b      	add	r3, r9
 800dfb4:	106d      	asrs	r5, r5, #1
 800dfb6:	429d      	cmp	r5, r3
 800dfb8:	bf38      	it	cc
 800dfba:	461d      	movcc	r5, r3
 800dfbc:	0553      	lsls	r3, r2, #21
 800dfbe:	d531      	bpl.n	800e024 <__ssputs_r+0xa0>
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7ff ff6b 	bl	800de9c <_malloc_r>
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	b950      	cbnz	r0, 800dfe0 <__ssputs_r+0x5c>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	f8ca 3000 	str.w	r3, [sl]
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd6:	81a3      	strh	r3, [r4, #12]
 800dfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe0:	6921      	ldr	r1, [r4, #16]
 800dfe2:	464a      	mov	r2, r9
 800dfe4:	f7fc f810 	bl	800a008 <memcpy>
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	6126      	str	r6, [r4, #16]
 800dff6:	6165      	str	r5, [r4, #20]
 800dff8:	444e      	add	r6, r9
 800dffa:	eba5 0509 	sub.w	r5, r5, r9
 800dffe:	6026      	str	r6, [r4, #0]
 800e000:	60a5      	str	r5, [r4, #8]
 800e002:	463e      	mov	r6, r7
 800e004:	42be      	cmp	r6, r7
 800e006:	d900      	bls.n	800e00a <__ssputs_r+0x86>
 800e008:	463e      	mov	r6, r7
 800e00a:	6820      	ldr	r0, [r4, #0]
 800e00c:	4632      	mov	r2, r6
 800e00e:	4641      	mov	r1, r8
 800e010:	f000 fb70 	bl	800e6f4 <memmove>
 800e014:	68a3      	ldr	r3, [r4, #8]
 800e016:	1b9b      	subs	r3, r3, r6
 800e018:	60a3      	str	r3, [r4, #8]
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	4433      	add	r3, r6
 800e01e:	6023      	str	r3, [r4, #0]
 800e020:	2000      	movs	r0, #0
 800e022:	e7db      	b.n	800dfdc <__ssputs_r+0x58>
 800e024:	462a      	mov	r2, r5
 800e026:	f000 fb8b 	bl	800e740 <_realloc_r>
 800e02a:	4606      	mov	r6, r0
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d1e1      	bne.n	800dff4 <__ssputs_r+0x70>
 800e030:	6921      	ldr	r1, [r4, #16]
 800e032:	4650      	mov	r0, sl
 800e034:	f7ff fec6 	bl	800ddc4 <_free_r>
 800e038:	e7c7      	b.n	800dfca <__ssputs_r+0x46>
	...

0800e03c <_svfiprintf_r>:
 800e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e040:	4698      	mov	r8, r3
 800e042:	898b      	ldrh	r3, [r1, #12]
 800e044:	061b      	lsls	r3, r3, #24
 800e046:	b09d      	sub	sp, #116	; 0x74
 800e048:	4607      	mov	r7, r0
 800e04a:	460d      	mov	r5, r1
 800e04c:	4614      	mov	r4, r2
 800e04e:	d50e      	bpl.n	800e06e <_svfiprintf_r+0x32>
 800e050:	690b      	ldr	r3, [r1, #16]
 800e052:	b963      	cbnz	r3, 800e06e <_svfiprintf_r+0x32>
 800e054:	2140      	movs	r1, #64	; 0x40
 800e056:	f7ff ff21 	bl	800de9c <_malloc_r>
 800e05a:	6028      	str	r0, [r5, #0]
 800e05c:	6128      	str	r0, [r5, #16]
 800e05e:	b920      	cbnz	r0, 800e06a <_svfiprintf_r+0x2e>
 800e060:	230c      	movs	r3, #12
 800e062:	603b      	str	r3, [r7, #0]
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	e0d1      	b.n	800e20e <_svfiprintf_r+0x1d2>
 800e06a:	2340      	movs	r3, #64	; 0x40
 800e06c:	616b      	str	r3, [r5, #20]
 800e06e:	2300      	movs	r3, #0
 800e070:	9309      	str	r3, [sp, #36]	; 0x24
 800e072:	2320      	movs	r3, #32
 800e074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e078:	f8cd 800c 	str.w	r8, [sp, #12]
 800e07c:	2330      	movs	r3, #48	; 0x30
 800e07e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e228 <_svfiprintf_r+0x1ec>
 800e082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e086:	f04f 0901 	mov.w	r9, #1
 800e08a:	4623      	mov	r3, r4
 800e08c:	469a      	mov	sl, r3
 800e08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e092:	b10a      	cbz	r2, 800e098 <_svfiprintf_r+0x5c>
 800e094:	2a25      	cmp	r2, #37	; 0x25
 800e096:	d1f9      	bne.n	800e08c <_svfiprintf_r+0x50>
 800e098:	ebba 0b04 	subs.w	fp, sl, r4
 800e09c:	d00b      	beq.n	800e0b6 <_svfiprintf_r+0x7a>
 800e09e:	465b      	mov	r3, fp
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	f7ff ff6d 	bl	800df84 <__ssputs_r>
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	f000 80aa 	beq.w	800e204 <_svfiprintf_r+0x1c8>
 800e0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0b2:	445a      	add	r2, fp
 800e0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 80a2 	beq.w	800e204 <_svfiprintf_r+0x1c8>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ca:	f10a 0a01 	add.w	sl, sl, #1
 800e0ce:	9304      	str	r3, [sp, #16]
 800e0d0:	9307      	str	r3, [sp, #28]
 800e0d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0d6:	931a      	str	r3, [sp, #104]	; 0x68
 800e0d8:	4654      	mov	r4, sl
 800e0da:	2205      	movs	r2, #5
 800e0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e0:	4851      	ldr	r0, [pc, #324]	; (800e228 <_svfiprintf_r+0x1ec>)
 800e0e2:	f7f2 f905 	bl	80002f0 <memchr>
 800e0e6:	9a04      	ldr	r2, [sp, #16]
 800e0e8:	b9d8      	cbnz	r0, 800e122 <_svfiprintf_r+0xe6>
 800e0ea:	06d0      	lsls	r0, r2, #27
 800e0ec:	bf44      	itt	mi
 800e0ee:	2320      	movmi	r3, #32
 800e0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0f4:	0711      	lsls	r1, r2, #28
 800e0f6:	bf44      	itt	mi
 800e0f8:	232b      	movmi	r3, #43	; 0x2b
 800e0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e102:	2b2a      	cmp	r3, #42	; 0x2a
 800e104:	d015      	beq.n	800e132 <_svfiprintf_r+0xf6>
 800e106:	9a07      	ldr	r2, [sp, #28]
 800e108:	4654      	mov	r4, sl
 800e10a:	2000      	movs	r0, #0
 800e10c:	f04f 0c0a 	mov.w	ip, #10
 800e110:	4621      	mov	r1, r4
 800e112:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e116:	3b30      	subs	r3, #48	; 0x30
 800e118:	2b09      	cmp	r3, #9
 800e11a:	d94e      	bls.n	800e1ba <_svfiprintf_r+0x17e>
 800e11c:	b1b0      	cbz	r0, 800e14c <_svfiprintf_r+0x110>
 800e11e:	9207      	str	r2, [sp, #28]
 800e120:	e014      	b.n	800e14c <_svfiprintf_r+0x110>
 800e122:	eba0 0308 	sub.w	r3, r0, r8
 800e126:	fa09 f303 	lsl.w	r3, r9, r3
 800e12a:	4313      	orrs	r3, r2
 800e12c:	9304      	str	r3, [sp, #16]
 800e12e:	46a2      	mov	sl, r4
 800e130:	e7d2      	b.n	800e0d8 <_svfiprintf_r+0x9c>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	1d19      	adds	r1, r3, #4
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	9103      	str	r1, [sp, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	bfbb      	ittet	lt
 800e13e:	425b      	neglt	r3, r3
 800e140:	f042 0202 	orrlt.w	r2, r2, #2
 800e144:	9307      	strge	r3, [sp, #28]
 800e146:	9307      	strlt	r3, [sp, #28]
 800e148:	bfb8      	it	lt
 800e14a:	9204      	strlt	r2, [sp, #16]
 800e14c:	7823      	ldrb	r3, [r4, #0]
 800e14e:	2b2e      	cmp	r3, #46	; 0x2e
 800e150:	d10c      	bne.n	800e16c <_svfiprintf_r+0x130>
 800e152:	7863      	ldrb	r3, [r4, #1]
 800e154:	2b2a      	cmp	r3, #42	; 0x2a
 800e156:	d135      	bne.n	800e1c4 <_svfiprintf_r+0x188>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	1d1a      	adds	r2, r3, #4
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	9203      	str	r2, [sp, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	bfb8      	it	lt
 800e164:	f04f 33ff 	movlt.w	r3, #4294967295
 800e168:	3402      	adds	r4, #2
 800e16a:	9305      	str	r3, [sp, #20]
 800e16c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e238 <_svfiprintf_r+0x1fc>
 800e170:	7821      	ldrb	r1, [r4, #0]
 800e172:	2203      	movs	r2, #3
 800e174:	4650      	mov	r0, sl
 800e176:	f7f2 f8bb 	bl	80002f0 <memchr>
 800e17a:	b140      	cbz	r0, 800e18e <_svfiprintf_r+0x152>
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	eba0 000a 	sub.w	r0, r0, sl
 800e182:	fa03 f000 	lsl.w	r0, r3, r0
 800e186:	9b04      	ldr	r3, [sp, #16]
 800e188:	4303      	orrs	r3, r0
 800e18a:	3401      	adds	r4, #1
 800e18c:	9304      	str	r3, [sp, #16]
 800e18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e192:	4826      	ldr	r0, [pc, #152]	; (800e22c <_svfiprintf_r+0x1f0>)
 800e194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e198:	2206      	movs	r2, #6
 800e19a:	f7f2 f8a9 	bl	80002f0 <memchr>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d038      	beq.n	800e214 <_svfiprintf_r+0x1d8>
 800e1a2:	4b23      	ldr	r3, [pc, #140]	; (800e230 <_svfiprintf_r+0x1f4>)
 800e1a4:	bb1b      	cbnz	r3, 800e1ee <_svfiprintf_r+0x1b2>
 800e1a6:	9b03      	ldr	r3, [sp, #12]
 800e1a8:	3307      	adds	r3, #7
 800e1aa:	f023 0307 	bic.w	r3, r3, #7
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	9303      	str	r3, [sp, #12]
 800e1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b4:	4433      	add	r3, r6
 800e1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b8:	e767      	b.n	800e08a <_svfiprintf_r+0x4e>
 800e1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1be:	460c      	mov	r4, r1
 800e1c0:	2001      	movs	r0, #1
 800e1c2:	e7a5      	b.n	800e110 <_svfiprintf_r+0xd4>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	3401      	adds	r4, #1
 800e1c8:	9305      	str	r3, [sp, #20]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f04f 0c0a 	mov.w	ip, #10
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1d6:	3a30      	subs	r2, #48	; 0x30
 800e1d8:	2a09      	cmp	r2, #9
 800e1da:	d903      	bls.n	800e1e4 <_svfiprintf_r+0x1a8>
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0c5      	beq.n	800e16c <_svfiprintf_r+0x130>
 800e1e0:	9105      	str	r1, [sp, #20]
 800e1e2:	e7c3      	b.n	800e16c <_svfiprintf_r+0x130>
 800e1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e7f0      	b.n	800e1d0 <_svfiprintf_r+0x194>
 800e1ee:	ab03      	add	r3, sp, #12
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	462a      	mov	r2, r5
 800e1f4:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <_svfiprintf_r+0x1f8>)
 800e1f6:	a904      	add	r1, sp, #16
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7fb ffad 	bl	800a158 <_printf_float>
 800e1fe:	1c42      	adds	r2, r0, #1
 800e200:	4606      	mov	r6, r0
 800e202:	d1d6      	bne.n	800e1b2 <_svfiprintf_r+0x176>
 800e204:	89ab      	ldrh	r3, [r5, #12]
 800e206:	065b      	lsls	r3, r3, #25
 800e208:	f53f af2c 	bmi.w	800e064 <_svfiprintf_r+0x28>
 800e20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e20e:	b01d      	add	sp, #116	; 0x74
 800e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e214:	ab03      	add	r3, sp, #12
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	462a      	mov	r2, r5
 800e21a:	4b06      	ldr	r3, [pc, #24]	; (800e234 <_svfiprintf_r+0x1f8>)
 800e21c:	a904      	add	r1, sp, #16
 800e21e:	4638      	mov	r0, r7
 800e220:	f7fc fa26 	bl	800a670 <_printf_i>
 800e224:	e7eb      	b.n	800e1fe <_svfiprintf_r+0x1c2>
 800e226:	bf00      	nop
 800e228:	0800f7d4 	.word	0x0800f7d4
 800e22c:	0800f7de 	.word	0x0800f7de
 800e230:	0800a159 	.word	0x0800a159
 800e234:	0800df85 	.word	0x0800df85
 800e238:	0800f7da 	.word	0x0800f7da

0800e23c <__sfputc_r>:
 800e23c:	6893      	ldr	r3, [r2, #8]
 800e23e:	3b01      	subs	r3, #1
 800e240:	2b00      	cmp	r3, #0
 800e242:	b410      	push	{r4}
 800e244:	6093      	str	r3, [r2, #8]
 800e246:	da08      	bge.n	800e25a <__sfputc_r+0x1e>
 800e248:	6994      	ldr	r4, [r2, #24]
 800e24a:	42a3      	cmp	r3, r4
 800e24c:	db01      	blt.n	800e252 <__sfputc_r+0x16>
 800e24e:	290a      	cmp	r1, #10
 800e250:	d103      	bne.n	800e25a <__sfputc_r+0x1e>
 800e252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e256:	f7fd bc7b 	b.w	800bb50 <__swbuf_r>
 800e25a:	6813      	ldr	r3, [r2, #0]
 800e25c:	1c58      	adds	r0, r3, #1
 800e25e:	6010      	str	r0, [r2, #0]
 800e260:	7019      	strb	r1, [r3, #0]
 800e262:	4608      	mov	r0, r1
 800e264:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <__sfputs_r>:
 800e26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26c:	4606      	mov	r6, r0
 800e26e:	460f      	mov	r7, r1
 800e270:	4614      	mov	r4, r2
 800e272:	18d5      	adds	r5, r2, r3
 800e274:	42ac      	cmp	r4, r5
 800e276:	d101      	bne.n	800e27c <__sfputs_r+0x12>
 800e278:	2000      	movs	r0, #0
 800e27a:	e007      	b.n	800e28c <__sfputs_r+0x22>
 800e27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e280:	463a      	mov	r2, r7
 800e282:	4630      	mov	r0, r6
 800e284:	f7ff ffda 	bl	800e23c <__sfputc_r>
 800e288:	1c43      	adds	r3, r0, #1
 800e28a:	d1f3      	bne.n	800e274 <__sfputs_r+0xa>
 800e28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e290 <_vfiprintf_r>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	460d      	mov	r5, r1
 800e296:	b09d      	sub	sp, #116	; 0x74
 800e298:	4614      	mov	r4, r2
 800e29a:	4698      	mov	r8, r3
 800e29c:	4606      	mov	r6, r0
 800e29e:	b118      	cbz	r0, 800e2a8 <_vfiprintf_r+0x18>
 800e2a0:	6983      	ldr	r3, [r0, #24]
 800e2a2:	b90b      	cbnz	r3, 800e2a8 <_vfiprintf_r+0x18>
 800e2a4:	f7fe fc28 	bl	800caf8 <__sinit>
 800e2a8:	4b89      	ldr	r3, [pc, #548]	; (800e4d0 <_vfiprintf_r+0x240>)
 800e2aa:	429d      	cmp	r5, r3
 800e2ac:	d11b      	bne.n	800e2e6 <_vfiprintf_r+0x56>
 800e2ae:	6875      	ldr	r5, [r6, #4]
 800e2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2b2:	07d9      	lsls	r1, r3, #31
 800e2b4:	d405      	bmi.n	800e2c2 <_vfiprintf_r+0x32>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	059a      	lsls	r2, r3, #22
 800e2ba:	d402      	bmi.n	800e2c2 <_vfiprintf_r+0x32>
 800e2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2be:	f7ff f82c 	bl	800d31a <__retarget_lock_acquire_recursive>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	071b      	lsls	r3, r3, #28
 800e2c6:	d501      	bpl.n	800e2cc <_vfiprintf_r+0x3c>
 800e2c8:	692b      	ldr	r3, [r5, #16]
 800e2ca:	b9eb      	cbnz	r3, 800e308 <_vfiprintf_r+0x78>
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f7fd fc90 	bl	800bbf4 <__swsetup_r>
 800e2d4:	b1c0      	cbz	r0, 800e308 <_vfiprintf_r+0x78>
 800e2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2d8:	07dc      	lsls	r4, r3, #31
 800e2da:	d50e      	bpl.n	800e2fa <_vfiprintf_r+0x6a>
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e0:	b01d      	add	sp, #116	; 0x74
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	4b7b      	ldr	r3, [pc, #492]	; (800e4d4 <_vfiprintf_r+0x244>)
 800e2e8:	429d      	cmp	r5, r3
 800e2ea:	d101      	bne.n	800e2f0 <_vfiprintf_r+0x60>
 800e2ec:	68b5      	ldr	r5, [r6, #8]
 800e2ee:	e7df      	b.n	800e2b0 <_vfiprintf_r+0x20>
 800e2f0:	4b79      	ldr	r3, [pc, #484]	; (800e4d8 <_vfiprintf_r+0x248>)
 800e2f2:	429d      	cmp	r5, r3
 800e2f4:	bf08      	it	eq
 800e2f6:	68f5      	ldreq	r5, [r6, #12]
 800e2f8:	e7da      	b.n	800e2b0 <_vfiprintf_r+0x20>
 800e2fa:	89ab      	ldrh	r3, [r5, #12]
 800e2fc:	0598      	lsls	r0, r3, #22
 800e2fe:	d4ed      	bmi.n	800e2dc <_vfiprintf_r+0x4c>
 800e300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e302:	f7ff f80b 	bl	800d31c <__retarget_lock_release_recursive>
 800e306:	e7e9      	b.n	800e2dc <_vfiprintf_r+0x4c>
 800e308:	2300      	movs	r3, #0
 800e30a:	9309      	str	r3, [sp, #36]	; 0x24
 800e30c:	2320      	movs	r3, #32
 800e30e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e312:	f8cd 800c 	str.w	r8, [sp, #12]
 800e316:	2330      	movs	r3, #48	; 0x30
 800e318:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e4dc <_vfiprintf_r+0x24c>
 800e31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e320:	f04f 0901 	mov.w	r9, #1
 800e324:	4623      	mov	r3, r4
 800e326:	469a      	mov	sl, r3
 800e328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e32c:	b10a      	cbz	r2, 800e332 <_vfiprintf_r+0xa2>
 800e32e:	2a25      	cmp	r2, #37	; 0x25
 800e330:	d1f9      	bne.n	800e326 <_vfiprintf_r+0x96>
 800e332:	ebba 0b04 	subs.w	fp, sl, r4
 800e336:	d00b      	beq.n	800e350 <_vfiprintf_r+0xc0>
 800e338:	465b      	mov	r3, fp
 800e33a:	4622      	mov	r2, r4
 800e33c:	4629      	mov	r1, r5
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ff93 	bl	800e26a <__sfputs_r>
 800e344:	3001      	adds	r0, #1
 800e346:	f000 80aa 	beq.w	800e49e <_vfiprintf_r+0x20e>
 800e34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e34c:	445a      	add	r2, fp
 800e34e:	9209      	str	r2, [sp, #36]	; 0x24
 800e350:	f89a 3000 	ldrb.w	r3, [sl]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 80a2 	beq.w	800e49e <_vfiprintf_r+0x20e>
 800e35a:	2300      	movs	r3, #0
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e364:	f10a 0a01 	add.w	sl, sl, #1
 800e368:	9304      	str	r3, [sp, #16]
 800e36a:	9307      	str	r3, [sp, #28]
 800e36c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e370:	931a      	str	r3, [sp, #104]	; 0x68
 800e372:	4654      	mov	r4, sl
 800e374:	2205      	movs	r2, #5
 800e376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37a:	4858      	ldr	r0, [pc, #352]	; (800e4dc <_vfiprintf_r+0x24c>)
 800e37c:	f7f1 ffb8 	bl	80002f0 <memchr>
 800e380:	9a04      	ldr	r2, [sp, #16]
 800e382:	b9d8      	cbnz	r0, 800e3bc <_vfiprintf_r+0x12c>
 800e384:	06d1      	lsls	r1, r2, #27
 800e386:	bf44      	itt	mi
 800e388:	2320      	movmi	r3, #32
 800e38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e38e:	0713      	lsls	r3, r2, #28
 800e390:	bf44      	itt	mi
 800e392:	232b      	movmi	r3, #43	; 0x2b
 800e394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e398:	f89a 3000 	ldrb.w	r3, [sl]
 800e39c:	2b2a      	cmp	r3, #42	; 0x2a
 800e39e:	d015      	beq.n	800e3cc <_vfiprintf_r+0x13c>
 800e3a0:	9a07      	ldr	r2, [sp, #28]
 800e3a2:	4654      	mov	r4, sl
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	f04f 0c0a 	mov.w	ip, #10
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3b0:	3b30      	subs	r3, #48	; 0x30
 800e3b2:	2b09      	cmp	r3, #9
 800e3b4:	d94e      	bls.n	800e454 <_vfiprintf_r+0x1c4>
 800e3b6:	b1b0      	cbz	r0, 800e3e6 <_vfiprintf_r+0x156>
 800e3b8:	9207      	str	r2, [sp, #28]
 800e3ba:	e014      	b.n	800e3e6 <_vfiprintf_r+0x156>
 800e3bc:	eba0 0308 	sub.w	r3, r0, r8
 800e3c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	9304      	str	r3, [sp, #16]
 800e3c8:	46a2      	mov	sl, r4
 800e3ca:	e7d2      	b.n	800e372 <_vfiprintf_r+0xe2>
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	1d19      	adds	r1, r3, #4
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	9103      	str	r1, [sp, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bfbb      	ittet	lt
 800e3d8:	425b      	neglt	r3, r3
 800e3da:	f042 0202 	orrlt.w	r2, r2, #2
 800e3de:	9307      	strge	r3, [sp, #28]
 800e3e0:	9307      	strlt	r3, [sp, #28]
 800e3e2:	bfb8      	it	lt
 800e3e4:	9204      	strlt	r2, [sp, #16]
 800e3e6:	7823      	ldrb	r3, [r4, #0]
 800e3e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ea:	d10c      	bne.n	800e406 <_vfiprintf_r+0x176>
 800e3ec:	7863      	ldrb	r3, [r4, #1]
 800e3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f0:	d135      	bne.n	800e45e <_vfiprintf_r+0x1ce>
 800e3f2:	9b03      	ldr	r3, [sp, #12]
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bfb8      	it	lt
 800e3fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e402:	3402      	adds	r4, #2
 800e404:	9305      	str	r3, [sp, #20]
 800e406:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4ec <_vfiprintf_r+0x25c>
 800e40a:	7821      	ldrb	r1, [r4, #0]
 800e40c:	2203      	movs	r2, #3
 800e40e:	4650      	mov	r0, sl
 800e410:	f7f1 ff6e 	bl	80002f0 <memchr>
 800e414:	b140      	cbz	r0, 800e428 <_vfiprintf_r+0x198>
 800e416:	2340      	movs	r3, #64	; 0x40
 800e418:	eba0 000a 	sub.w	r0, r0, sl
 800e41c:	fa03 f000 	lsl.w	r0, r3, r0
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	4303      	orrs	r3, r0
 800e424:	3401      	adds	r4, #1
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42c:	482c      	ldr	r0, [pc, #176]	; (800e4e0 <_vfiprintf_r+0x250>)
 800e42e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e432:	2206      	movs	r2, #6
 800e434:	f7f1 ff5c 	bl	80002f0 <memchr>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d03f      	beq.n	800e4bc <_vfiprintf_r+0x22c>
 800e43c:	4b29      	ldr	r3, [pc, #164]	; (800e4e4 <_vfiprintf_r+0x254>)
 800e43e:	bb1b      	cbnz	r3, 800e488 <_vfiprintf_r+0x1f8>
 800e440:	9b03      	ldr	r3, [sp, #12]
 800e442:	3307      	adds	r3, #7
 800e444:	f023 0307 	bic.w	r3, r3, #7
 800e448:	3308      	adds	r3, #8
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e44e:	443b      	add	r3, r7
 800e450:	9309      	str	r3, [sp, #36]	; 0x24
 800e452:	e767      	b.n	800e324 <_vfiprintf_r+0x94>
 800e454:	fb0c 3202 	mla	r2, ip, r2, r3
 800e458:	460c      	mov	r4, r1
 800e45a:	2001      	movs	r0, #1
 800e45c:	e7a5      	b.n	800e3aa <_vfiprintf_r+0x11a>
 800e45e:	2300      	movs	r3, #0
 800e460:	3401      	adds	r4, #1
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	4619      	mov	r1, r3
 800e466:	f04f 0c0a 	mov.w	ip, #10
 800e46a:	4620      	mov	r0, r4
 800e46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e470:	3a30      	subs	r2, #48	; 0x30
 800e472:	2a09      	cmp	r2, #9
 800e474:	d903      	bls.n	800e47e <_vfiprintf_r+0x1ee>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0c5      	beq.n	800e406 <_vfiprintf_r+0x176>
 800e47a:	9105      	str	r1, [sp, #20]
 800e47c:	e7c3      	b.n	800e406 <_vfiprintf_r+0x176>
 800e47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e482:	4604      	mov	r4, r0
 800e484:	2301      	movs	r3, #1
 800e486:	e7f0      	b.n	800e46a <_vfiprintf_r+0x1da>
 800e488:	ab03      	add	r3, sp, #12
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	462a      	mov	r2, r5
 800e48e:	4b16      	ldr	r3, [pc, #88]	; (800e4e8 <_vfiprintf_r+0x258>)
 800e490:	a904      	add	r1, sp, #16
 800e492:	4630      	mov	r0, r6
 800e494:	f7fb fe60 	bl	800a158 <_printf_float>
 800e498:	4607      	mov	r7, r0
 800e49a:	1c78      	adds	r0, r7, #1
 800e49c:	d1d6      	bne.n	800e44c <_vfiprintf_r+0x1bc>
 800e49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4a0:	07d9      	lsls	r1, r3, #31
 800e4a2:	d405      	bmi.n	800e4b0 <_vfiprintf_r+0x220>
 800e4a4:	89ab      	ldrh	r3, [r5, #12]
 800e4a6:	059a      	lsls	r2, r3, #22
 800e4a8:	d402      	bmi.n	800e4b0 <_vfiprintf_r+0x220>
 800e4aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4ac:	f7fe ff36 	bl	800d31c <__retarget_lock_release_recursive>
 800e4b0:	89ab      	ldrh	r3, [r5, #12]
 800e4b2:	065b      	lsls	r3, r3, #25
 800e4b4:	f53f af12 	bmi.w	800e2dc <_vfiprintf_r+0x4c>
 800e4b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ba:	e711      	b.n	800e2e0 <_vfiprintf_r+0x50>
 800e4bc:	ab03      	add	r3, sp, #12
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <_vfiprintf_r+0x258>)
 800e4c4:	a904      	add	r1, sp, #16
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f7fc f8d2 	bl	800a670 <_printf_i>
 800e4cc:	e7e4      	b.n	800e498 <_vfiprintf_r+0x208>
 800e4ce:	bf00      	nop
 800e4d0:	0800f5bc 	.word	0x0800f5bc
 800e4d4:	0800f5dc 	.word	0x0800f5dc
 800e4d8:	0800f59c 	.word	0x0800f59c
 800e4dc:	0800f7d4 	.word	0x0800f7d4
 800e4e0:	0800f7de 	.word	0x0800f7de
 800e4e4:	0800a159 	.word	0x0800a159
 800e4e8:	0800e26b 	.word	0x0800e26b
 800e4ec:	0800f7da 	.word	0x0800f7da

0800e4f0 <nan>:
 800e4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4f8 <nan+0x8>
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	00000000 	.word	0x00000000
 800e4fc:	7ff80000 	.word	0x7ff80000

0800e500 <_sbrk_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d06      	ldr	r5, [pc, #24]	; (800e51c <_sbrk_r+0x1c>)
 800e504:	2300      	movs	r3, #0
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	602b      	str	r3, [r5, #0]
 800e50c:	f7f4 fe86 	bl	800321c <_sbrk>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_sbrk_r+0x1a>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_sbrk_r+0x1a>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	24000690 	.word	0x24000690

0800e520 <__sread>:
 800e520:	b510      	push	{r4, lr}
 800e522:	460c      	mov	r4, r1
 800e524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e528:	f000 f93a 	bl	800e7a0 <_read_r>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	bfab      	itete	ge
 800e530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e532:	89a3      	ldrhlt	r3, [r4, #12]
 800e534:	181b      	addge	r3, r3, r0
 800e536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e53a:	bfac      	ite	ge
 800e53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e53e:	81a3      	strhlt	r3, [r4, #12]
 800e540:	bd10      	pop	{r4, pc}

0800e542 <__swrite>:
 800e542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e546:	461f      	mov	r7, r3
 800e548:	898b      	ldrh	r3, [r1, #12]
 800e54a:	05db      	lsls	r3, r3, #23
 800e54c:	4605      	mov	r5, r0
 800e54e:	460c      	mov	r4, r1
 800e550:	4616      	mov	r6, r2
 800e552:	d505      	bpl.n	800e560 <__swrite+0x1e>
 800e554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e558:	2302      	movs	r3, #2
 800e55a:	2200      	movs	r2, #0
 800e55c:	f000 f8b8 	bl	800e6d0 <_lseek_r>
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	4632      	mov	r2, r6
 800e56e:	463b      	mov	r3, r7
 800e570:	4628      	mov	r0, r5
 800e572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e576:	f000 b837 	b.w	800e5e8 <_write_r>

0800e57a <__sseek>:
 800e57a:	b510      	push	{r4, lr}
 800e57c:	460c      	mov	r4, r1
 800e57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e582:	f000 f8a5 	bl	800e6d0 <_lseek_r>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	bf15      	itete	ne
 800e58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e596:	81a3      	strheq	r3, [r4, #12]
 800e598:	bf18      	it	ne
 800e59a:	81a3      	strhne	r3, [r4, #12]
 800e59c:	bd10      	pop	{r4, pc}

0800e59e <__sclose>:
 800e59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a2:	f000 b851 	b.w	800e648 <_close_r>

0800e5a6 <strncmp>:
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	b17a      	cbz	r2, 800e5ca <strncmp+0x24>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	3901      	subs	r1, #1
 800e5ae:	1884      	adds	r4, r0, r2
 800e5b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e5b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e5b8:	4290      	cmp	r0, r2
 800e5ba:	d101      	bne.n	800e5c0 <strncmp+0x1a>
 800e5bc:	42a3      	cmp	r3, r4
 800e5be:	d101      	bne.n	800e5c4 <strncmp+0x1e>
 800e5c0:	1a80      	subs	r0, r0, r2
 800e5c2:	bd10      	pop	{r4, pc}
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d1f3      	bne.n	800e5b0 <strncmp+0xa>
 800e5c8:	e7fa      	b.n	800e5c0 <strncmp+0x1a>
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	e7f9      	b.n	800e5c2 <strncmp+0x1c>

0800e5ce <__ascii_wctomb>:
 800e5ce:	b149      	cbz	r1, 800e5e4 <__ascii_wctomb+0x16>
 800e5d0:	2aff      	cmp	r2, #255	; 0xff
 800e5d2:	bf85      	ittet	hi
 800e5d4:	238a      	movhi	r3, #138	; 0x8a
 800e5d6:	6003      	strhi	r3, [r0, #0]
 800e5d8:	700a      	strbls	r2, [r1, #0]
 800e5da:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5de:	bf98      	it	ls
 800e5e0:	2001      	movls	r0, #1
 800e5e2:	4770      	bx	lr
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	4770      	bx	lr

0800e5e8 <_write_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	4d07      	ldr	r5, [pc, #28]	; (800e608 <_write_r+0x20>)
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f7f4 fdbf 	bl	800317a <_write>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d102      	bne.n	800e606 <_write_r+0x1e>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	b103      	cbz	r3, 800e606 <_write_r+0x1e>
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	bd38      	pop	{r3, r4, r5, pc}
 800e608:	24000690 	.word	0x24000690

0800e60c <__assert_func>:
 800e60c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e60e:	4614      	mov	r4, r2
 800e610:	461a      	mov	r2, r3
 800e612:	4b09      	ldr	r3, [pc, #36]	; (800e638 <__assert_func+0x2c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4605      	mov	r5, r0
 800e618:	68d8      	ldr	r0, [r3, #12]
 800e61a:	b14c      	cbz	r4, 800e630 <__assert_func+0x24>
 800e61c:	4b07      	ldr	r3, [pc, #28]	; (800e63c <__assert_func+0x30>)
 800e61e:	9100      	str	r1, [sp, #0]
 800e620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e624:	4906      	ldr	r1, [pc, #24]	; (800e640 <__assert_func+0x34>)
 800e626:	462b      	mov	r3, r5
 800e628:	f000 f81e 	bl	800e668 <fiprintf>
 800e62c:	f000 f8ca 	bl	800e7c4 <abort>
 800e630:	4b04      	ldr	r3, [pc, #16]	; (800e644 <__assert_func+0x38>)
 800e632:	461c      	mov	r4, r3
 800e634:	e7f3      	b.n	800e61e <__assert_func+0x12>
 800e636:	bf00      	nop
 800e638:	24000030 	.word	0x24000030
 800e63c:	0800f7e5 	.word	0x0800f7e5
 800e640:	0800f7f2 	.word	0x0800f7f2
 800e644:	0800f820 	.word	0x0800f820

0800e648 <_close_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d06      	ldr	r5, [pc, #24]	; (800e664 <_close_r+0x1c>)
 800e64c:	2300      	movs	r3, #0
 800e64e:	4604      	mov	r4, r0
 800e650:	4608      	mov	r0, r1
 800e652:	602b      	str	r3, [r5, #0]
 800e654:	f7f4 fdad 	bl	80031b2 <_close>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d102      	bne.n	800e662 <_close_r+0x1a>
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	b103      	cbz	r3, 800e662 <_close_r+0x1a>
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	24000690 	.word	0x24000690

0800e668 <fiprintf>:
 800e668:	b40e      	push	{r1, r2, r3}
 800e66a:	b503      	push	{r0, r1, lr}
 800e66c:	4601      	mov	r1, r0
 800e66e:	ab03      	add	r3, sp, #12
 800e670:	4805      	ldr	r0, [pc, #20]	; (800e688 <fiprintf+0x20>)
 800e672:	f853 2b04 	ldr.w	r2, [r3], #4
 800e676:	6800      	ldr	r0, [r0, #0]
 800e678:	9301      	str	r3, [sp, #4]
 800e67a:	f7ff fe09 	bl	800e290 <_vfiprintf_r>
 800e67e:	b002      	add	sp, #8
 800e680:	f85d eb04 	ldr.w	lr, [sp], #4
 800e684:	b003      	add	sp, #12
 800e686:	4770      	bx	lr
 800e688:	24000030 	.word	0x24000030

0800e68c <_fstat_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4d07      	ldr	r5, [pc, #28]	; (800e6ac <_fstat_r+0x20>)
 800e690:	2300      	movs	r3, #0
 800e692:	4604      	mov	r4, r0
 800e694:	4608      	mov	r0, r1
 800e696:	4611      	mov	r1, r2
 800e698:	602b      	str	r3, [r5, #0]
 800e69a:	f7f4 fd96 	bl	80031ca <_fstat>
 800e69e:	1c43      	adds	r3, r0, #1
 800e6a0:	d102      	bne.n	800e6a8 <_fstat_r+0x1c>
 800e6a2:	682b      	ldr	r3, [r5, #0]
 800e6a4:	b103      	cbz	r3, 800e6a8 <_fstat_r+0x1c>
 800e6a6:	6023      	str	r3, [r4, #0]
 800e6a8:	bd38      	pop	{r3, r4, r5, pc}
 800e6aa:	bf00      	nop
 800e6ac:	24000690 	.word	0x24000690

0800e6b0 <_isatty_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d06      	ldr	r5, [pc, #24]	; (800e6cc <_isatty_r+0x1c>)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	f7f4 fd95 	bl	80031ea <_isatty>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_isatty_r+0x1a>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_isatty_r+0x1a>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	24000690 	.word	0x24000690

0800e6d0 <_lseek_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d07      	ldr	r5, [pc, #28]	; (800e6f0 <_lseek_r+0x20>)
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	602a      	str	r2, [r5, #0]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f7f4 fd8e 	bl	8003200 <_lseek>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d102      	bne.n	800e6ee <_lseek_r+0x1e>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	b103      	cbz	r3, 800e6ee <_lseek_r+0x1e>
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	24000690 	.word	0x24000690

0800e6f4 <memmove>:
 800e6f4:	4288      	cmp	r0, r1
 800e6f6:	b510      	push	{r4, lr}
 800e6f8:	eb01 0402 	add.w	r4, r1, r2
 800e6fc:	d902      	bls.n	800e704 <memmove+0x10>
 800e6fe:	4284      	cmp	r4, r0
 800e700:	4623      	mov	r3, r4
 800e702:	d807      	bhi.n	800e714 <memmove+0x20>
 800e704:	1e43      	subs	r3, r0, #1
 800e706:	42a1      	cmp	r1, r4
 800e708:	d008      	beq.n	800e71c <memmove+0x28>
 800e70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e712:	e7f8      	b.n	800e706 <memmove+0x12>
 800e714:	4402      	add	r2, r0
 800e716:	4601      	mov	r1, r0
 800e718:	428a      	cmp	r2, r1
 800e71a:	d100      	bne.n	800e71e <memmove+0x2a>
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e726:	e7f7      	b.n	800e718 <memmove+0x24>

0800e728 <__malloc_lock>:
 800e728:	4801      	ldr	r0, [pc, #4]	; (800e730 <__malloc_lock+0x8>)
 800e72a:	f7fe bdf6 	b.w	800d31a <__retarget_lock_acquire_recursive>
 800e72e:	bf00      	nop
 800e730:	24000684 	.word	0x24000684

0800e734 <__malloc_unlock>:
 800e734:	4801      	ldr	r0, [pc, #4]	; (800e73c <__malloc_unlock+0x8>)
 800e736:	f7fe bdf1 	b.w	800d31c <__retarget_lock_release_recursive>
 800e73a:	bf00      	nop
 800e73c:	24000684 	.word	0x24000684

0800e740 <_realloc_r>:
 800e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e744:	4680      	mov	r8, r0
 800e746:	4614      	mov	r4, r2
 800e748:	460e      	mov	r6, r1
 800e74a:	b921      	cbnz	r1, 800e756 <_realloc_r+0x16>
 800e74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	4611      	mov	r1, r2
 800e752:	f7ff bba3 	b.w	800de9c <_malloc_r>
 800e756:	b92a      	cbnz	r2, 800e764 <_realloc_r+0x24>
 800e758:	f7ff fb34 	bl	800ddc4 <_free_r>
 800e75c:	4625      	mov	r5, r4
 800e75e:	4628      	mov	r0, r5
 800e760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e764:	f000 f835 	bl	800e7d2 <_malloc_usable_size_r>
 800e768:	4284      	cmp	r4, r0
 800e76a:	4607      	mov	r7, r0
 800e76c:	d802      	bhi.n	800e774 <_realloc_r+0x34>
 800e76e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e772:	d812      	bhi.n	800e79a <_realloc_r+0x5a>
 800e774:	4621      	mov	r1, r4
 800e776:	4640      	mov	r0, r8
 800e778:	f7ff fb90 	bl	800de9c <_malloc_r>
 800e77c:	4605      	mov	r5, r0
 800e77e:	2800      	cmp	r0, #0
 800e780:	d0ed      	beq.n	800e75e <_realloc_r+0x1e>
 800e782:	42bc      	cmp	r4, r7
 800e784:	4622      	mov	r2, r4
 800e786:	4631      	mov	r1, r6
 800e788:	bf28      	it	cs
 800e78a:	463a      	movcs	r2, r7
 800e78c:	f7fb fc3c 	bl	800a008 <memcpy>
 800e790:	4631      	mov	r1, r6
 800e792:	4640      	mov	r0, r8
 800e794:	f7ff fb16 	bl	800ddc4 <_free_r>
 800e798:	e7e1      	b.n	800e75e <_realloc_r+0x1e>
 800e79a:	4635      	mov	r5, r6
 800e79c:	e7df      	b.n	800e75e <_realloc_r+0x1e>
	...

0800e7a0 <_read_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d07      	ldr	r5, [pc, #28]	; (800e7c0 <_read_r+0x20>)
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	4608      	mov	r0, r1
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	602a      	str	r2, [r5, #0]
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	f7f4 fcc6 	bl	8003140 <_read>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	d102      	bne.n	800e7be <_read_r+0x1e>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	b103      	cbz	r3, 800e7be <_read_r+0x1e>
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	24000690 	.word	0x24000690

0800e7c4 <abort>:
 800e7c4:	b508      	push	{r3, lr}
 800e7c6:	2006      	movs	r0, #6
 800e7c8:	f000 f834 	bl	800e834 <raise>
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	f7f4 fcad 	bl	800312c <_exit>

0800e7d2 <_malloc_usable_size_r>:
 800e7d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d6:	1f18      	subs	r0, r3, #4
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bfbc      	itt	lt
 800e7dc:	580b      	ldrlt	r3, [r1, r0]
 800e7de:	18c0      	addlt	r0, r0, r3
 800e7e0:	4770      	bx	lr

0800e7e2 <_raise_r>:
 800e7e2:	291f      	cmp	r1, #31
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	460d      	mov	r5, r1
 800e7ea:	d904      	bls.n	800e7f6 <_raise_r+0x14>
 800e7ec:	2316      	movs	r3, #22
 800e7ee:	6003      	str	r3, [r0, #0]
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f4:	bd38      	pop	{r3, r4, r5, pc}
 800e7f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7f8:	b112      	cbz	r2, 800e800 <_raise_r+0x1e>
 800e7fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7fe:	b94b      	cbnz	r3, 800e814 <_raise_r+0x32>
 800e800:	4620      	mov	r0, r4
 800e802:	f000 f831 	bl	800e868 <_getpid_r>
 800e806:	462a      	mov	r2, r5
 800e808:	4601      	mov	r1, r0
 800e80a:	4620      	mov	r0, r4
 800e80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e810:	f000 b818 	b.w	800e844 <_kill_r>
 800e814:	2b01      	cmp	r3, #1
 800e816:	d00a      	beq.n	800e82e <_raise_r+0x4c>
 800e818:	1c59      	adds	r1, r3, #1
 800e81a:	d103      	bne.n	800e824 <_raise_r+0x42>
 800e81c:	2316      	movs	r3, #22
 800e81e:	6003      	str	r3, [r0, #0]
 800e820:	2001      	movs	r0, #1
 800e822:	e7e7      	b.n	800e7f4 <_raise_r+0x12>
 800e824:	2400      	movs	r4, #0
 800e826:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e82a:	4628      	mov	r0, r5
 800e82c:	4798      	blx	r3
 800e82e:	2000      	movs	r0, #0
 800e830:	e7e0      	b.n	800e7f4 <_raise_r+0x12>
	...

0800e834 <raise>:
 800e834:	4b02      	ldr	r3, [pc, #8]	; (800e840 <raise+0xc>)
 800e836:	4601      	mov	r1, r0
 800e838:	6818      	ldr	r0, [r3, #0]
 800e83a:	f7ff bfd2 	b.w	800e7e2 <_raise_r>
 800e83e:	bf00      	nop
 800e840:	24000030 	.word	0x24000030

0800e844 <_kill_r>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	4d07      	ldr	r5, [pc, #28]	; (800e864 <_kill_r+0x20>)
 800e848:	2300      	movs	r3, #0
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	4611      	mov	r1, r2
 800e850:	602b      	str	r3, [r5, #0]
 800e852:	f7f4 fc5b 	bl	800310c <_kill>
 800e856:	1c43      	adds	r3, r0, #1
 800e858:	d102      	bne.n	800e860 <_kill_r+0x1c>
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	b103      	cbz	r3, 800e860 <_kill_r+0x1c>
 800e85e:	6023      	str	r3, [r4, #0]
 800e860:	bd38      	pop	{r3, r4, r5, pc}
 800e862:	bf00      	nop
 800e864:	24000690 	.word	0x24000690

0800e868 <_getpid_r>:
 800e868:	f7f4 bc48 	b.w	80030fc <_getpid>

0800e86c <round>:
 800e86c:	ee10 1a90 	vmov	r1, s1
 800e870:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800e874:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800e878:	2a13      	cmp	r2, #19
 800e87a:	b510      	push	{r4, lr}
 800e87c:	ee10 3a10 	vmov	r3, s0
 800e880:	dc19      	bgt.n	800e8b6 <round+0x4a>
 800e882:	2a00      	cmp	r2, #0
 800e884:	da09      	bge.n	800e89a <round+0x2e>
 800e886:	3201      	adds	r2, #1
 800e888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e88c:	d103      	bne.n	800e896 <round+0x2a>
 800e88e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e892:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e896:	2000      	movs	r0, #0
 800e898:	e026      	b.n	800e8e8 <round+0x7c>
 800e89a:	4816      	ldr	r0, [pc, #88]	; (800e8f4 <round+0x88>)
 800e89c:	4110      	asrs	r0, r2
 800e89e:	ea01 0400 	and.w	r4, r1, r0
 800e8a2:	4323      	orrs	r3, r4
 800e8a4:	d00e      	beq.n	800e8c4 <round+0x58>
 800e8a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8aa:	fa43 f202 	asr.w	r2, r3, r2
 800e8ae:	4411      	add	r1, r2
 800e8b0:	ea21 0100 	bic.w	r1, r1, r0
 800e8b4:	e7ef      	b.n	800e896 <round+0x2a>
 800e8b6:	2a33      	cmp	r2, #51	; 0x33
 800e8b8:	dd05      	ble.n	800e8c6 <round+0x5a>
 800e8ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e8be:	d101      	bne.n	800e8c4 <round+0x58>
 800e8c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e8c4:	bd10      	pop	{r4, pc}
 800e8c6:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800e8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ce:	40e0      	lsrs	r0, r4
 800e8d0:	4203      	tst	r3, r0
 800e8d2:	d0f7      	beq.n	800e8c4 <round+0x58>
 800e8d4:	2401      	movs	r4, #1
 800e8d6:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800e8da:	fa04 f202 	lsl.w	r2, r4, r2
 800e8de:	189b      	adds	r3, r3, r2
 800e8e0:	bf28      	it	cs
 800e8e2:	1909      	addcs	r1, r1, r4
 800e8e4:	ea23 0000 	bic.w	r0, r3, r0
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	ec43 2b10 	vmov	d0, r2, r3
 800e8f0:	e7e8      	b.n	800e8c4 <round+0x58>
 800e8f2:	bf00      	nop
 800e8f4:	000fffff 	.word	0x000fffff

0800e8f8 <atan2>:
 800e8f8:	f000 b802 	b.w	800e900 <__ieee754_atan2>
 800e8fc:	0000      	movs	r0, r0
	...

0800e900 <__ieee754_atan2>:
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e902:	eeb0 7b40 	vmov.f64	d7, d0
 800e906:	ee11 6a10 	vmov	r6, s2
 800e90a:	ee11 0a90 	vmov	r0, s3
 800e90e:	4273      	negs	r3, r6
 800e910:	4f59      	ldr	r7, [pc, #356]	; (800ea78 <__ieee754_atan2+0x178>)
 800e912:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e916:	4333      	orrs	r3, r6
 800e918:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e91c:	42bb      	cmp	r3, r7
 800e91e:	d80d      	bhi.n	800e93c <__ieee754_atan2+0x3c>
 800e920:	ee10 ca10 	vmov	ip, s0
 800e924:	ee17 5a90 	vmov	r5, s15
 800e928:	f1cc 0100 	rsb	r1, ip, #0
 800e92c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e930:	ea41 010c 	orr.w	r1, r1, ip
 800e934:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800e938:	42b9      	cmp	r1, r7
 800e93a:	d904      	bls.n	800e946 <__ieee754_atan2+0x46>
 800e93c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800e940:	eeb0 0b47 	vmov.f64	d0, d7
 800e944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e946:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800e94a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800e94e:	4331      	orrs	r1, r6
 800e950:	d103      	bne.n	800e95a <__ieee754_atan2+0x5a>
 800e952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e956:	f000 b897 	b.w	800ea88 <atan>
 800e95a:	1784      	asrs	r4, r0, #30
 800e95c:	f004 0402 	and.w	r4, r4, #2
 800e960:	ea53 010c 	orrs.w	r1, r3, ip
 800e964:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800e968:	d107      	bne.n	800e97a <__ieee754_atan2+0x7a>
 800e96a:	2c02      	cmp	r4, #2
 800e96c:	d05d      	beq.n	800ea2a <__ieee754_atan2+0x12a>
 800e96e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800ea40 <__ieee754_atan2+0x140>
 800e972:	2c03      	cmp	r4, #3
 800e974:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800e978:	e7e2      	b.n	800e940 <__ieee754_atan2+0x40>
 800e97a:	ea52 0106 	orrs.w	r1, r2, r6
 800e97e:	d107      	bne.n	800e990 <__ieee754_atan2+0x90>
 800e980:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800ea48 <__ieee754_atan2+0x148>
 800e984:	ed9f 0b32 	vldr	d0, [pc, #200]	; 800ea50 <__ieee754_atan2+0x150>
 800e988:	2d00      	cmp	r5, #0
 800e98a:	fe27 7b00 	vselge.f64	d7, d7, d0
 800e98e:	e7d7      	b.n	800e940 <__ieee754_atan2+0x40>
 800e990:	42ba      	cmp	r2, r7
 800e992:	d10f      	bne.n	800e9b4 <__ieee754_atan2+0xb4>
 800e994:	4293      	cmp	r3, r2
 800e996:	f104 34ff 	add.w	r4, r4, #4294967295
 800e99a:	d107      	bne.n	800e9ac <__ieee754_atan2+0xac>
 800e99c:	2c02      	cmp	r4, #2
 800e99e:	d847      	bhi.n	800ea30 <__ieee754_atan2+0x130>
 800e9a0:	4b36      	ldr	r3, [pc, #216]	; (800ea7c <__ieee754_atan2+0x17c>)
 800e9a2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e9a6:	ed94 7b00 	vldr	d7, [r4]
 800e9aa:	e7c9      	b.n	800e940 <__ieee754_atan2+0x40>
 800e9ac:	2c02      	cmp	r4, #2
 800e9ae:	d842      	bhi.n	800ea36 <__ieee754_atan2+0x136>
 800e9b0:	4b33      	ldr	r3, [pc, #204]	; (800ea80 <__ieee754_atan2+0x180>)
 800e9b2:	e7f6      	b.n	800e9a2 <__ieee754_atan2+0xa2>
 800e9b4:	42bb      	cmp	r3, r7
 800e9b6:	d0e3      	beq.n	800e980 <__ieee754_atan2+0x80>
 800e9b8:	1a9b      	subs	r3, r3, r2
 800e9ba:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e9be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e9c2:	da1a      	bge.n	800e9fa <__ieee754_atan2+0xfa>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	da01      	bge.n	800e9cc <__ieee754_atan2+0xcc>
 800e9c8:	323c      	adds	r2, #60	; 0x3c
 800e9ca:	db19      	blt.n	800ea00 <__ieee754_atan2+0x100>
 800e9cc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800e9d0:	f000 f954 	bl	800ec7c <fabs>
 800e9d4:	f000 f858 	bl	800ea88 <atan>
 800e9d8:	eeb0 7b40 	vmov.f64	d7, d0
 800e9dc:	2c01      	cmp	r4, #1
 800e9de:	d012      	beq.n	800ea06 <__ieee754_atan2+0x106>
 800e9e0:	2c02      	cmp	r4, #2
 800e9e2:	d019      	beq.n	800ea18 <__ieee754_atan2+0x118>
 800e9e4:	2c00      	cmp	r4, #0
 800e9e6:	d0ab      	beq.n	800e940 <__ieee754_atan2+0x40>
 800e9e8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800ea58 <__ieee754_atan2+0x158>
 800e9ec:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e9f0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800ea60 <__ieee754_atan2+0x160>
 800e9f4:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e9f8:	e7a2      	b.n	800e940 <__ieee754_atan2+0x40>
 800e9fa:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ea48 <__ieee754_atan2+0x148>
 800e9fe:	e7ed      	b.n	800e9dc <__ieee754_atan2+0xdc>
 800ea00:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800ea68 <__ieee754_atan2+0x168>
 800ea04:	e7ea      	b.n	800e9dc <__ieee754_atan2+0xdc>
 800ea06:	ee17 1a90 	vmov	r1, s15
 800ea0a:	ec53 2b17 	vmov	r2, r3, d7
 800ea0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea12:	ec43 2b17 	vmov	d7, r2, r3
 800ea16:	e793      	b.n	800e940 <__ieee754_atan2+0x40>
 800ea18:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800ea58 <__ieee754_atan2+0x158>
 800ea1c:	ee37 7b40 	vsub.f64	d7, d7, d0
 800ea20:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800ea60 <__ieee754_atan2+0x160>
 800ea24:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ea28:	e78a      	b.n	800e940 <__ieee754_atan2+0x40>
 800ea2a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ea60 <__ieee754_atan2+0x160>
 800ea2e:	e787      	b.n	800e940 <__ieee754_atan2+0x40>
 800ea30:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ea70 <__ieee754_atan2+0x170>
 800ea34:	e784      	b.n	800e940 <__ieee754_atan2+0x40>
 800ea36:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ea68 <__ieee754_atan2+0x168>
 800ea3a:	e781      	b.n	800e940 <__ieee754_atan2+0x40>
 800ea3c:	f3af 8000 	nop.w
 800ea40:	54442d18 	.word	0x54442d18
 800ea44:	c00921fb 	.word	0xc00921fb
 800ea48:	54442d18 	.word	0x54442d18
 800ea4c:	3ff921fb 	.word	0x3ff921fb
 800ea50:	54442d18 	.word	0x54442d18
 800ea54:	bff921fb 	.word	0xbff921fb
 800ea58:	33145c07 	.word	0x33145c07
 800ea5c:	3ca1a626 	.word	0x3ca1a626
 800ea60:	54442d18 	.word	0x54442d18
 800ea64:	400921fb 	.word	0x400921fb
	...
 800ea70:	54442d18 	.word	0x54442d18
 800ea74:	3fe921fb 	.word	0x3fe921fb
 800ea78:	7ff00000 	.word	0x7ff00000
 800ea7c:	0800f828 	.word	0x0800f828
 800ea80:	0800f840 	.word	0x0800f840
 800ea84:	00000000 	.word	0x00000000

0800ea88 <atan>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	eeb0 7b40 	vmov.f64	d7, d0
 800ea8e:	ee17 5a90 	vmov	r5, s15
 800ea92:	4b73      	ldr	r3, [pc, #460]	; (800ec60 <atan+0x1d8>)
 800ea94:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	dd13      	ble.n	800eac4 <atan+0x3c>
 800ea9c:	4b71      	ldr	r3, [pc, #452]	; (800ec64 <atan+0x1dc>)
 800ea9e:	429c      	cmp	r4, r3
 800eaa0:	dc03      	bgt.n	800eaaa <atan+0x22>
 800eaa2:	d107      	bne.n	800eab4 <atan+0x2c>
 800eaa4:	ee10 3a10 	vmov	r3, s0
 800eaa8:	b123      	cbz	r3, 800eab4 <atan+0x2c>
 800eaaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800eaae:	eeb0 0b47 	vmov.f64	d0, d7
 800eab2:	bd38      	pop	{r3, r4, r5, pc}
 800eab4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ebf0 <atan+0x168>
 800eab8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800ebf8 <atan+0x170>
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800eac2:	e7f4      	b.n	800eaae <atan+0x26>
 800eac4:	4b68      	ldr	r3, [pc, #416]	; (800ec68 <atan+0x1e0>)
 800eac6:	429c      	cmp	r4, r3
 800eac8:	dc11      	bgt.n	800eaee <atan+0x66>
 800eaca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800eace:	429c      	cmp	r4, r3
 800ead0:	dc0a      	bgt.n	800eae8 <atan+0x60>
 800ead2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800ead6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800ec00 <atan+0x178>
 800eada:	ee30 6b06 	vadd.f64	d6, d0, d6
 800eade:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800eae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae6:	dce2      	bgt.n	800eaae <atan+0x26>
 800eae8:	f04f 33ff 	mov.w	r3, #4294967295
 800eaec:	e013      	b.n	800eb16 <atan+0x8e>
 800eaee:	f000 f8c5 	bl	800ec7c <fabs>
 800eaf2:	4b5e      	ldr	r3, [pc, #376]	; (800ec6c <atan+0x1e4>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	dc4f      	bgt.n	800eb98 <atan+0x110>
 800eaf8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eafc:	429c      	cmp	r4, r3
 800eafe:	dc41      	bgt.n	800eb84 <atan+0xfc>
 800eb00:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800eb04:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800eb08:	2300      	movs	r3, #0
 800eb0a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800eb0e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eb16:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ec08 <atan+0x180>
 800eb1a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800eb1e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800eb22:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ec10 <atan+0x188>
 800eb26:	eea5 3b06 	vfma.f64	d3, d5, d6
 800eb2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ec18 <atan+0x190>
 800eb2e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800eb32:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ec20 <atan+0x198>
 800eb36:	eea6 3b05 	vfma.f64	d3, d6, d5
 800eb3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ec28 <atan+0x1a0>
 800eb3e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800eb42:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ec30 <atan+0x1a8>
 800eb46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800ec38 <atan+0x1b0>
 800eb4a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800eb4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ec40 <atan+0x1b8>
 800eb52:	eea5 2b06 	vfma.f64	d2, d5, d6
 800eb56:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ec48 <atan+0x1c0>
 800eb5a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800eb5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800ec50 <atan+0x1c8>
 800eb62:	eea6 2b05 	vfma.f64	d2, d6, d5
 800eb66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ec58 <atan+0x1d0>
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800eb70:	ee26 6b05 	vmul.f64	d6, d6, d5
 800eb74:	eea3 6b04 	vfma.f64	d6, d3, d4
 800eb78:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eb7c:	d121      	bne.n	800ebc2 <atan+0x13a>
 800eb7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb82:	e794      	b.n	800eaae <atan+0x26>
 800eb84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800eb88:	2301      	movs	r3, #1
 800eb8a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800eb8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb92:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eb96:	e7be      	b.n	800eb16 <atan+0x8e>
 800eb98:	4b35      	ldr	r3, [pc, #212]	; (800ec70 <atan+0x1e8>)
 800eb9a:	429c      	cmp	r4, r3
 800eb9c:	da0b      	bge.n	800ebb6 <atan+0x12e>
 800eb9e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800eba2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eba6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800ebaa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800ebae:	2302      	movs	r3, #2
 800ebb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ebb4:	e7af      	b.n	800eb16 <atan+0x8e>
 800ebb6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ebba:	2303      	movs	r3, #3
 800ebbc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ebc0:	e7a9      	b.n	800eb16 <atan+0x8e>
 800ebc2:	4a2c      	ldr	r2, [pc, #176]	; (800ec74 <atan+0x1ec>)
 800ebc4:	492c      	ldr	r1, [pc, #176]	; (800ec78 <atan+0x1f0>)
 800ebc6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ebca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ebce:	ed93 5b00 	vldr	d5, [r3]
 800ebd2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ebd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ebda:	ed92 6b00 	vldr	d6, [r2]
 800ebde:	2d00      	cmp	r5, #0
 800ebe0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ebe4:	bfb8      	it	lt
 800ebe6:	eeb1 7b47 	vneglt.f64	d7, d7
 800ebea:	e760      	b.n	800eaae <atan+0x26>
 800ebec:	f3af 8000 	nop.w
 800ebf0:	54442d18 	.word	0x54442d18
 800ebf4:	3ff921fb 	.word	0x3ff921fb
 800ebf8:	54442d18 	.word	0x54442d18
 800ebfc:	bff921fb 	.word	0xbff921fb
 800ec00:	8800759c 	.word	0x8800759c
 800ec04:	7e37e43c 	.word	0x7e37e43c
 800ec08:	e322da11 	.word	0xe322da11
 800ec0c:	3f90ad3a 	.word	0x3f90ad3a
 800ec10:	24760deb 	.word	0x24760deb
 800ec14:	3fa97b4b 	.word	0x3fa97b4b
 800ec18:	a0d03d51 	.word	0xa0d03d51
 800ec1c:	3fb10d66 	.word	0x3fb10d66
 800ec20:	c54c206e 	.word	0xc54c206e
 800ec24:	3fb745cd 	.word	0x3fb745cd
 800ec28:	920083ff 	.word	0x920083ff
 800ec2c:	3fc24924 	.word	0x3fc24924
 800ec30:	5555550d 	.word	0x5555550d
 800ec34:	3fd55555 	.word	0x3fd55555
 800ec38:	52defd9a 	.word	0x52defd9a
 800ec3c:	bfadde2d 	.word	0xbfadde2d
 800ec40:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec44:	bfa2b444 	.word	0xbfa2b444
 800ec48:	af749a6d 	.word	0xaf749a6d
 800ec4c:	bfb3b0f2 	.word	0xbfb3b0f2
 800ec50:	fe231671 	.word	0xfe231671
 800ec54:	bfbc71c6 	.word	0xbfbc71c6
 800ec58:	9998ebc4 	.word	0x9998ebc4
 800ec5c:	bfc99999 	.word	0xbfc99999
 800ec60:	440fffff 	.word	0x440fffff
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	3fdbffff 	.word	0x3fdbffff
 800ec6c:	3ff2ffff 	.word	0x3ff2ffff
 800ec70:	40038000 	.word	0x40038000
 800ec74:	0800f858 	.word	0x0800f858
 800ec78:	0800f878 	.word	0x0800f878

0800ec7c <fabs>:
 800ec7c:	ec51 0b10 	vmov	r0, r1, d0
 800ec80:	ee10 2a10 	vmov	r2, s0
 800ec84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec88:	ec43 2b10 	vmov	d0, r2, r3
 800ec8c:	4770      	bx	lr
	...

0800ec90 <_init>:
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	bf00      	nop
 800ec94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec96:	bc08      	pop	{r3}
 800ec98:	469e      	mov	lr, r3
 800ec9a:	4770      	bx	lr

0800ec9c <_fini>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr
